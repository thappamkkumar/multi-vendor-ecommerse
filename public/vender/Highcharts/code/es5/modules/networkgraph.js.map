{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.3.0 (2024-01-10)\n *\n * Force directed graph module\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/networkgraph', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/DragNodesComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var composed = H.composed;\n        var addEvent = U.addEvent, pushUnique = U.pushUnique;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (pushUnique(composed, compose)) {\n                addEvent(ChartClass, 'load', onChartLoad);\n            }\n        }\n        /**\n         * Draggable mode:\n         * @private\n         */\n        function onChartLoad() {\n            var chart = this;\n            var mousedownUnbinder, mousemoveUnbinder, mouseupUnbinder;\n            if (chart.container) {\n                mousedownUnbinder = addEvent(chart.container, 'mousedown', function (event) {\n                    var point = chart.hoverPoint;\n                    if (point &&\n                        point.series &&\n                        point.series.hasDraggableNodes &&\n                        point.series.options.draggable) {\n                        point.series.onMouseDown(point, event);\n                        mousemoveUnbinder = addEvent(chart.container, 'mousemove', function (e) { return (point &&\n                            point.series &&\n                            point.series.onMouseMove(point, e)); });\n                        mouseupUnbinder = addEvent(chart.container.ownerDocument, 'mouseup', function (e) {\n                            mousemoveUnbinder();\n                            mouseupUnbinder();\n                            return point &&\n                                point.series &&\n                                point.series.onMouseUp(point, e);\n                        });\n                    }\n                });\n            }\n            addEvent(chart, 'destroy', function () {\n                mousedownUnbinder();\n            });\n        }\n        /**\n         * Mouse down action, initializing drag&drop mode.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occured.\n         * @param {Highcharts.PointerEventObject} event\n         *        Browser event, before normalization.\n         */\n        function onMouseDown(point, event) {\n            var normalizedEvent = this.chart.pointer.normalize(event);\n            point.fixedPosition = {\n                chartX: normalizedEvent.chartX,\n                chartY: normalizedEvent.chartY,\n                plotX: point.plotX,\n                plotY: point.plotY\n            };\n            point.inDragMode = true;\n        }\n        /**\n         * Mouse move action during drag&drop.\n         *\n         * @private\n         *\n         * @param {global.Event} event\n         *        Browser event, before normalization.\n         * @param {Highcharts.Point} point\n         *        The point that event occured.\n         *\n         */\n        function onMouseMove(point, event) {\n            if (point.fixedPosition && point.inDragMode) {\n                var series = this, chart = series.chart, normalizedEvent = chart.pointer.normalize(event), diffX = point.fixedPosition.chartX - normalizedEvent.chartX, diffY = point.fixedPosition.chartY - normalizedEvent.chartY, graphLayoutsLookup = chart.graphLayoutsLookup;\n                var newPlotX = void 0, newPlotY = void 0;\n                // At least 5px to apply change (avoids simple click):\n                if (Math.abs(diffX) > 5 || Math.abs(diffY) > 5) {\n                    newPlotX = point.fixedPosition.plotX - diffX;\n                    newPlotY = point.fixedPosition.plotY - diffY;\n                    if (chart.isInsidePlot(newPlotX, newPlotY)) {\n                        point.plotX = newPlotX;\n                        point.plotY = newPlotY;\n                        point.hasDragged = true;\n                        this.redrawHalo(point);\n                        graphLayoutsLookup.forEach(function (layout) {\n                            layout.restartSimulation();\n                        });\n                    }\n                }\n            }\n        }\n        /**\n         * Mouse up action, finalizing drag&drop.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occured.\n         */\n        function onMouseUp(point, _event) {\n            if (point.fixedPosition) {\n                if (point.hasDragged) {\n                    if (this.layout.enableSimulation) {\n                        this.layout.start();\n                    }\n                    else {\n                        this.chart.redraw();\n                    }\n                }\n                point.inDragMode = point.hasDragged = false;\n                if (!this.options.fixedDraggable) {\n                    delete point.fixedPosition;\n                }\n            }\n        }\n        /**\n         * Redraw halo on mousemove during the drag&drop action.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that should show halo.\n         */\n        function redrawHalo(point) {\n            if (point && this.halo) {\n                this.halo.attr({\n                    d: point.haloPath(this.options.states.hover.halo.size)\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DragNodesComposition = {\n            compose: compose,\n            onMouseDown: onMouseDown,\n            onMouseMove: onMouseMove,\n            onMouseUp: onMouseUp,\n            redrawHalo: redrawHalo\n        };\n\n        return DragNodesComposition;\n    });\n    _registerModule(_modules, 'Series/GraphLayoutComposition.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (A, H, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var setAnimation = A.setAnimation;\n        var composed = H.composed;\n        var addEvent = U.addEvent, pushUnique = U.pushUnique;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var integrations = {};\n        var layouts = {};\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (pushUnique(composed, compose)) {\n                addEvent(ChartClass, 'afterPrint', onChartAfterPrint);\n                addEvent(ChartClass, 'beforePrint', onChartBeforePrint);\n                addEvent(ChartClass, 'predraw', onChartPredraw);\n                addEvent(ChartClass, 'render', onChartRender);\n            }\n        }\n        /**\n         * Re-enable simulation after print.\n         * @private\n         */\n        function onChartAfterPrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach(function (layout) {\n                    // return to default simulation\n                    layout.updateSimulation();\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Disable simulation before print if enabled.\n         * @private\n         */\n        function onChartBeforePrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach(function (layout) {\n                    layout.updateSimulation(false);\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Clear previous layouts.\n         * @private\n         */\n        function onChartPredraw() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach(function (layout) {\n                    layout.stop();\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            var systemsStable, afterRender = false;\n            var layoutStep = function (layout) {\n                if (layout.maxIterations-- &&\n                    isFinite(layout.temperature) &&\n                    !layout.isStable() &&\n                    !layout.enableSimulation) {\n                    // Hook similar to build-in addEvent, but instead of\n                    // creating whole events logic, use just a function.\n                    // It's faster which is important for rAF code.\n                    // Used e.g. in packed-bubble series for bubble radius\n                    // calculations\n                    if (layout.beforeStep) {\n                        layout.beforeStep();\n                    }\n                    layout.step();\n                    systemsStable = false;\n                    afterRender = true;\n                }\n            };\n            if (this.graphLayoutsLookup) {\n                setAnimation(false, this);\n                // Start simulation\n                this.graphLayoutsLookup.forEach(function (layout) { return layout.start(); });\n                // Just one sync step, to run different layouts similar to\n                // async mode.\n                while (!systemsStable) {\n                    systemsStable = true;\n                    this.graphLayoutsLookup.forEach(layoutStep);\n                }\n                if (afterRender) {\n                    this.series.forEach(function (series) {\n                        if (series && series.layout) {\n                            series.render();\n                        }\n                    });\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var GraphLayoutComposition = {\n            compose: compose,\n            integrations: integrations,\n            layouts: layouts\n        };\n\n        return GraphLayoutComposition;\n    });\n    _registerModule(_modules, 'Series/NodesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var _a = SeriesRegistry.series, seriesProto = _a.prototype, pointProto = _a.prototype.pointClass.prototype;\n        var defined = U.defined, extend = U.extend, find = U.find, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var NodesComposition;\n        (function (NodesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(PointClass, SeriesClass) {\n                var pointProto = PointClass.prototype, seriesProto = SeriesClass.prototype;\n                pointProto.setNodeState = setNodeState;\n                pointProto.setState = setNodeState;\n                pointProto.update = updateNode;\n                seriesProto.destroy = destroy;\n                seriesProto.setData = setData;\n                return SeriesClass;\n            }\n            NodesComposition.compose = compose;\n            /**\n             * Create a single node that holds information on incoming and outgoing\n             * links.\n             * @private\n             */\n            function createNode(id) {\n                var PointClass = this.pointClass, findById = function (nodes, id) { return find(nodes, function (node) { return node.id === id; }); };\n                var node = findById(this.nodes, id), options;\n                if (!node) {\n                    options = this.options.nodes && findById(this.options.nodes, id);\n                    var newNode_1 = new PointClass(this, extend({\n                        className: 'highcharts-node',\n                        isNode: true,\n                        id: id,\n                        y: 1 // Pass isNull test\n                    }, options));\n                    newNode_1.linksTo = [];\n                    newNode_1.linksFrom = [];\n                    /**\n                     * Return the largest sum of either the incoming or outgoing links.\n                     * @private\n                     */\n                    newNode_1.getSum = function () {\n                        var sumTo = 0, sumFrom = 0;\n                        newNode_1.linksTo.forEach(function (link) {\n                            sumTo += link.weight || 0;\n                        });\n                        newNode_1.linksFrom.forEach(function (link) {\n                            sumFrom += link.weight || 0;\n                        });\n                        return Math.max(sumTo, sumFrom);\n                    };\n                    /**\n                     * Get the offset in weight values of a point/link.\n                     * @private\n                     */\n                    newNode_1.offset = function (point, coll) {\n                        var offset = 0;\n                        for (var i = 0; i < newNode_1[coll].length; i++) {\n                            if (newNode_1[coll][i] === point) {\n                                return offset;\n                            }\n                            offset += newNode_1[coll][i].weight;\n                        }\n                    };\n                    // Return true if the node has a shape, otherwise all links are\n                    // outgoing.\n                    newNode_1.hasShape = function () {\n                        var outgoing = 0;\n                        newNode_1.linksTo.forEach(function (link) {\n                            if (link.outgoing) {\n                                outgoing++;\n                            }\n                        });\n                        return (!newNode_1.linksTo.length ||\n                            outgoing !== newNode_1.linksTo.length);\n                    };\n                    newNode_1.index = this.nodes.push(newNode_1) - 1;\n                    node = newNode_1;\n                }\n                node.formatPrefix = 'node';\n                // for use in formats\n                node.name = node.name || node.options.id || '';\n                // Mass is used in networkgraph:\n                node.mass = pick(\n                // Node:\n                node.options.mass, node.options.marker && node.options.marker.radius, \n                // Series:\n                this.options.marker && this.options.marker.radius, \n                // Default:\n                4);\n                return node;\n            }\n            NodesComposition.createNode = createNode;\n            /**\n             * Destroy alll nodes and links.\n             * @private\n             */\n            function destroy() {\n                // Nodes must also be destroyed (#8682, #9300)\n                this.data = []\n                    .concat(this.points || [], this.nodes);\n                return seriesProto.destroy.apply(this, arguments);\n            }\n            NodesComposition.destroy = destroy;\n            /**\n             * Extend generatePoints by adding the nodes, which are Point objects but\n             * pushed to the this.nodes array.\n             * @private\n             */\n            function generatePoints() {\n                var _this = this;\n                var chart = this.chart, nodeLookup = {};\n                seriesProto.generatePoints.call(this);\n                if (!this.nodes) {\n                    this.nodes = []; // List of Point-like node items\n                }\n                this.colorCounter = 0;\n                // Reset links from previous run\n                this.nodes.forEach(function (node) {\n                    node.linksFrom.length = 0;\n                    node.linksTo.length = 0;\n                    node.level = node.options.level;\n                });\n                // Create the node list and set up links\n                this.points.forEach(function (point) {\n                    if (defined(point.from)) {\n                        if (!nodeLookup[point.from]) {\n                            nodeLookup[point.from] = _this.createNode(point.from);\n                        }\n                        nodeLookup[point.from].linksFrom.push(point);\n                        point.fromNode = nodeLookup[point.from];\n                        // Point color defaults to the fromNode's color\n                        if (chart.styledMode) {\n                            point.colorIndex = pick(point.options.colorIndex, nodeLookup[point.from].colorIndex);\n                        }\n                        else {\n                            point.color =\n                                point.options.color || nodeLookup[point.from].color;\n                        }\n                    }\n                    if (defined(point.to)) {\n                        if (!nodeLookup[point.to]) {\n                            nodeLookup[point.to] = _this.createNode(point.to);\n                        }\n                        nodeLookup[point.to].linksTo.push(point);\n                        point.toNode = nodeLookup[point.to];\n                    }\n                    point.name = point.name || point.id; // for use in formats\n                }, this);\n                // Store lookup table for later use\n                this.nodeLookup = nodeLookup;\n            }\n            NodesComposition.generatePoints = generatePoints;\n            /**\n             * Destroy all nodes on setting new data\n             * @private\n             */\n            function setData() {\n                if (this.nodes) {\n                    this.nodes.forEach(function (node) {\n                        node.destroy();\n                    });\n                    this.nodes.length = 0;\n                }\n                seriesProto.setData.apply(this, arguments);\n            }\n            /**\n             * When hovering node, highlight all connected links. When hovering a link,\n             * highlight all connected nodes.\n             * @private\n             */\n            function setNodeState(state) {\n                var args = arguments, others = this.isNode ? this.linksTo.concat(this.linksFrom) :\n                    [this.fromNode, this.toNode];\n                if (state !== 'select') {\n                    others.forEach(function (linkOrNode) {\n                        if (linkOrNode && linkOrNode.series) {\n                            pointProto.setState.apply(linkOrNode, args);\n                            if (!linkOrNode.isNode) {\n                                if (linkOrNode.fromNode.graphic) {\n                                    pointProto.setState.apply(linkOrNode.fromNode, args);\n                                }\n                                if (linkOrNode.toNode && linkOrNode.toNode.graphic) {\n                                    pointProto.setState.apply(linkOrNode.toNode, args);\n                                }\n                            }\n                        }\n                    });\n                }\n                pointProto.setState.apply(this, args);\n            }\n            NodesComposition.setNodeState = setNodeState;\n            /**\n             * When updating a node, don't update `series.options.data`, but\n             * `series.options.nodes`\n             * @private\n             */\n            function updateNode(options, redraw, animation, runEvent) {\n                var _this = this;\n                var nodes = this.series.options.nodes, data = this.series.options.data, dataLength = data && data.length || 0, linkConfig = data && data[this.index];\n                pointProto.update.call(this, options, this.isNode ? false : redraw, // Hold the redraw for nodes\n                animation, runEvent);\n                if (this.isNode) {\n                    // this.index refers to `series.nodes`, not `options.nodes` array\n                    var nodeIndex = (nodes || [])\n                        .reduce(// Array.findIndex needs a polyfill\n                    function (prevIndex, n, index) {\n                        return (_this.id === n.id ? index : prevIndex);\n                    }, -1), \n                    // Merge old config with new config. New config is stored in\n                    // options.data, because of default logic in point.update()\n                    nodeConfig = merge(nodes && nodes[nodeIndex] || {}, data && data[this.index] || {});\n                    // Restore link config\n                    if (data) {\n                        if (linkConfig) {\n                            data[this.index] = linkConfig;\n                        }\n                        else {\n                            // Remove node from config if there's more nodes than links\n                            data.length = dataLength;\n                        }\n                    }\n                    // Set node config\n                    if (nodes) {\n                        if (nodeIndex >= 0) {\n                            nodes[nodeIndex] = nodeConfig;\n                        }\n                        else {\n                            nodes.push(nodeConfig);\n                        }\n                    }\n                    else {\n                        this.series.options.nodes = [nodeConfig];\n                    }\n                    if (pick(redraw, true)) {\n                        this.series.chart.redraw(animation);\n                    }\n                }\n            }\n            NodesComposition.updateNode = updateNode;\n        })(NodesComposition || (NodesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NodesComposition;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/NetworkgraphPoint.js', [_modules['Series/NodesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (NodesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.series, seriesProto = _a.prototype, Point = _a.prototype.pointClass;\n        var addEvent = U.addEvent, css = U.css, defined = U.defined, extend = U.extend, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var NetworkgraphPoint = /** @class */ (function (_super) {\n            __extends(NetworkgraphPoint, _super);\n            /**\n             * Basic `point.init()` and additional styles applied when\n             * `series.draggable` is enabled.\n             * @private\n             */\n            function NetworkgraphPoint(series, options, x) {\n                var _this = _super.call(this, series, options, x) || this;\n                if (_this.series.options.draggable &&\n                    !_this.series.chart.styledMode) {\n                    addEvent(_this, 'mouseOver', function () {\n                        css(this.series.chart.container, { cursor: 'move' });\n                    });\n                    addEvent(_this, 'mouseOut', function () {\n                        css(this.series.chart.container, { cursor: 'default' });\n                    });\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Destroy point. If it's a node, remove all links coming out of this\n             * node. Then remove point from the layout.\n             * @private\n             */\n            NetworkgraphPoint.prototype.destroy = function () {\n                if (this.isNode) {\n                    this.linksFrom.concat(this.linksTo).forEach(function (link) {\n                        // Removing multiple nodes at the same time\n                        // will try to remove link between nodes twice\n                        if (link.destroyElements) {\n                            link.destroyElements();\n                        }\n                    });\n                }\n                this.series.layout.removeElementFromCollection(this, this.series.layout[this.isNode ? 'nodes' : 'links']);\n                return Point.prototype.destroy.apply(this, arguments);\n            };\n            /**\n             * Return degree of a node. If node has no connections, it still has\n             * deg=1.\n             * @private\n             */\n            NetworkgraphPoint.prototype.getDegree = function () {\n                var deg = this.isNode ?\n                    this.linksFrom.length + this.linksTo.length :\n                    0;\n                return deg === 0 ? 1 : deg;\n            };\n            /**\n             * Get presentational attributes of link connecting two nodes.\n             * @private\n             */\n            NetworkgraphPoint.prototype.getLinkAttributes = function () {\n                var linkOptions = this.series.options.link, pointOptions = this.options;\n                return {\n                    'stroke-width': pick(pointOptions.width, linkOptions.width),\n                    stroke: (pointOptions.color || linkOptions.color),\n                    dashstyle: (pointOptions.dashStyle || linkOptions.dashStyle),\n                    opacity: pick(pointOptions.opacity, linkOptions.opacity, 1)\n                };\n            };\n            /**\n             * Get link path connecting two nodes.\n             * @private\n             * @return {Array<Highcharts.SVGPathArray>}\n             *         Path: `['M', x, y, 'L', x, y]`\n             */\n            NetworkgraphPoint.prototype.getLinkPath = function () {\n                var left = this.fromNode, right = this.toNode;\n                // Start always from left to the right node, to prevent rendering\n                // labels upside down\n                if (left.plotX > right.plotX) {\n                    left = this.toNode;\n                    right = this.fromNode;\n                }\n                return [\n                    ['M', left.plotX || 0, left.plotY || 0],\n                    ['L', right.plotX || 0, right.plotY || 0]\n                ];\n                /*\n                IDEA: different link shapes?\n                return [\n                    'M',\n                    from.plotX,\n                    from.plotY,\n                    'Q',\n                    (to.plotX + from.plotX) / 2,\n                    (to.plotY + from.plotY) / 2 + 15,\n                    to.plotX,\n                    to.plotY\n                ];*/\n            };\n            /**\n             * Get mass fraction applied on two nodes connected to each other. By\n             * default, when mass is equal to `1`, mass fraction for both nodes\n             * equal to 0.5.\n             * @private\n             * @return {Highcharts.Dictionary<number>}\n             *         For example `{ fromNode: 0.5, toNode: 0.5 }`\n             */\n            NetworkgraphPoint.prototype.getMass = function () {\n                var m1 = this.fromNode.mass, m2 = this.toNode.mass, sum = m1 + m2;\n                return {\n                    fromNode: 1 - m1 / sum,\n                    toNode: 1 - m2 / sum\n                };\n            };\n            /**\n             * @private\n             */\n            NetworkgraphPoint.prototype.isValid = function () {\n                return !this.isNode || defined(this.id);\n            };\n            /**\n             * Redraw link's path.\n             * @private\n             */\n            NetworkgraphPoint.prototype.redrawLink = function () {\n                var path = this.getLinkPath(), attribs;\n                if (this.graphic) {\n                    this.shapeArgs = {\n                        d: path\n                    };\n                    if (!this.series.chart.styledMode) {\n                        attribs = this.series.pointAttribs(this);\n                        this.graphic.attr(attribs);\n                        (this.dataLabels || []).forEach(function (label) {\n                            if (label) {\n                                label.attr({\n                                    opacity: attribs.opacity\n                                });\n                            }\n                        });\n                    }\n                    this.graphic.animate(this.shapeArgs);\n                    // Required for dataLabels\n                    var start = path[0];\n                    var end = path[1];\n                    if (start[0] === 'M' && end[0] === 'L') {\n                        this.plotX = (start[1] + end[1]) / 2;\n                        this.plotY = (start[2] + end[2]) / 2;\n                    }\n                }\n            };\n            /**\n             * Common method for removing points and nodes in networkgraph. To\n             * remove `link`, use `series.data[index].remove()`. To remove `node`\n             * with all connections, use `series.nodes[index].remove()`.\n             * @private\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or wait for an explicit call. When\n             *        doing more operations on the chart, for example running\n             *        `point.remove()` in a loop, it is best practice to set\n             *        `redraw` to false and call `chart.redraw()` after.\n             * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation=false]\n             *        Whether to apply animation, and optionally animation\n             *        configuration.\n             */\n            NetworkgraphPoint.prototype.remove = function (redraw, animation) {\n                var point = this, series = point.series, nodesOptions = series.options.nodes || [], index, i = nodesOptions.length;\n                // For nodes, remove all connected links:\n                if (point.isNode) {\n                    // Temporary disable series.points array, because\n                    // Series.removePoint() modifies it\n                    series.points = [];\n                    // Remove link from all nodes collections:\n                    []\n                        .concat(point.linksFrom)\n                        .concat(point.linksTo)\n                        .forEach(function (linkFromTo) {\n                        // Incoming links\n                        index = linkFromTo.fromNode.linksFrom.indexOf(linkFromTo);\n                        if (index > -1) {\n                            linkFromTo.fromNode.linksFrom.splice(index, 1);\n                        }\n                        // Outcoming links\n                        index = linkFromTo.toNode.linksTo.indexOf(linkFromTo);\n                        if (index > -1) {\n                            linkFromTo.toNode.linksTo.splice(index, 1);\n                        }\n                        // Remove link from data/points collections\n                        seriesProto.removePoint.call(series, series.data.indexOf(linkFromTo), false, false);\n                    });\n                    // Restore points array, after links are removed\n                    series.points = series.data.slice();\n                    // Proceed with removing node. It's similar to\n                    // Series.removePoint() method, but doesn't modify other arrays\n                    series.nodes.splice(series.nodes.indexOf(point), 1);\n                    // Remove node options from config\n                    while (i--) {\n                        if (nodesOptions[i].id === point.options.id) {\n                            series.options.nodes.splice(i, 1);\n                            break;\n                        }\n                    }\n                    if (point) {\n                        point.destroy();\n                    }\n                    // Run redraw if requested\n                    series.isDirty = true;\n                    series.isDirtyData = true;\n                    if (redraw) {\n                        series.chart.redraw(redraw);\n                    }\n                }\n                else {\n                    series.removePoint(series.data.indexOf(point), redraw, animation);\n                }\n            };\n            /**\n             * Render link and add it to the DOM.\n             * @private\n             */\n            NetworkgraphPoint.prototype.renderLink = function () {\n                var attribs;\n                if (!this.graphic) {\n                    this.graphic = this.series.chart.renderer\n                        .path(this.getLinkPath())\n                        .addClass(this.getClassName(), true)\n                        .add(this.series.group);\n                    if (!this.series.chart.styledMode) {\n                        attribs = this.series.pointAttribs(this);\n                        this.graphic.attr(attribs);\n                        (this.dataLabels || []).forEach(function (label) {\n                            if (label) {\n                                label.attr({\n                                    opacity: attribs.opacity\n                                });\n                            }\n                        });\n                    }\n                }\n            };\n            return NetworkgraphPoint;\n        }(Point));\n        extend(NetworkgraphPoint.prototype, {\n            setState: NodesComposition.setNodeState\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NetworkgraphPoint;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/NetworkgraphSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * A networkgraph is a type of relationship chart, where connnections\n         * (links) attracts nodes (points) and other nodes repulse each other.\n         *\n         * @extends      plotOptions.line\n         * @product      highcharts\n         * @sample       highcharts/demo/network-graph/\n         *               Networkgraph\n         * @since        7.0.0\n         * @excluding    boostThreshold, animation, animationLimit, connectEnds,\n         *               colorAxis, colorKey, connectNulls, cropThreshold, dragDrop,\n         *               getExtremesFromAll, label, linecap, negativeColor,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointStart, softThreshold, stack, stacking, step,\n         *               threshold, xAxis, yAxis, zoneAxis, dataSorting,\n         *               boostBlending\n         * @requires     modules/networkgraph\n         * @optionparent plotOptions.networkgraph\n         *\n         * @private\n         */\n        var NetworkgraphSeriesDefaults = {\n            stickyTracking: false,\n            /**\n             * @default   true\n             * @extends   plotOptions.series.inactiveOtherPoints\n             * @private\n             */\n            inactiveOtherPoints: true,\n            marker: {\n                enabled: true,\n                states: {\n                    /**\n                     * The opposite state of a hover for a single point node.\n                     * Applied to all not connected nodes to the hovered one.\n                     *\n                     * @declare Highcharts.PointStatesInactiveOptionsObject\n                     */\n                    inactive: {\n                        /**\n                         * Opacity of inactive markers.\n                         */\n                        opacity: 0.3,\n                        /**\n                         * Animation when not hovering over the node.\n                         *\n                         * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                         */\n                        animation: {\n                            /** @internal */\n                            duration: 50\n                        }\n                    }\n                }\n            },\n            states: {\n                /**\n                 * The opposite state of a hover for a single point link. Applied\n                 * to all links that are not comming from the hovered node.\n                 *\n                 * @declare Highcharts.SeriesStatesInactiveOptionsObject\n                 */\n                inactive: {\n                    /**\n                     * Opacity of inactive links.\n                     */\n                    linkOpacity: 0.3,\n                    /**\n                     * Animation when not hovering over the node.\n                     *\n                     * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     */\n                    animation: {\n                        /** @internal */\n                        duration: 50\n                    }\n                }\n            },\n            /**\n             * @sample highcharts/series-networkgraph/link-datalabels\n             *         Networkgraph with labels on links\n             * @sample highcharts/series-networkgraph/textpath-datalabels\n             *         Networkgraph with labels around nodes\n             * @sample highcharts/series-networkgraph/link-datalabels\n             *         Data labels moved into the nodes\n             * @sample highcharts/series-networkgraph/link-datalabels\n             *         Data labels moved under the links\n             *\n             * @declare Highcharts.SeriesNetworkgraphDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _node_ in the networkgraph. In v7.0\n                 * defaults to `{key}`, since v7.1 defaults to `undefined` and\n                 * `formatter` is used instead.\n                 *\n                 * @type      {string}\n                 * @since     7.0.0\n                 * @apioption plotOptions.networkgraph.dataLabels.format\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Callback JavaScript function to format the data label for a node.\n                 * Note that if a `format` is defined, the format takes precedence\n                 * and the formatter is ignored.\n                 *\n                 * @type  {Highcharts.SeriesNetworkgraphDataLabelsFormatterCallbackFunction}\n                 * @since 7.0.0\n                 */\n                formatter: function () {\n                    return this.key;\n                },\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _links_ in the networkgraph.\n                 * (Default: `undefined`)\n                 *\n                 * @type      {string}\n                 * @since     7.1.0\n                 * @apioption plotOptions.networkgraph.dataLabels.linkFormat\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Callback to format data labels for _links_ in the sankey diagram.\n                 * The `linkFormat` option takes precedence over the\n                 * `linkFormatter`.\n                 *\n                 * @type  {Highcharts.SeriesNetworkgraphDataLabelsFormatterCallbackFunction}\n                 * @since 7.1.0\n                 */\n                linkFormatter: function () {\n                    return (this.point.fromNode.name +\n                        '<br>' +\n                        this.point.toNode.name);\n                },\n                /**\n                 * Options for a _link_ label text which should follow link\n                 * connection. Border and background are disabled for a label that\n                 * follows a path.\n                 *\n                 * **Note:** Only SVG-based renderer supports this option. Setting\n                 * `useHTML` to true will disable this option.\n                 *\n                 * @extends plotOptions.networkgraph.dataLabels.textPath\n                 * @since   7.1.0\n                 */\n                linkTextPath: {\n                    enabled: true\n                },\n                textPath: {\n                    enabled: false\n                },\n                style: {\n                    transition: 'opacity 2000ms'\n                },\n                defer: true,\n                animation: {\n                    defer: 1000\n                }\n            },\n            /**\n             * Link style options\n             * @private\n             */\n            link: {\n                /**\n                 * A name for the dash style to use for links.\n                 *\n                 * @type      {string}\n                 * @apioption plotOptions.networkgraph.link.dashStyle\n                 */\n                /**\n                 * Opacity of the link between two nodes.\n                 *\n                 * @type      {number}\n                 * @default   1\n                 * @apioption plotOptions.networkgraph.link.opacity\n                 */\n                /**\n                 * Color of the link between two nodes.\n                 */\n                color: 'rgba(100, 100, 100, 0.5)',\n                /**\n                 * Width (px) of the link between two nodes.\n                 */\n                width: 1\n            },\n            /**\n             * Flag to determine if nodes are draggable or not.\n             * @private\n             */\n            draggable: true,\n            layoutAlgorithm: {\n                /**\n                 * Repulsive force applied on a node. Passed are two arguments:\n                 * - `d` - which is current distance between two nodes\n                 * - `k` - which is desired distance between two nodes\n                 *\n                 * In `verlet` integration, defaults to:\n                 * `function (d, k) { return (k - d) / d * (k > d ? 1 : 0) }`\n                 *\n                 * @see [layoutAlgorithm.integration](#series.networkgraph.layoutAlgorithm.integration)\n                 *\n                 * @sample highcharts/series-networkgraph/forces/\n                 *         Custom forces with Euler integration\n                 * @sample highcharts/series-networkgraph/cuboids/\n                 *         Custom forces with Verlet integration\n                 *\n                 * @type      {Function}\n                 * @default   function (d, k) { return k * k / d; }\n                 * @apioption plotOptions.networkgraph.layoutAlgorithm.repulsiveForce\n                 */\n                /**\n                 * Attraction force applied on a node which is conected to another\n                 * node by a link. Passed are two arguments:\n                 * - `d` - which is current distance between two nodes\n                 * - `k` - which is desired distance between two nodes\n                 *\n                 * In `verlet` integration, defaults to:\n                 * `function (d, k) { return (k - d) / d; }`\n                 *\n                 * @see [layoutAlgorithm.integration](#series.networkgraph.layoutAlgorithm.integration)\n                 *\n                 * @sample highcharts/series-networkgraph/forces/\n                 *         Custom forces with Euler integration\n                 * @sample highcharts/series-networkgraph/cuboids/\n                 *         Custom forces with Verlet integration\n                 *\n                 * @type      {Function}\n                 * @default   function (d, k) { return k * k / d; }\n                 * @apioption plotOptions.networkgraph.layoutAlgorithm.attractiveForce\n                 */\n                /**\n                 * Ideal length (px) of the link between two nodes. When not\n                 * defined, length is calculated as:\n                 * `Math.pow(availableWidth * availableHeight / nodesLength, 0.4);`\n                 *\n                 * Note: Because of the algorithm specification, length of each link\n                 * might be not exactly as specified.\n                 *\n                 * @sample highcharts/series-networkgraph/styled-links/\n                 *         Numerical values\n                 *\n                 * @type      {number}\n                 * @apioption plotOptions.networkgraph.layoutAlgorithm.linkLength\n                 */\n                /**\n                 * Initial layout algorithm for positioning nodes. Can be one of\n                 * built-in options (\"circle\", \"random\") or a function where\n                 * positions should be set on each node (`this.nodes`) as\n                 * `node.plotX` and `node.plotY`\n                 *\n                 * @sample highcharts/series-networkgraph/initial-positions/\n                 *         Initial positions with callback\n                 *\n                 * @type {\"circle\"|\"random\"|Function}\n                 */\n                initialPositions: 'circle',\n                /**\n                 * When `initialPositions` are set to 'circle',\n                 * `initialPositionRadius` is a distance from the center of circle,\n                 * in which nodes are created.\n                 *\n                 * @type    {number}\n                 * @default 1\n                 * @since   7.1.0\n                 */\n                initialPositionRadius: 1,\n                /**\n                 * Experimental. Enables live simulation of the algorithm\n                 * implementation. All nodes are animated as the forces applies on\n                 * them.\n                 *\n                 * @sample highcharts/demo/network-graph/\n                 *         Live simulation enabled\n                 */\n                enableSimulation: false,\n                /**\n                 * Barnes-Hut approximation only.\n                 * Deteremines when distance between cell and node is small enough\n                 * to caculate forces. Value of `theta` is compared directly with\n                 * quotient `s / d`, where `s` is the size of the cell, and `d` is\n                 * distance between center of cell's mass and currently compared\n                 * node.\n                 *\n                 * @see [layoutAlgorithm.approximation](#series.networkgraph.layoutAlgorithm.approximation)\n                 *\n                 * @since 7.1.0\n                 */\n                theta: 0.5,\n                /**\n                 * Verlet integration only.\n                 * Max speed that node can get in one iteration. In terms of\n                 * simulation, it's a maximum translation (in pixels) that node can\n                 * move (in both, x and y, dimensions). While `friction` is applied\n                 * on all nodes, max speed is applied only for nodes that move very\n                 * fast, for example small or disconnected ones.\n                 *\n                 * @see [layoutAlgorithm.integration](#series.networkgraph.layoutAlgorithm.integration)\n                 * @see [layoutAlgorithm.friction](#series.networkgraph.layoutAlgorithm.friction)\n                 *\n                 * @since 7.1.0\n                 */\n                maxSpeed: 10,\n                /**\n                 * Approximation used to calculate repulsive forces affecting nodes.\n                 * By default, when calculateing net force, nodes are compared\n                 * against each other, which gives O(N^2) complexity. Using\n                 * Barnes-Hut approximation, we decrease this to O(N log N), but the\n                 * resulting graph will have different layout. Barnes-Hut\n                 * approximation divides space into rectangles via quad tree, where\n                 * forces exerted on nodes are calculated directly for nearby cells,\n                 * and for all others, cells are treated as a separate node with\n                 * center of mass.\n                 *\n                 * @see [layoutAlgorithm.theta](#series.networkgraph.layoutAlgorithm.theta)\n                 *\n                 * @sample highcharts/series-networkgraph/barnes-hut-approximation/\n                 *         A graph with Barnes-Hut approximation\n                 *\n                 * @type       {string}\n                 * @validvalue [\"barnes-hut\", \"none\"]\n                 * @since      7.1.0\n                 */\n                approximation: 'none',\n                /**\n                 * Type of the algorithm used when positioning nodes.\n                 *\n                 * @type       {string}\n                 * @validvalue [\"reingold-fruchterman\"]\n                 */\n                type: 'reingold-fruchterman',\n                /**\n                 * Integration type. Available options are `'euler'` and `'verlet'`.\n                 * Integration determines how forces are applied on particles. In\n                 * Euler integration, force is applied direct as\n                 * `newPosition += velocity;`.\n                 * In Verlet integration, new position is based on a previous\n                 * posittion without velocity:\n                 * `newPosition += previousPosition - newPosition`.\n                 *\n                 * Note that different integrations give different results as forces\n                 * are different.\n                 *\n                 * In Highcharts v7.0.x only `'euler'` integration was supported.\n                 *\n                 * @sample highcharts/series-networkgraph/integration-comparison/\n                 *         Comparison of Verlet and Euler integrations\n                 *\n                 * @type       {string}\n                 * @validvalue [\"euler\", \"verlet\"]\n                 * @since      7.1.0\n                 */\n                integration: 'euler',\n                /**\n                 * Max number of iterations before algorithm will stop. In general,\n                 * algorithm should find positions sooner, but when rendering huge\n                 * number of nodes, it is recommended to increase this value as\n                 * finding perfect graph positions can require more time.\n                 */\n                maxIterations: 1000,\n                /**\n                 * Gravitational const used in the barycenter force of the\n                 * algorithm.\n                 *\n                 * @sample highcharts/series-networkgraph/forces/\n                 *         Custom forces with Euler integration\n                 */\n                gravitationalConstant: 0.0625,\n                /**\n                 * Friction applied on forces to prevent nodes rushing to fast to\n                 * the desired positions.\n                 */\n                friction: -0.981\n            },\n            showInLegend: false\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires after the simulation is ended and the layout is stable.\n         *\n         * @type      {Highcharts.NetworkgraphAfterSimulationCallbackFunction}\n         * @product   highcharts\n         * @apioption series.networkgraph.events.afterSimulation\n         */\n        /**\n         * A `networkgraph` series. If the [type](#series.networkgraph.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.networkgraph\n         * @excluding boostThreshold, animation, animationLimit, connectEnds,\n         *            connectNulls, cropThreshold, dragDrop, getExtremesFromAll, label,\n         *            linecap, negativeColor, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointStart, softThreshold, stack, stacking,\n         *            step, threshold, xAxis, yAxis, zoneAxis, dataSorting,\n         *            boostBlending\n         * @product   highcharts\n         * @requires  modules/networkgraph\n         * @apioption series.networkgraph\n         */\n        /**\n         * An array of data points for the series. For the `networkgraph` series type,\n         * points can be given in the following way:\n         *\n         * An array of objects with named values. The following snippet shows only a\n         * few settings, see the complete options set below. If the total number of\n         * data points exceeds the series'\n         * [turboThreshold](#series.area.turboThreshold), this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         from: 'Category1',\n         *         to: 'Category2'\n         *     }, {\n         *         from: 'Category1',\n         *         to: 'Category3'\n         *     }]\n         *  ```\n         *\n         * @type      {Array<Object|Array|number>}\n         * @extends   series.line.data\n         * @excluding drilldown,marker,x,y,draDrop\n         * @sample    {highcharts} highcharts/chart/reflow-true/\n         *            Numerical values\n         * @sample    {highcharts} highcharts/series/data-array-of-arrays/\n         *            Arrays of numeric x and y\n         * @sample    {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *            Arrays of datetime x and y\n         * @sample    {highcharts} highcharts/series/data-array-of-name-value/\n         *            Arrays of point.name and y\n         * @sample    {highcharts} highcharts/series/data-array-of-objects/\n         *            Config objects\n         * @product   highcharts\n         * @apioption series.networkgraph.data\n         */\n        /**\n         * @type      {Highcharts.SeriesNetworkgraphDataLabelsOptionsObject|Array<Highcharts.SeriesNetworkgraphDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.networkgraph.data.dataLabels\n         */\n        /**\n         * The node that the link runs from.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.networkgraph.data.from\n         */\n        /**\n         * The node that the link runs to.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.networkgraph.data.to\n         */\n        /**\n         * A collection of options for the individual nodes. The nodes in a\n         * networkgraph diagram are auto-generated instances of `Highcharts.Point`,\n         * but options can be applied here and linked by the `id`.\n         *\n         * @sample highcharts/series-networkgraph/data-options/\n         *         Networkgraph diagram with node options\n         *\n         * @type      {Array<*>}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes\n         */\n        /**\n         * The id of the auto-generated node, refering to the `from` or `to` setting of\n         * the link.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.id\n         */\n        /**\n         * The color of the auto generated node.\n         *\n         * @type      {Highcharts.ColorString}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.color\n         */\n        /**\n         * The color index of the auto generated node, especially for use in styled\n         * mode.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.colorIndex\n         */\n        /**\n         * The name to display for the node in data labels and tooltips. Use this when\n         * the name is different from the `id`. Where the id must be unique for each\n         * node, this is not necessary for the name.\n         *\n         * @sample highcharts/series-networkgraph/data-options/\n         *         Networkgraph diagram with node options\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.name\n         */\n        /**\n         * Mass of the node. By default, each node has mass equal to it's marker radius\n         * . Mass is used to determine how two connected nodes should affect\n         * each other:\n         *\n         * Attractive force is multiplied by the ratio of two connected\n         * nodes; if a big node has weights twice as the small one, then the small one\n         * will move towards the big one twice faster than the big one to the small one\n         * .\n         *\n         * @sample highcharts/series-networkgraph/ragdoll/\n         *         Mass determined by marker.radius\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.mass\n         */\n        /**\n         * Options for the node markers.\n         *\n         * @extends   plotOptions.networkgraph.marker\n         * @apioption series.networkgraph.nodes.marker\n         */\n        /**\n         * Individual data label for each node. The options are the same as\n         * the ones for [series.networkgraph.dataLabels](#series.networkgraph.dataLabels).\n         *\n         * @type      {Highcharts.SeriesNetworkgraphDataLabelsOptionsObject|Array<Highcharts.SeriesNetworkgraphDataLabelsOptionsObject>}\n         *\n         * @apioption series.networkgraph.nodes.dataLabels\n         */\n        ''; // adds doclets above to transpiled file\n\n        return NetworkgraphSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/EulerIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calcualated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         * @param {number} distanceR\n             */\n        function attractive(link, force, distanceXY, distanceR) {\n            var massFactor = link.getMass(), translatedX = (distanceXY.x / distanceR) * force, translatedY = (distanceXY.y / distanceR) * force;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.dispX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.dispY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.dispX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.dispY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force funtion. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return d / k }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            return d * d / k;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         */\n        function barycenter() {\n            var gravitationalConstant = this.options.gravitationalConstant, xFactor = this.barycenter.xFactor, yFactor = this.barycenter.yFactor;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    var degree = node.getDegree(), phi = degree * (1 + degree / 2);\n                    node.dispX += ((xFactor - node.plotX) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                    node.dispY += ((yFactor - node.plotY) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                }\n            });\n        }\n        /**\n         * Estiamte the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.3);\n        }\n        /**\n         * Integration method.\n         *\n         * In Euler integration, force were stored in a node, not changing it's\n         * position. Now, in the integrator method, we apply changes.\n         *\n         * Euler:\n         *\n         * Basic form: `x(n+1) = x(n) + v(n)`\n         *\n         * With Rengoild-Fruchterman we get:\n         * `x(n+1) = x(n) + v(n) / length(v(n)) * min(v(n), temperature(n))`\n         * where:\n         * - `x(n+1)`: next position\n         * - `x(n)`: current position\n         * - `v(n)`: velocity (comes from net force)\n         * - `temperature(n)`: current temperature\n         *\n         * Known issues:\n         * Oscillations when force vector has the same magnitude but opposite\n         * direction in the next step. Potentially solved by decreasing force by\n         * `v * (1 / node.degree)`\n         *\n         * Note:\n         * Actually `min(v(n), temperature(n))` replaces simulated annealing.\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout\n         *        Layout object\n         * @param {Highcharts.Point} node\n         *        Node that should be translated\n         */\n        function integrate(layout, node) {\n            var distanceR;\n            node.dispX +=\n                node.dispX * layout.options.friction;\n            node.dispY +=\n                node.dispY * layout.options.friction;\n            distanceR = node.temperature = layout.vectorLength({\n                x: node.dispX,\n                y: node.dispY\n            });\n            if (distanceR !== 0) {\n                node.plotX += (node.dispX / distanceR *\n                    Math.min(Math.abs(node.dispX), layout.temperature));\n                node.plotY += (node.dispY / distanceR *\n                    Math.min(Math.abs(node.dispY), layout.temperature));\n            }\n        }\n        /**\n         * Repulsive force.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calcualated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY, distanceR) {\n            node.dispX +=\n                (distanceXY.x / distanceR) * force / node.degree;\n            node.dispY +=\n                (distanceXY.y / distanceR) * force / node.degree;\n        }\n        /**\n         * Repulsive force funtion. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`.\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return k / d }`\n         *\n         * standard:\n         *    `function (d, k) { return k * k / d }`\n         *\n         * grid-variant:\n         *    `function (d, k) { return k * k / d * (2 * k - d > 0 ? 1 : 0) }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            return k * k / d;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var EulerIntegration = {\n            attractive: attractive,\n            attractiveForceFunction: attractiveForceFunction,\n            barycenter: barycenter,\n            getK: getK,\n            integrate: integrate,\n            repulsive: repulsive,\n            repulsiveForceFunction: repulsiveForceFunction\n        };\n\n        return EulerIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTreeNode.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree node class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTreeNode\n         *\n         * @param {Highcharts.Dictionary<number>} box\n         *        Available space for the node\n         */\n        var QuadTreeNode = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function QuadTreeNode(box) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * Read only. If QuadTreeNode is an external node, Point is stored in\n                 * `this.body`.\n                 *\n                 * @name Highcharts.QuadTreeNode#body\n                 * @type {boolean|Highcharts.Point}\n                 */\n                this.body = false;\n                /**\n                 * Read only. Internal nodes when created are empty to reserve the\n                 * space. If Point is added to this QuadTreeNode, QuadTreeNode is no\n                 * longer empty.\n                 *\n                 * @name Highcharts.QuadTreeNode#isEmpty\n                 * @type {boolean}\n                 */\n                this.isEmpty = false;\n                /**\n                 * Read only. Flag to determine if QuadTreeNode is internal (and has\n                 * subnodes with mass and central position) or external (bound to\n                 * Point).\n                 *\n                 * @name Highcharts.QuadTreeNode#isInternal\n                 * @type {boolean}\n                 */\n                this.isInternal = false;\n                /**\n                 * Read only. Array of subnodes. Empty if QuadTreeNode has just one\n                 * Point. When added another Point to this QuadTreeNode, array is\n                 * filled with four subnodes.\n                 *\n                 * @name Highcharts.QuadTreeNode#nodes\n                 * @type {Array<Highcharts.QuadTreeNode>}\n                 */\n                this.nodes = [];\n                /**\n                 * Read only. The available space for node.\n                 *\n                 * @name Highcharts.QuadTreeNode#box\n                 * @type {Highcharts.Dictionary<number>}\n                 */\n                this.box = box;\n                /**\n                 * Read only. The minium of width and height values.\n                 *\n                 * @name Highcharts.QuadTreeNode#boxSize\n                 * @type {number}\n                 */\n                this.boxSize = Math.min(box.width, box.height);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * When inserting another node into the box, that already hove one node,\n             * divide the available space into another four quadrants.\n             *\n             * Indexes of quadrants are:\n             * ```\n             * -------------               -------------\n             * |           |               |     |     |\n             * |           |               |  0  |  1  |\n             * |           |   divide()    |     |     |\n             * |     1     | ----------->  -------------\n             * |           |               |     |     |\n             * |           |               |  3  |  2  |\n             * |           |               |     |     |\n             * -------------               -------------\n             * ```\n             */\n            QuadTreeNode.prototype.divideBox = function () {\n                var halfWidth = this.box.width / 2, halfHeight = this.box.height / 2;\n                // Top left\n                this.nodes[0] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Top right\n                this.nodes[1] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom right\n                this.nodes[2] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom left\n                this.nodes[3] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n            };\n            /**\n             * Determine which of the quadrants should be used when placing node in\n             * the QuadTree. Returned index is always in range `< 0 , 3 >`.\n             * @private\n             */\n            QuadTreeNode.prototype.getBoxPosition = function (point) {\n                var left = point.plotX < this.box.left + this.box.width / 2, top = point.plotY < this.box.top + this.box.height / 2;\n                var index;\n                if (left) {\n                    if (top) {\n                        // Top left\n                        index = 0;\n                    }\n                    else {\n                        // Bottom left\n                        index = 3;\n                    }\n                }\n                else {\n                    if (top) {\n                        // Top right\n                        index = 1;\n                    }\n                    else {\n                        // Bottom right\n                        index = 2;\n                    }\n                }\n                return index;\n            };\n            /**\n             * Insert recursively point(node) into the QuadTree. If the given\n             * quadrant is already occupied, divide it into smaller quadrants.\n             *\n             * @param {Highcharts.Point} point\n             *        Point/node to be inserted\n             * @param {number} depth\n             *        Max depth of the QuadTree\n             */\n            QuadTreeNode.prototype.insert = function (point, depth) {\n                var newQuadTreeNode;\n                if (this.isInternal) {\n                    // Internal node:\n                    this.nodes[this.getBoxPosition(point)].insert(point, depth - 1);\n                }\n                else {\n                    this.isEmpty = false;\n                    if (!this.body) {\n                        // First body in a quadrant:\n                        this.isInternal = false;\n                        this.body = point;\n                    }\n                    else {\n                        if (depth) {\n                            // Every other body in a quadrant:\n                            this.isInternal = true;\n                            this.divideBox();\n                            // Reinsert main body only once:\n                            if (this.body !== true) {\n                                this.nodes[this.getBoxPosition(this.body)]\n                                    .insert(this.body, depth - 1);\n                                this.body = true;\n                            }\n                            // Add second body:\n                            this.nodes[this.getBoxPosition(point)]\n                                .insert(point, depth - 1);\n                        }\n                        else {\n                            // We are below max allowed depth. That means either:\n                            // - really huge number of points\n                            // - falling two points into exactly the same position\n                            // In this case, create another node in the QuadTree.\n                            //\n                            // Alternatively we could add some noise to the\n                            // position, but that could result in different\n                            // rendered chart in exporting.\n                            newQuadTreeNode = new QuadTreeNode({\n                                top: point.plotX || NaN,\n                                left: point.plotY || NaN,\n                                // Width/height below 1px\n                                width: 0.1,\n                                height: 0.1\n                            });\n                            newQuadTreeNode.body = point;\n                            newQuadTreeNode.isInternal = false;\n                            this.nodes.push(newQuadTreeNode);\n                        }\n                    }\n                }\n            };\n            /**\n             * Each quad node requires it's mass and center position. That mass and\n             * position is used to imitate real node in the layout by approximation.\n             */\n            QuadTreeNode.prototype.updateMassAndCenter = function () {\n                var mass = 0, plotX = 0, plotY = 0;\n                if (this.isInternal) {\n                    // Calcualte weightened mass of the quad node:\n                    for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n                        var pointMass = _a[_i];\n                        if (!pointMass.isEmpty) {\n                            mass += pointMass.mass;\n                            plotX += pointMass.plotX * pointMass.mass;\n                            plotY += pointMass.plotY * pointMass.mass;\n                        }\n                    }\n                    plotX /= mass;\n                    plotY /= mass;\n                }\n                else if (this.body) {\n                    // Just one node, use coordinates directly:\n                    mass = this.body.mass;\n                    plotX = this.body.plotX;\n                    plotY = this.body.plotY;\n                }\n                // Store details:\n                this.mass = mass;\n                this.plotX = plotX;\n                this.plotY = plotY;\n            };\n            return QuadTreeNode;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTreeNode;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTree.js', [_modules['Series/Networkgraph/QuadTreeNode.js']], function (QuadTreeNode) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTree\n         *\n         * @param {number} x\n         *        Left position of the plotting area\n         * @param {number} y\n         *        Top position of the plotting area\n         * @param {number} width\n         *        Width of the plotting area\n         * @param {number} height\n         *        Height of the plotting area\n         */\n        var QuadTree = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function QuadTree(x, y, width, height) {\n                // Boundary rectangle:\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: width,\n                    height: height\n                };\n                this.maxDepth = 25;\n                this.root = new QuadTreeNode(this.box);\n                this.root.isInternal = true;\n                this.root.isRoot = true;\n                this.root.divideBox();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Calculate mass of the each QuadNode in the tree.\n             */\n            QuadTree.prototype.calculateMassAndCenter = function () {\n                this.visitNodeRecursive(null, null, function (node) {\n                    node.updateMassAndCenter();\n                });\n            };\n            /**\n             * Insert nodes into the QuadTree\n             *\n             * @param {Array<Highcharts.Point>} points\n             *        Points as nodes\n             */\n            QuadTree.prototype.insertNodes = function (points) {\n                for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                    var point = points_1[_i];\n                    this.root.insert(point, this.maxDepth);\n                }\n            };\n            /**\n             * Depfth first treversal (DFS). Using `before` and `after` callbacks,\n             * we can get two results: preorder and postorder traversals, reminder:\n             *\n             * ```\n             *     (a)\n             *     / \\\n             *   (b) (c)\n             *   / \\\n             * (d) (e)\n             * ```\n             *\n             * DFS (preorder): `a -> b -> d -> e -> c`\n             *\n             * DFS (postorder): `d -> e -> b -> c -> a`\n             *\n             * @param {Highcharts.QuadTreeNode|null} node\n             *        QuadTree node\n             * @param {Function} [beforeCallback]\n             *        Function to be called before visiting children nodes.\n             * @param {Function} [afterCallback]\n             *        Function to be called after visiting children nodes.\n             */\n            QuadTree.prototype.visitNodeRecursive = function (node, beforeCallback, afterCallback) {\n                var goFurther;\n                if (!node) {\n                    node = this.root;\n                }\n                if (node === this.root && beforeCallback) {\n                    goFurther = beforeCallback(node);\n                }\n                if (goFurther === false) {\n                    return;\n                }\n                for (var _i = 0, _a = node.nodes; _i < _a.length; _i++) {\n                    var qtNode = _a[_i];\n                    if (qtNode.isInternal) {\n                        if (beforeCallback) {\n                            goFurther = beforeCallback(qtNode);\n                        }\n                        if (goFurther === false) {\n                            continue;\n                        }\n                        this.visitNodeRecursive(qtNode, beforeCallback, afterCallback);\n                    }\n                    else if (qtNode.body) {\n                        if (beforeCallback) {\n                            beforeCallback(qtNode.body);\n                        }\n                    }\n                    if (afterCallback) {\n                        afterCallback(qtNode);\n                    }\n                }\n                if (node === this.root && afterCallback) {\n                    afterCallback(node);\n                }\n            };\n            return QuadTree;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTree;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/VerletIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Verlet integration, force is applied on a node immidatelly to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calcualated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distance\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function attractive(link, force, distanceXY) {\n            var massFactor = link.getMass(), translatedX = -distanceXY.x * force * this.diffTemperature, translatedY = -distanceXY.y * force * this.diffTemperature;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.plotX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.plotY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.plotX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.plotY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force funtion. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Verlet integration, force is applied on a node immidatelly to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         */\n        function barycenter() {\n            var gravitationalConstant = this.options.gravitationalConstant, xFactor = this.barycenter.xFactor, yFactor = this.barycenter.yFactor;\n            // To consider:\n            xFactor = (xFactor - (this.box.left + this.box.width) / 2) *\n                gravitationalConstant;\n            yFactor = (yFactor - (this.box.top + this.box.height) / 2) *\n                gravitationalConstant;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    node.plotX -=\n                        xFactor / node.mass / node.degree;\n                    node.plotY -=\n                        yFactor / node.mass / node.degree;\n                }\n            });\n        }\n        /**\n         * Estiamte the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.5);\n        }\n        /**\n         * Integration method.\n         *\n         * In Verlet integration, forces are applied on node immidatelly to it's\n         * `plotX` and `plotY` position.\n         *\n         * Verlet without velocity:\n         *\n         *    x(n+1) = 2 * x(n) - x(n-1) + A(T) * deltaT ^ 2\n         *\n         * where:\n         *     - x(n+1) - new position\n         *     - x(n) - current position\n         *     - x(n-1) - previous position\n         *\n         * Assuming A(t) = 0 (no acceleration) and (deltaT = 1) we get:\n         *\n         *     x(n+1) = x(n) + (x(n) - x(n-1))\n         *\n         * where:\n         *     - (x(n) - x(n-1)) - position change\n         *\n         * TO DO:\n         * Consider Verlet with velocity to support additional\n         * forces. Or even Time-Corrected Verlet by Jonathan\n         * \"lonesock\" Dummer\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout layout object\n         * @param {Highcharts.Point} node node that should be translated\n         */\n        function integrate(layout, node) {\n            var friction = -layout.options.friction, maxSpeed = layout.options.maxSpeed, prevX = node.prevX, prevY = node.prevY, \n            // Apply friciton:\n            diffX = ((node.plotX + node.dispX -\n                prevX) * friction), diffY = ((node.plotY + node.dispY -\n                prevY) * friction), abs = Math.abs, signX = abs(diffX) / (diffX || 1), // need to deal with 0\n            signY = abs(diffY) / (diffY || 1);\n            // Apply max speed:\n            diffX = signX * Math.min(maxSpeed, Math.abs(diffX));\n            diffY = signY * Math.min(maxSpeed, Math.abs(diffY));\n            // Store for the next iteration:\n            node.prevX = node.plotX + node.dispX;\n            node.prevY = node.plotY + node.dispY;\n            // Update positions:\n            node.plotX += diffX;\n            node.plotY += diffY;\n            node.temperature = layout.vectorLength({\n                x: diffX,\n                y: diffY\n            });\n        }\n        /**\n         * Repulsive force.\n         *\n         * In Verlet integration, force is applied on a node immidatelly to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calcualated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distance\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY) {\n            var factor = force * this.diffTemperature / node.mass / node.degree;\n            if (!node.fixedPosition) {\n                node.plotX += distanceXY.x * factor;\n                node.plotY += distanceXY.y * factor;\n            }\n        }\n        /**\n         * Repulsive force funtion. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d * (k > d ? 1 : 0); // Force only for close nodes\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var VerletIntegration = {\n            attractive: attractive,\n            attractiveForceFunction: attractiveForceFunction,\n            barycenter: barycenter,\n            getK: getK,\n            integrate: integrate,\n            repulsive: repulsive,\n            repulsiveForceFunction: repulsiveForceFunction\n        };\n\n        return VerletIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/ReingoldFruchtermanLayout.js', [_modules['Series/Networkgraph/EulerIntegration.js'], _modules['Core/Globals.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Series/Networkgraph/QuadTree.js'], _modules['Core/Utilities.js'], _modules['Series/Networkgraph/VerletIntegration.js']], function (EulerIntegration, H, GraphLayout, QuadTree, U, VerletIntegration) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var win = H.win;\n        var clamp = U.clamp, defined = U.defined, isFunction = U.isFunction, fireEvent = U.fireEvent, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Reingold-Fruchterman algorithm from\n         * \"Graph Drawing by Force-directed Placement\" paper.\n         * @private\n         */\n        var ReingoldFruchtermanLayout = /** @class */ (function () {\n            function ReingoldFruchtermanLayout() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                this.box = {};\n                this.currentStep = 0;\n                this.initialRendering = true;\n                this.links = [];\n                this.nodes = [];\n                this.series = [];\n                this.simulation = false;\n            }\n            ReingoldFruchtermanLayout.compose = function (ChartClass) {\n                GraphLayout.compose(ChartClass);\n                GraphLayout.integrations.euler = EulerIntegration;\n                GraphLayout.integrations.verlet = VerletIntegration;\n                GraphLayout.layouts['reingold-fruchterman'] =\n                    ReingoldFruchtermanLayout;\n            };\n            ReingoldFruchtermanLayout.prototype.init = function (options) {\n                this.options = options;\n                this.nodes = [];\n                this.links = [];\n                this.series = [];\n                this.box = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n                this.setInitialRendering(true);\n                this.integration =\n                    GraphLayout.integrations[options.integration];\n                this.enableSimulation = options.enableSimulation;\n                this.attractiveForce = pick(options.attractiveForce, this.integration.attractiveForceFunction);\n                this.repulsiveForce = pick(options.repulsiveForce, this.integration.repulsiveForceFunction);\n                this.approximation = options.approximation;\n            };\n            ReingoldFruchtermanLayout.prototype.updateSimulation = function (enable) {\n                this.enableSimulation = pick(enable, this.options.enableSimulation);\n            };\n            ReingoldFruchtermanLayout.prototype.start = function () {\n                var layout = this, series = this.series, options = this.options;\n                layout.currentStep = 0;\n                layout.forces = series[0] && series[0].forces || [];\n                layout.chart = series[0] && series[0].chart;\n                if (layout.initialRendering) {\n                    layout.initPositions();\n                    // Render elements in initial positions:\n                    series.forEach(function (s) {\n                        s.finishedAnimating = true; // #13169\n                        s.render();\n                    });\n                }\n                layout.setK();\n                layout.resetSimulation(options);\n                if (layout.enableSimulation) {\n                    layout.step();\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.step = function () {\n                var _this = this;\n                var anyLayout = this, allSeries = this.series;\n                // Algorithm:\n                this.currentStep++;\n                if (this.approximation === 'barnes-hut') {\n                    this.createQuadTree();\n                    this.quadTree.calculateMassAndCenter();\n                }\n                for (var _i = 0, _a = this.forces || []; _i < _a.length; _i++) {\n                    var forceName = _a[_i];\n                    anyLayout[forceName + 'Forces'](this.temperature);\n                }\n                // Limit to the plotting area and cool down:\n                this.applyLimits();\n                // Cool down the system:\n                this.temperature = this.coolDown(this.startTemperature, this.diffTemperature, this.currentStep);\n                this.prevSystemTemperature = this.systemTemperature;\n                this.systemTemperature = this.getSystemTemperature();\n                if (this.enableSimulation) {\n                    for (var _b = 0, allSeries_1 = allSeries; _b < allSeries_1.length; _b++) {\n                        var series = allSeries_1[_b];\n                        // Chart could be destroyed during the simulation\n                        if (series.chart) {\n                            series.render();\n                        }\n                    }\n                    if (this.maxIterations-- &&\n                        isFinite(this.temperature) &&\n                        !this.isStable()) {\n                        if (this.simulation) {\n                            win.cancelAnimationFrame(this.simulation);\n                        }\n                        this.simulation = win.requestAnimationFrame(function () { return _this.step(); });\n                    }\n                    else {\n                        this.simulation = false;\n                        this.series.forEach(function (s) {\n                            fireEvent(s, 'afterSimulation');\n                        });\n                    }\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.stop = function () {\n                if (this.simulation) {\n                    win.cancelAnimationFrame(this.simulation);\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.setArea = function (x, y, w, h) {\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: w,\n                    height: h\n                };\n            };\n            ReingoldFruchtermanLayout.prototype.setK = function () {\n                // Optimal distance between nodes,\n                // available space around the node:\n                this.k = this.options.linkLength || this.integration.getK(this);\n            };\n            ReingoldFruchtermanLayout.prototype.addElementsToCollection = function (elements, collection) {\n                for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n                    var element = elements_1[_i];\n                    if (collection.indexOf(element) === -1) {\n                        collection.push(element);\n                    }\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.removeElementFromCollection = function (element, collection) {\n                var index = collection.indexOf(element);\n                if (index !== -1) {\n                    collection.splice(index, 1);\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.clear = function () {\n                this.nodes.length = 0;\n                this.links.length = 0;\n                this.series.length = 0;\n                this.resetSimulation();\n            };\n            ReingoldFruchtermanLayout.prototype.resetSimulation = function () {\n                this.forcedStop = false;\n                this.systemTemperature = 0;\n                this.setMaxIterations();\n                this.setTemperature();\n                this.setDiffTemperature();\n            };\n            ReingoldFruchtermanLayout.prototype.restartSimulation = function () {\n                if (!this.simulation) {\n                    // When dragging nodes, we don't need to calculate\n                    // initial positions and rendering nodes:\n                    this.setInitialRendering(false);\n                    // Start new simulation:\n                    if (!this.enableSimulation) {\n                        // Run only one iteration to speed things up:\n                        this.setMaxIterations(1);\n                    }\n                    else {\n                        this.start();\n                    }\n                    if (this.chart) {\n                        this.chart.redraw();\n                    }\n                    // Restore defaults:\n                    this.setInitialRendering(true);\n                }\n                else {\n                    // Extend current simulation:\n                    this.resetSimulation();\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.setMaxIterations = function (maxIterations) {\n                this.maxIterations = pick(maxIterations, this.options.maxIterations);\n            };\n            ReingoldFruchtermanLayout.prototype.setTemperature = function () {\n                this.temperature = this.startTemperature =\n                    Math.sqrt(this.nodes.length);\n            };\n            ReingoldFruchtermanLayout.prototype.setDiffTemperature = function () {\n                this.diffTemperature = this.startTemperature /\n                    (this.options.maxIterations + 1);\n            };\n            ReingoldFruchtermanLayout.prototype.setInitialRendering = function (enable) {\n                this.initialRendering = enable;\n            };\n            ReingoldFruchtermanLayout.prototype.createQuadTree = function () {\n                this.quadTree = new QuadTree(this.box.left, this.box.top, this.box.width, this.box.height);\n                this.quadTree.insertNodes(this.nodes);\n            };\n            ReingoldFruchtermanLayout.prototype.initPositions = function () {\n                var initialPositions = this.options.initialPositions;\n                if (isFunction(initialPositions)) {\n                    initialPositions.call(this);\n                    for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n                        var node = _a[_i];\n                        if (!defined(node.prevX)) {\n                            node.prevX = node.plotX;\n                        }\n                        if (!defined(node.prevY)) {\n                            node.prevY = node.plotY;\n                        }\n                        node.dispX = 0;\n                        node.dispY = 0;\n                    }\n                }\n                else if (initialPositions === 'circle') {\n                    this.setCircularPositions();\n                }\n                else {\n                    this.setRandomPositions();\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.setCircularPositions = function () {\n                var box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, angle = 2 * Math.PI / nodesLength, rootNodes = nodes.filter(function (node) {\n                    return node.linksTo.length === 0;\n                }), visitedNodes = {}, radius = this.options.initialPositionRadius, addToNodes = function (node) {\n                    for (var _i = 0, _a = node.linksFrom || []; _i < _a.length; _i++) {\n                        var link = _a[_i];\n                        if (!visitedNodes[link.toNode.id]) {\n                            visitedNodes[link.toNode.id] = true;\n                            sortedNodes.push(link.toNode);\n                            addToNodes(link.toNode);\n                        }\n                    }\n                };\n                var sortedNodes = [];\n                // Start with identified root nodes an sort the nodes by their\n                // hierarchy. In trees, this ensures that branches don't cross\n                // eachother.\n                for (var _i = 0, rootNodes_1 = rootNodes; _i < rootNodes_1.length; _i++) {\n                    var rootNode = rootNodes_1[_i];\n                    sortedNodes.push(rootNode);\n                    addToNodes(rootNode);\n                }\n                // Cyclic tree, no root node found\n                if (!sortedNodes.length) {\n                    sortedNodes = nodes;\n                    // Dangling, cyclic trees\n                }\n                else {\n                    for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {\n                        var node_1 = nodes_1[_a];\n                        if (sortedNodes.indexOf(node_1) === -1) {\n                            sortedNodes.push(node_1);\n                        }\n                    }\n                }\n                var node;\n                // Initial positions are laid out along a small circle, appearing\n                // as a cluster in the middle\n                for (var i = 0, iEnd = sortedNodes.length; i < iEnd; ++i) {\n                    node = sortedNodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width / 2 + radius * Math.cos(i * angle));\n                    node.plotY = node.prevY = pick(node.plotY, box.height / 2 + radius * Math.sin(i * angle));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.setRandomPositions = function () {\n                var box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, \n                /**\n                 * Return a repeatable, quasi-random number based on an integer\n                 * input. For the initial positions\n                 * @private\n                 */\n                unrandom = function (n) {\n                    var rand = n * n / Math.PI;\n                    rand = rand - Math.floor(rand);\n                    return rand;\n                };\n                var node;\n                // Initial positions:\n                for (var i = 0, iEnd = nodes.length; i < iEnd; ++i) {\n                    node = nodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width * unrandom(i));\n                    node.plotY = node.prevY = pick(node.plotY, box.height * unrandom(nodesLength + i));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.force = function (name) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                this.integration[name].apply(this, args);\n            };\n            ReingoldFruchtermanLayout.prototype.barycenterForces = function () {\n                this.getBarycenter();\n                this.force('barycenter');\n            };\n            ReingoldFruchtermanLayout.prototype.getBarycenter = function () {\n                var systemMass = 0, cx = 0, cy = 0;\n                for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n                    var node = _a[_i];\n                    cx += node.plotX * node.mass;\n                    cy += node.plotY * node.mass;\n                    systemMass += node.mass;\n                }\n                this.barycenter = {\n                    x: cx,\n                    y: cy,\n                    xFactor: cx / systemMass,\n                    yFactor: cy / systemMass\n                };\n                return this.barycenter;\n            };\n            ReingoldFruchtermanLayout.prototype.barnesHutApproximation = function (node, quadNode) {\n                var distanceXY = this.getDistXY(node, quadNode), distanceR = this.vectorLength(distanceXY);\n                var goDeeper, force;\n                if (node !== quadNode && distanceR !== 0) {\n                    if (quadNode.isInternal) {\n                        // Internal node:\n                        if (quadNode.boxSize / distanceR <\n                            this.options.theta &&\n                            distanceR !== 0) {\n                            // Treat as an external node:\n                            force = this.repulsiveForce(distanceR, this.k);\n                            this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                            goDeeper = false;\n                        }\n                        else {\n                            // Go deeper:\n                            goDeeper = true;\n                        }\n                    }\n                    else {\n                        // External node, direct force:\n                        force = this.repulsiveForce(distanceR, this.k);\n                        this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                    }\n                }\n                return goDeeper;\n            };\n            ReingoldFruchtermanLayout.prototype.repulsiveForces = function () {\n                var _this = this;\n                if (this.approximation === 'barnes-hut') {\n                    var _loop_1 = function (node) {\n                        this_1.quadTree.visitNodeRecursive(null, function (quadNode) { return (_this.barnesHutApproximation(node, quadNode)); });\n                    };\n                    var this_1 = this;\n                    for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n                        var node = _a[_i];\n                        _loop_1(node);\n                    }\n                }\n                else {\n                    var force = void 0, distanceR = void 0, distanceXY = void 0;\n                    for (var _b = 0, _c = this.nodes; _b < _c.length; _b++) {\n                        var node = _c[_b];\n                        for (var _d = 0, _e = this.nodes; _d < _e.length; _d++) {\n                            var repNode = _e[_d];\n                            if (\n                            // Node cannot repulse itself:\n                            node !== repNode &&\n                                // Only close nodes affect each other:\n                                // layout.getDistR(node, repNode) < 2 * k &&\n                                // Not dragged:\n                                !node.fixedPosition) {\n                                distanceXY = this.getDistXY(node, repNode);\n                                distanceR = this.vectorLength(distanceXY);\n                                if (distanceR !== 0) {\n                                    force = this.repulsiveForce(distanceR, this.k);\n                                    this.force('repulsive', node, force * repNode.mass, distanceXY, distanceR);\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.attractiveForces = function () {\n                var distanceXY, distanceR, force;\n                for (var _i = 0, _a = this.links; _i < _a.length; _i++) {\n                    var link = _a[_i];\n                    if (link.fromNode && link.toNode) {\n                        distanceXY = this.getDistXY(link.fromNode, link.toNode);\n                        distanceR = this.vectorLength(distanceXY);\n                        if (distanceR !== 0) {\n                            force = this.attractiveForce(distanceR, this.k);\n                            this.force('attractive', link, force, distanceXY, distanceR);\n                        }\n                    }\n                }\n            };\n            ReingoldFruchtermanLayout.prototype.applyLimits = function () {\n                var nodes = this.nodes;\n                for (var _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {\n                    var node = nodes_2[_i];\n                    if (node.fixedPosition) {\n                        return;\n                    }\n                    this.integration.integrate(this, node);\n                    this.applyLimitBox(node, this.box);\n                    // Reset displacement:\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            };\n            /**\n             * External box that nodes should fall. When hitting an edge, node\n             * should stop or bounce.\n             * @private\n             */\n            ReingoldFruchtermanLayout.prototype.applyLimitBox = function (node, box) {\n                var radius = node.radius;\n                /*\n                TO DO: Consider elastic collision instead of stopping.\n                o' means end position when hitting plotting area edge:\n\n                - \"inelastic\":\n                o\n                    \\\n                ______\n                |  o'\n                |   \\\n                |    \\\n\n                - \"elastic\"/\"bounced\":\n                o\n                    \\\n                ______\n                |  ^\n                | / \\\n                |o'  \\\n\n                Euler sample:\n                if (plotX < 0) {\n                    plotX = 0;\n                    dispX *= -1;\n                }\n\n                if (plotX > box.width) {\n                    plotX = box.width;\n                    dispX *= -1;\n                }\n\n                */\n                // Limit X-coordinates:\n                node.plotX = clamp(node.plotX, box.left + radius, box.width - radius);\n                // Limit Y-coordinates:\n                node.plotY = clamp(node.plotY, box.top + radius, box.height - radius);\n            };\n            /**\n             * From \"A comparison of simulated annealing cooling strategies\" by\n             * Nourani and Andresen work.\n             * @private\n             */\n            ReingoldFruchtermanLayout.prototype.coolDown = function (temperature, temperatureStep, currentStep) {\n                // Logarithmic:\n                /*\n                return Math.sqrt(this.nodes.length) -\n                    Math.log(\n                        currentStep * layout.diffTemperature\n                    );\n                */\n                // Exponential:\n                /*\n                let alpha = 0.1;\n                layout.temperature = Math.sqrt(layout.nodes.length) *\n                    Math.pow(alpha, layout.diffTemperature);\n                */\n                // Linear:\n                return temperature - temperatureStep * currentStep;\n            };\n            ReingoldFruchtermanLayout.prototype.isStable = function () {\n                return Math.abs(this.systemTemperature -\n                    this.prevSystemTemperature) < 0.00001 || this.temperature <= 0;\n            };\n            ReingoldFruchtermanLayout.prototype.getSystemTemperature = function () {\n                var value = 0;\n                for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n                    var node = _a[_i];\n                    value += node.temperature;\n                }\n                return value;\n            };\n            ReingoldFruchtermanLayout.prototype.vectorLength = function (vector) {\n                return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n            };\n            ReingoldFruchtermanLayout.prototype.getDistR = function (nodeA, nodeB) {\n                var distance = this.getDistXY(nodeA, nodeB);\n                return this.vectorLength(distance);\n            };\n            ReingoldFruchtermanLayout.prototype.getDistXY = function (nodeA, nodeB) {\n                var xDist = nodeA.plotX - nodeB.plotX, yDist = nodeA.plotY - nodeB.plotY;\n                return {\n                    x: xDist,\n                    y: yDist,\n                    absX: Math.abs(xDist),\n                    absY: Math.abs(yDist)\n                };\n            };\n            return ReingoldFruchtermanLayout;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ReingoldFruchtermanLayout;\n    });\n    _registerModule(_modules, 'Series/SimulationSeriesUtilities.js', [_modules['Core/Utilities.js'], _modules['Core/Animation/AnimationUtilities.js']], function (U, A) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var merge = U.merge, syncTimeout = U.syncTimeout;\n        var animObject = A.animObject;\n        /**\n         * Create a setTimeout for the first drawDataLabels()\n         * based on the dataLabels.animation.defer value\n         * for series which have enabled simulation.\n         * @private\n         */\n        function initDataLabelsDefer() {\n            var _this = this;\n            var _a;\n            var dlOptions = this.options.dataLabels;\n            // Method drawDataLabels() fires for the first time after\n            // dataLabels.animation.defer time unless\n            // the dataLabels.animation = false or dataLabels.defer = false\n            // or if the simulation is disabled\n            if (!(dlOptions === null || dlOptions === void 0 ? void 0 : dlOptions.defer) ||\n                !((_a = this.options.layoutAlgorithm) === null || _a === void 0 ? void 0 : _a.enableSimulation)) {\n                this.deferDataLabels = false;\n            }\n            else {\n                syncTimeout(function () {\n                    _this.deferDataLabels = false;\n                }, dlOptions ? animObject(dlOptions.animation).defer : 0);\n            }\n        }\n        /**\n         * Initialize the SVG group for the DataLabels with correct opacities\n         * and correct styles so that the animation for the series that have\n         * simulation enabled works fine.\n         * @private\n         */\n        function initDataLabels() {\n            var series = this, dlOptions = series.options.dataLabels;\n            if (!series.dataLabelsGroup) {\n                var dataLabelsGroup = this.initDataLabelsGroup();\n                // Apply the dataLabels.style not only to the\n                // individual dataLabels but also to the entire group\n                if (!series.chart.styledMode && (dlOptions === null || dlOptions === void 0 ? void 0 : dlOptions.style)) {\n                    dataLabelsGroup.css(dlOptions.style);\n                }\n                // Initialize the opacity of the group to 0 (start of animation)\n                dataLabelsGroup.attr({ opacity: 0 });\n                if (series.visible) { // #2597, #3023, #3024\n                    dataLabelsGroup.show();\n                }\n                return dataLabelsGroup;\n            }\n            // Place it on first and subsequent (redraw) calls\n            series.dataLabelsGroup.attr(merge({ opacity: 1 }, this.getPlotBox('data-labels')));\n            return series.dataLabelsGroup;\n        }\n        var DataLabelsDeferUtils = {\n            initDataLabels: initDataLabels,\n            initDataLabelsDefer: initDataLabelsDefer\n        };\n\n        return DataLabelsDeferUtils;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/NetworkgraphSeries.js', [_modules['Series/DragNodesComposition.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Core/Globals.js'], _modules['Series/Networkgraph/NetworkgraphPoint.js'], _modules['Series/Networkgraph/NetworkgraphSeriesDefaults.js'], _modules['Series/NodesComposition.js'], _modules['Series/Networkgraph/ReingoldFruchtermanLayout.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/SimulationSeriesUtilities.js'], _modules['Core/Utilities.js']], function (DragNodesComposition, GraphLayout, H, NetworkgraphPoint, NetworkgraphSeriesDefaults, NodesComposition, ReingoldFruchtermanLayout, SeriesRegistry, D, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var noop = H.noop;\n        var Series = SeriesRegistry.series, _a = SeriesRegistry.seriesTypes, columnProto = _a.column.prototype, lineProto = _a.line.prototype;\n        var initDataLabels = D.initDataLabels, initDataLabelsDefer = D.initDataLabelsDefer;\n        var addEvent = U.addEvent, defined = U.defined, extend = U.extend, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.networkgraph\n         *\n         * @extends Highcharts.Series\n         */\n        var NetworkgraphSeries = /** @class */ (function (_super) {\n            __extends(NetworkgraphSeries, _super);\n            function NetworkgraphSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.deferDataLabels = true;\n                return _this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            NetworkgraphSeries.compose = function (ChartClass) {\n                DragNodesComposition.compose(ChartClass);\n                ReingoldFruchtermanLayout.compose(ChartClass);\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Defer the layout.\n             * Each series first registers all nodes and links, then layout\n             * calculates all nodes positions and calls `series.render()` in every\n             * simulation step.\n             *\n             * Note:\n             * Animation is done through `requestAnimationFrame` directly, without\n             * `Highcharts.animate()` use.\n             * @private\n             */\n            NetworkgraphSeries.prototype.deferLayout = function () {\n                var layoutOptions = this.options.layoutAlgorithm, graphLayoutsStorage = this.chart.graphLayoutsStorage, graphLayoutsLookup = this.chart.graphLayoutsLookup, chartOptions = this.chart.options.chart, layout;\n                if (!this.visible) {\n                    return;\n                }\n                if (!graphLayoutsStorage) {\n                    this.chart.graphLayoutsStorage = graphLayoutsStorage = {};\n                    this.chart.graphLayoutsLookup = graphLayoutsLookup = [];\n                }\n                layout = graphLayoutsStorage[layoutOptions.type];\n                if (!layout) {\n                    layoutOptions.enableSimulation =\n                        !defined(chartOptions.forExport) ?\n                            layoutOptions.enableSimulation :\n                            !chartOptions.forExport;\n                    graphLayoutsStorage[layoutOptions.type] = layout =\n                        new GraphLayout.layouts[layoutOptions.type]();\n                    layout.init(layoutOptions);\n                    graphLayoutsLookup.splice(layout.index, 0, layout);\n                }\n                this.layout = layout;\n                layout.setArea(0, 0, this.chart.plotWidth, this.chart.plotHeight);\n                layout.addElementsToCollection([this], layout.series);\n                layout.addElementsToCollection(this.nodes, layout.nodes);\n                layout.addElementsToCollection(this.points, layout.links);\n            };\n            /**\n             * @private\n             */\n            NetworkgraphSeries.prototype.destroy = function () {\n                if (this.layout) {\n                    this.layout.removeElementFromCollection(this, this.layout.series);\n                }\n                NodesComposition.destroy.call(this);\n            };\n            /**\n             * Networkgraph has two separate collecions of nodes and lines, render\n             * dataLabels for both sets:\n             * @private\n             */\n            NetworkgraphSeries.prototype.drawDataLabels = function () {\n                // We defer drawing the dataLabels\n                // until dataLabels.animation.defer time passes\n                if (this.deferDataLabels) {\n                    return;\n                }\n                var dlOptions = this.options.dataLabels;\n                var textPath;\n                if (dlOptions === null || dlOptions === void 0 ? void 0 : dlOptions.textPath) {\n                    textPath = dlOptions.textPath;\n                }\n                // Render node labels:\n                Series.prototype.drawDataLabels.call(this, this.nodes);\n                // Render link labels:\n                if (dlOptions === null || dlOptions === void 0 ? void 0 : dlOptions.linkTextPath) {\n                    // If linkTextPath is set, render link labels with linkTextPath\n                    dlOptions.textPath = dlOptions.linkTextPath;\n                }\n                Series.prototype.drawDataLabels.call(this, this.data);\n                // Go back to textPath for nodes\n                if (dlOptions === null || dlOptions === void 0 ? void 0 : dlOptions.textPath) {\n                    dlOptions.textPath = textPath;\n                }\n            };\n            /**\n             * Extend generatePoints by adding the nodes, which are Point objects\n             * but pushed to the this.nodes array.\n             * @private\n             */\n            NetworkgraphSeries.prototype.generatePoints = function () {\n                var node, i;\n                NodesComposition.generatePoints.apply(this, arguments);\n                // In networkgraph, it's fine to define stanalone nodes, create\n                // them:\n                if (this.options.nodes) {\n                    this.options.nodes.forEach(function (nodeOptions) {\n                        if (!this.nodeLookup[nodeOptions.id]) {\n                            this.nodeLookup[nodeOptions.id] =\n                                this.createNode(nodeOptions.id);\n                        }\n                    }, this);\n                }\n                for (i = this.nodes.length - 1; i >= 0; i--) {\n                    node = this.nodes[i];\n                    node.degree = node.getDegree();\n                    node.radius = pick(node.marker && node.marker.radius, this.options.marker && this.options.marker.radius, 0);\n                    // If node exists, but it's not available in nodeLookup,\n                    // then it's leftover from previous runs (e.g. setData)\n                    if (!this.nodeLookup[node.id]) {\n                        node.remove();\n                    }\n                }\n                this.data.forEach(function (link) {\n                    link.formatPrefix = 'link';\n                });\n                this.indexateNodes();\n            };\n            /**\n             * In networkgraph, series.points refers to links,\n             * but series.nodes refers to actual points.\n             * @private\n             */\n            NetworkgraphSeries.prototype.getPointsCollection = function () {\n                return this.nodes || [];\n            };\n            /**\n             * Set index for each node. Required for proper `node.update()`.\n             * Note that links are indexated out of the box in `generatePoints()`.\n             *\n             * @private\n             */\n            NetworkgraphSeries.prototype.indexateNodes = function () {\n                this.nodes.forEach(function (node, index) {\n                    node.index = index;\n                });\n            };\n            /**\n             * Extend init with base event, which should stop simulation during\n             * update. After data is updated, `chart.render` resumes the simulation.\n             * @private\n             */\n            NetworkgraphSeries.prototype.init = function (chart, options) {\n                var _this = this;\n                _super.prototype.init.call(this, chart, options);\n                initDataLabelsDefer.call(this);\n                addEvent(this, 'updatedData', function () {\n                    if (_this.layout) {\n                        _this.layout.stop();\n                    }\n                });\n                addEvent(this, 'afterUpdate', function () {\n                    _this.nodes.forEach(function (node) {\n                        if (node && node.series) {\n                            node.resolveColor();\n                        }\n                    });\n                });\n                // If the dataLabels.animation.defer time is longer than\n                // the time it takes for the layout to become stable then\n                // drawDataLabels would never be called (that's why we force it here)\n                addEvent(this, 'afterSimulation', function () {\n                    this.deferDataLabels = false;\n                    this.drawDataLabels();\n                });\n                return this;\n            };\n            /**\n             * Extend the default marker attribs by using a non-rounded X position,\n             * otherwise the nodes will jump from pixel to pixel which looks a bit\n             * jaggy when approaching equilibrium.\n             * @private\n             */\n            NetworkgraphSeries.prototype.markerAttribs = function (point, state) {\n                var attribs = Series.prototype.markerAttribs.call(this, point, state);\n                // series.render() is called before initial positions are set:\n                if (!defined(point.plotY)) {\n                    attribs.y = 0;\n                }\n                attribs.x = (point.plotX || 0) - (attribs.width || 0) / 2;\n                return attribs;\n            };\n            /**\n             * Return the presentational attributes.\n             * @private\n             */\n            NetworkgraphSeries.prototype.pointAttribs = function (point, state) {\n                // By default, only `selected` state is passed on\n                var pointState = state || point && point.state || 'normal', attribs = Series.prototype.pointAttribs.call(this, point, pointState), stateOptions = this.options.states[pointState];\n                if (point && !point.isNode) {\n                    attribs = point.getLinkAttributes();\n                    // For link, get prefixed names:\n                    if (stateOptions) {\n                        attribs = {\n                            // TO DO: API?\n                            stroke: stateOptions.linkColor || attribs.stroke,\n                            dashstyle: (stateOptions.linkDashStyle || attribs.dashstyle),\n                            opacity: pick(stateOptions.linkOpacity, attribs.opacity),\n                            'stroke-width': stateOptions.linkColor ||\n                                attribs['stroke-width']\n                        };\n                    }\n                }\n                return attribs;\n            };\n            /**\n             * Extend the render function to also render this.nodes together with\n             * the points.\n             * @private\n             */\n            NetworkgraphSeries.prototype.render = function () {\n                var series = this, points = series.points, hoverPoint = series.chart.hoverPoint, dataLabels = [];\n                // Render markers:\n                series.points = series.nodes;\n                lineProto.render.call(this);\n                series.points = points;\n                points.forEach(function (point) {\n                    if (point.fromNode && point.toNode) {\n                        point.renderLink();\n                        point.redrawLink();\n                    }\n                });\n                if (hoverPoint && hoverPoint.series === series) {\n                    series.redrawHalo(hoverPoint);\n                }\n                if (series.chart.hasRendered &&\n                    !series.options.dataLabels.allowOverlap) {\n                    series.nodes.concat(series.points).forEach(function (node) {\n                        if (node.dataLabel) {\n                            dataLabels.push(node.dataLabel);\n                        }\n                    });\n                    series.chart.hideOverlappingLabels(dataLabels);\n                }\n            };\n            /**\n             * When state should be passed down to all points, concat nodes and\n             * links and apply this state to all of them.\n             * @private\n             */\n            NetworkgraphSeries.prototype.setState = function (state, inherit) {\n                if (inherit) {\n                    this.points = this.nodes.concat(this.data);\n                    Series.prototype.setState.apply(this, arguments);\n                    this.points = this.data;\n                }\n                else {\n                    Series.prototype.setState.apply(this, arguments);\n                }\n                // If simulation is done, re-render points with new states:\n                if (!this.layout.simulation && !state) {\n                    this.render();\n                }\n            };\n            /**\n             * Run pre-translation and register nodes&links to the deffered layout.\n             * @private\n             */\n            NetworkgraphSeries.prototype.translate = function () {\n                if (!this.processedXData) {\n                    this.processData();\n                }\n                this.generatePoints();\n                this.deferLayout();\n                this.nodes.forEach(function (node) {\n                    // Draw the links from this node\n                    node.isInside = true;\n                    node.linksFrom.forEach(function (point) {\n                        point.shapeType = 'path';\n                        // Pass test in drawPoints\n                        point.y = 1;\n                    });\n                });\n            };\n            NetworkgraphSeries.defaultOptions = merge(Series.defaultOptions, NetworkgraphSeriesDefaults);\n            return NetworkgraphSeries;\n        }(Series));\n        extend(NetworkgraphSeries.prototype, {\n            pointClass: NetworkgraphPoint,\n            animate: void 0,\n            directTouch: true,\n            drawGraph: void 0,\n            forces: ['barycenter', 'repulsive', 'attractive'],\n            hasDraggableNodes: true,\n            isCartesian: false,\n            noSharedTooltip: true,\n            pointArrayMap: ['from', 'to'],\n            requireSorting: false,\n            trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n            initDataLabels: initDataLabels,\n            buildKDTree: noop,\n            createNode: NodesComposition.createNode,\n            drawTracker: columnProto.drawTracker,\n            onMouseDown: DragNodesComposition.onMouseDown,\n            onMouseMove: DragNodesComposition.onMouseMove,\n            onMouseUp: DragNodesComposition.onMouseUp,\n            redrawHalo: DragNodesComposition.redrawHalo\n        });\n        SeriesRegistry.registerSeriesType('networkgraph', NetworkgraphSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Formatter callback function.\n         *\n         * @callback Highcharts.SeriesNetworkgraphDataLabelsFormatterCallbackFunction\n         *\n         * @param {Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject|Highcharts.PointLabelObject} this\n         *        Data label context to format\n         *\n         * @return {string}\n         *         Formatted data label text\n         */\n        /**\n         * Context for the formatter function.\n         *\n         * @interface Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject\n         * @extends Highcharts.PointLabelObject\n         * @since 7.0.0\n         */ /**\n        * The color of the node.\n        * @name Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject#color\n        * @type {Highcharts.ColorString}\n        * @since 7.0.0\n        */ /**\n        * The point (node) object. The node name, if defined, is available through\n        * `this.point.name`. Arrays: `this.point.linksFrom` and `this.point.linksTo`\n        * contains all nodes connected to this point.\n        * @name Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject#point\n        * @type {Highcharts.Point}\n        * @since 7.0.0\n        */ /**\n        * The ID of the node.\n        * @name Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject#key\n        * @type {string}\n        * @since 7.0.0\n        */\n        /**\n         * Callback that fires after the end of Networkgraph series simulation\n         * when the layout is stable.\n         *\n         * @callback Highcharts.NetworkgraphAfterSimulationCallbackFunction\n         *\n         * @param {Highcharts.Series} this\n         *        The series where the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        ''; // detach doclets above\n\n        return NetworkgraphSeries;\n    });\n    _registerModule(_modules, 'masters/modules/networkgraph.src.js', [_modules['Core/Globals.js'], _modules['Series/Networkgraph/NetworkgraphSeries.js']], function (Highcharts, NetworkgraphSeries) {\n\n        var G = Highcharts;\n        NetworkgraphSeries.compose(G.Chart);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","H","U","composed","addEvent","pushUnique","onChartLoad","mousedownUnbinder","mousemoveUnbinder","mouseupUnbinder","chart","container","event","point","hoverPoint","series","hasDraggableNodes","options","draggable","onMouseDown","e","onMouseMove","ownerDocument","onMouseUp","compose","ChartClass","normalizedEvent","pointer","normalize","fixedPosition","chartX","chartY","plotX","plotY","inDragMode","diffX","diffY","graphLayoutsLookup","newPlotX","newPlotY","Math","abs","isInsidePlot","hasDragged","redrawHalo","forEach","layout","restartSimulation","_event","enableSimulation","start","redraw","fixedDraggable","halo","attr","d","haloPath","states","hover","size","A","setAnimation","onChartAfterPrint","updateSimulation","onChartBeforePrint","onChartPredraw","stop","onChartRender","systemsStable","afterRender","layoutStep","maxIterations","isFinite","temperature","isStable","beforeStep","step","render","integrations","layouts","SeriesRegistry","NodesComposition","_a","seriesProto","prototype","pointProto","pointClass","defined","extend","find","merge","pick","destroy","data","concat","points","nodes","arguments","setData","node","length","setNodeState","state","others","isNode","linksTo","linksFrom","fromNode","toNode","linkOrNode","setState","graphic","updateNode","animation","runEvent","_this","dataLength","linkConfig","index","update","call","nodeIndex","reduce","prevIndex","n","id","nodeConfig","push","PointClass","SeriesClass","createNode","findById","newNode_1","className","y","getSum","sumTo","sumFrom","link","weight","max","offset","coll","i","hasShape","outgoing","formatPrefix","name","mass","marker","radius","generatePoints","nodeLookup","colorCounter","level","from","styledMode","colorIndex","color","to","extendStatics","__extends","b","Object","setPrototypeOf","__proto__","Array","p","TypeError","String","__","constructor","create","Point","css","NetworkgraphPoint","_super","x","cursor","destroyElements","removeElementFromCollection","getDegree","deg","getLinkAttributes","linkOptions","pointOptions","width","stroke","dashstyle","dashStyle","opacity","getLinkPath","left","right","getMass","m1","m2","sum","isValid","redrawLink","attribs","shapeArgs","pointAttribs","dataLabels","label","animate","end","remove","nodesOptions","linkFromTo","indexOf","splice","removePoint","slice","isDirty","isDirtyData","renderLink","renderer","addClass","getClassName","add","group","stickyTracking","inactiveOtherPoints","enabled","inactive","duration","linkOpacity","formatter","key","linkFormatter","linkTextPath","textPath","style","transition","defer","layoutAlgorithm","initialPositions","initialPositionRadius","theta","maxSpeed","approximation","type","integration","gravitationalConstant","friction","showInLegend","attractive","force","distanceXY","distanceR","massFactor","translatedX","translatedY","dispX","degree","dispY","attractiveForceFunction","k","barycenter","xFactor","yFactor","phi","getK","pow","box","height","integrate","vectorLength","min","repulsive","repulsiveForceFunction","QuadTreeNode","body","isEmpty","isInternal","boxSize","divideBox","halfWidth","halfHeight","top","getBoxPosition","insert","depth","newQuadTreeNode","NaN","updateMassAndCenter","_i","pointMass","QuadTree","maxDepth","root","isRoot","calculateMassAndCenter","visitNodeRecursive","insertNodes","points_1","beforeCallback","afterCallback","goFurther","qtNode","diffTemperature","prevX","prevY","signX","signY","factor","EulerIntegration","GraphLayout","VerletIntegration","win","clamp","isFunction","fireEvent","ReingoldFruchtermanLayout","currentStep","initialRendering","links","simulation","euler","verlet","init","setInitialRendering","attractiveForce","repulsiveForce","enable","forces","initPositions","s","finishedAnimating","setK","resetSimulation","allSeries","createQuadTree","quadTree","anyLayout","forceName","applyLimits","coolDown","startTemperature","prevSystemTemperature","systemTemperature","getSystemTemperature","_b","allSeries_1","cancelAnimationFrame","requestAnimationFrame","setArea","w","h","linkLength","addElementsToCollection","elements","collection","elements_1","element","clear","forcedStop","setMaxIterations","setTemperature","setDiffTemperature","sqrt","setCircularPositions","setRandomPositions","angle","PI","rootNodes","filter","visitedNodes","addToNodes","sortedNodes","rootNodes_1","rootNode","nodes_1","node_1","iEnd","cos","sin","nodesLength","unrandom","rand","floor","barycenterForces","getBarycenter","systemMass","cx","cy","barnesHutApproximation","quadNode","goDeeper","getDistXY","repulsiveForces","_loop_1","this_1","_c","_d","_e","repNode","attractiveForces","nodes_2","applyLimitBox","temperatureStep","value","vector","getDistR","nodeA","nodeB","distance","xDist","yDist","absX","absY","syncTimeout","animObject","initDataLabels","dlOptions","dataLabelsGroup","initDataLabelsGroup","visible","show","getPlotBox","initDataLabelsDefer","deferDataLabels","DragNodesComposition","NetworkgraphSeriesDefaults","D","noop","Series","seriesTypes","columnProto","column","lineProto","line","NetworkgraphSeries","deferLayout","layoutOptions","graphLayoutsStorage","chartOptions","forExport","plotWidth","plotHeight","drawDataLabels","nodeOptions","indexateNodes","getPointsCollection","resolveColor","markerAttribs","pointState","stateOptions","linkColor","linkDashStyle","hasRendered","allowOverlap","dataLabel","hideOverlappingLabels","inherit","translate","processedXData","processData","isInside","shapeType","defaultOptions","directTouch","drawGraph","isCartesian","noSharedTooltip","pointArrayMap","requireSorting","trackerGroups","buildKDTree","drawTracker","registerSeriesType","G","Chart"],"mappings":"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"}