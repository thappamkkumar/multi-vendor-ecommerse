{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.3.0 (2024-01-10)\n *\n * Data grouping module\n *\n * (c) 2010-2024 Torstein HÃ¸nsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/datagrouping', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define the available approximation types. The data grouping\n         * approximations takes an array or numbers as the first parameter. In case\n         * of ohlc, four arrays are sent in as four parameters. Each array consists\n         * only of numbers. In case null values belong to the group, the property\n         * .hasNulls will be set to true on the array.\n         *\n         * @product highstock\n         *\n         * @private\n         */\n        const ApproximationRegistry = {\n        // approximations added programmatically\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ApproximationRegistry;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationDefaults.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { arrayMax, arrayMin, correctFloat, extend, isNumber } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function average(arr) {\n            const len = arr.length;\n            let ret = sum(arr);\n            // If we have a number, return it divided by the length. If not,\n            // return null or undefined based on what the sum method finds.\n            if (isNumber(ret) && len) {\n                ret = correctFloat(ret / len);\n            }\n            return ret;\n        }\n        /**\n         * The same as average, but for series with multiple values, like area ranges.\n         * @private\n         */\n        function averages() {\n            const ret = [];\n            [].forEach.call(arguments, function (arr) {\n                ret.push(average(arr));\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return typeof ret[0] === 'undefined' ? void 0 : ret;\n        }\n        /**\n         * @private\n         */\n        function close(arr) {\n            return arr.length ?\n                arr[arr.length - 1] :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function high(arr) {\n            return arr.length ?\n                arrayMax(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * HLC, OHLC and range are special cases where a multidimensional array is input\n         * and an array is output.\n         * @private\n         */\n        function hlc(high, low, close) {\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function low(arr) {\n            return arr.length ?\n                arrayMin(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function ohlc(open, high, low, close) {\n            open = ApproximationRegistry.open(open);\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(open) ||\n                isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [open, high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function open(arr) {\n            return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function range(low, high) {\n            low = ApproximationRegistry.low(low);\n            high = ApproximationRegistry.high(high);\n            if (isNumber(low) || isNumber(high)) {\n                return [low, high];\n            }\n            if (low === null && high === null) {\n                return null;\n            }\n            // else, return is undefined\n        }\n        /**\n         * @private\n         */\n        function sum(arr) {\n            let len = arr.length, ret;\n            // 1. it consists of nulls exclusive\n            if (!len && arr.hasNulls) {\n                ret = null;\n                // 2. it has a length and real values\n            }\n            else if (len) {\n                ret = 0;\n                while (len--) {\n                    ret += arr[len];\n                }\n            }\n            // 3. it has zero length, so just return undefined\n            // => doNothing()\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ApproximationDefaults = {\n            average,\n            averages,\n            close,\n            high,\n            hlc,\n            low,\n            ohlc,\n            open,\n            range,\n            sum\n        };\n        extend(ApproximationRegistry, ApproximationDefaults);\n\n        return ApproximationDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Common options\n         * @private\n         */\n        const common = {\n            // enabled: null, // (true for stock charts, false for basic),\n            // forced: undefined,\n            groupPixelWidth: 2,\n            // the first one is the point or start value, the second is the start\n            // value if we're dealing with range, the third one is the end value if\n            // dealing with a range\n            dateTimeLabelFormats: {\n                millisecond: [\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '-%H:%M:%S.%L'\n                ],\n                second: [\n                    '%A, %e %b, %H:%M:%S',\n                    '%A, %e %b, %H:%M:%S',\n                    '-%H:%M:%S'\n                ],\n                minute: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                hour: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                day: [\n                    '%A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                week: [\n                    'Week from %A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                month: [\n                    '%B %Y',\n                    '%B',\n                    '-%B %Y'\n                ],\n                year: [\n                    '%Y',\n                    '%Y',\n                    '-%Y'\n                ]\n            }\n            // smoothed = false, // enable this for navigator series only\n        };\n        /**\n         * Extends common options\n         * @private\n         */\n        const seriesSpecific = {\n            line: {},\n            spline: {},\n            area: {},\n            areaspline: {},\n            arearange: {},\n            column: {\n                groupPixelWidth: 10\n            },\n            columnrange: {\n                groupPixelWidth: 10\n            },\n            candlestick: {\n                groupPixelWidth: 10\n            },\n            ohlc: {\n                groupPixelWidth: 5\n            },\n            hlc: {\n                groupPixelWidth: 5\n                // Move to HeikinAshiSeries.ts aftre refactoring data grouping.\n            },\n            heikinashi: {\n                groupPixelWidth: 10\n            }\n        };\n        /**\n         * Units are defined in a separate array to allow complete overriding in\n         * case of a user option.\n         * @private\n         */\n        const units = [\n            [\n                'millisecond',\n                [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n            ], [\n                'second',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'minute',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'hour',\n                [1, 2, 3, 4, 6, 8, 12]\n            ], [\n                'day',\n                [1]\n            ], [\n                'week',\n                [1]\n            ], [\n                'month',\n                [1, 3, 6]\n            ], [\n                'year',\n                null\n            ]\n        ];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingDefaults = {\n            common,\n            seriesSpecific,\n            units\n        };\n\n        return DataGroupingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingAxisComposition.js', [_modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (DataGroupingDefaults, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, extend, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let AxisConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Check the groupPixelWidth and apply the grouping if needed.\n         * Fired only after processing the data.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#applyGrouping\n         */\n        function applyGrouping(e) {\n            const axis = this, series = axis.series;\n            // Reset the groupPixelWidth for all series, #17141.\n            series.forEach(function (series) {\n                series.groupPixelWidth = void 0; // #2110\n            });\n            series.forEach(function (series) {\n                series.groupPixelWidth = (axis.getGroupPixelWidth &&\n                    axis.getGroupPixelWidth());\n                if (series.groupPixelWidth) {\n                    series.hasProcessed = true; // #2692\n                }\n                // Fire independing on series.groupPixelWidth to always set a proper\n                // dataGrouping state, (#16238)\n                series.applyGrouping(!!e.hasExtremesChanged);\n            });\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass) {\n            AxisConstructor = AxisClass;\n            if (pushUnique(composed, compose)) {\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                // When all series are processed, calculate the group pixel width and\n                // then if this value is different than zero apply groupings.\n                addEvent(AxisClass, 'postProcessData', applyGrouping);\n                extend(AxisClass.prototype, {\n                    applyGrouping,\n                    getGroupPixelWidth,\n                    setDataGrouping\n                });\n            }\n        }\n        /**\n         * Get the data grouping pixel width based on the greatest defined individual\n         * width of the axis' series, and if whether one of the axes need grouping.\n         * @private\n         */\n        function getGroupPixelWidth() {\n            const series = this.series;\n            let i = series.length, groupPixelWidth = 0, doGrouping = false, dataLength, dgOptions;\n            // If one of the series needs grouping, apply it to all (#1634)\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) { // #2692\n                    // If multiple series are compared on the same x axis, give them the\n                    // same group pixel width (#334)\n                    groupPixelWidth = Math.max(groupPixelWidth, \n                    // Fallback to commonOptions (#9693)\n                    pick(dgOptions.groupPixelWidth, DataGroupingDefaults.common.groupPixelWidth));\n                    dataLength = (series[i].processedXData || series[i].data).length;\n                    // Execute grouping if the amount of points is greater than the\n                    // limit defined in groupPixelWidth\n                    if (series[i].groupPixelWidth ||\n                        (dataLength >\n                            (this.chart.plotSizeX / groupPixelWidth)) ||\n                        (dataLength && dgOptions.forced)) {\n                        doGrouping = true;\n                    }\n                }\n            }\n            return doGrouping ? groupPixelWidth : 0;\n        }\n        /**\n         * When resetting the scale reset the hasProccessed flag to avoid taking\n         * previous data grouping of neighbour series into accound when determining\n         * group pixel width (#2692).\n         * @private\n         */\n        function onAfterSetScale() {\n            this.series.forEach(function (series) {\n                series.hasProcessed = false;\n            });\n        }\n        /**\n         * Highcharts Stock only. Force data grouping on all the axis' series.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#setDataGrouping\n         *\n         * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n         *        A `dataGrouping` configuration. Use `false` to disable data grouping\n         *        dynamically.\n         *\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw the chart or wait for a later call to\n         *        {@link Chart#redraw}.\n         */\n        function setDataGrouping(dataGrouping, redraw) {\n            const axis = this;\n            let i;\n            redraw = pick(redraw, true);\n            if (!dataGrouping) {\n                dataGrouping = {\n                    forced: false,\n                    units: null\n                };\n            }\n            // Axis is instantiated, update all series\n            if (this instanceof AxisConstructor) {\n                i = this.series.length;\n                while (i--) {\n                    this.series[i].update({\n                        dataGrouping: dataGrouping\n                    }, false);\n                }\n                // Axis not yet instanciated, alter series options\n            }\n            else {\n                this.chart.options.series.forEach(function (seriesOptions) {\n                    // Merging dataGrouping options with already defined options #16759\n                    seriesOptions.dataGrouping = typeof dataGrouping === 'boolean' ?\n                        dataGrouping :\n                        merge(dataGrouping, seriesOptions.dataGrouping);\n                });\n            }\n            // Clear ordinal slope, so we won't accidentaly use the old one (#7827)\n            if (axis.ordinal) {\n                axis.ordinal.slope = void 0;\n            }\n            if (redraw) {\n                this.chart.redraw();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingAxisComposition = {\n            compose\n        };\n\n        return DataGroupingAxisComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingSeriesComposition.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Axis/DateTimeAxis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, DataGroupingDefaults, DateTimeAxis, D, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { series: { prototype: seriesProto } } = SeriesRegistry;\n        const { addEvent, defined, error, extend, isNumber, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const baseGeneratePoints = seriesProto.generatePoints;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function adjustExtremes(xAxis, groupedXData) {\n            // Make sure the X axis extends to show the first group (#2533)\n            // But only for visible series (#5493, #6393)\n            if (defined(groupedXData[0]) &&\n                isNumber(xAxis.min) &&\n                isNumber(xAxis.dataMin) &&\n                groupedXData[0] < xAxis.min) {\n                if ((!defined(xAxis.options.min) &&\n                    xAxis.min <= xAxis.dataMin) ||\n                    xAxis.min === xAxis.dataMin) {\n                    xAxis.min = Math.min(groupedXData[0], xAxis.min);\n                }\n                xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n            }\n            // When the last anchor set, change the extremes that\n            // the last point is visible (#12455).\n            if (defined(groupedXData[groupedXData.length - 1]) &&\n                isNumber(xAxis.max) &&\n                isNumber(xAxis.dataMax) &&\n                groupedXData[groupedXData.length - 1] > xAxis.max) {\n                if ((!defined(xAxis.options.max) &&\n                    isNumber(xAxis.dataMax) &&\n                    xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n                    xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n                }\n                xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n            }\n        }\n        /**\n         * @private\n         */\n        function anchorPoints(series, groupedXData, xMax) {\n            const options = series.options, dataGroupingOptions = options.dataGrouping, totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize);\n            if (!(dataGroupingOptions &&\n                series.xData &&\n                totalRange &&\n                series.groupMap)) {\n                return;\n            }\n            const groupedDataLastIndex = groupedXData.length - 1, anchor = dataGroupingOptions.anchor, firstAnchor = dataGroupingOptions.firstAnchor, lastAnchor = dataGroupingOptions.lastAnchor;\n            let anchorIndexIterator = groupedXData.length - 1, anchorFirstIndex = 0;\n            // Change the first point position, but only when it is\n            // the first point in the data set not in the current zoom.\n            if (firstAnchor && series.xData[0] >= groupedXData[0]) {\n                anchorFirstIndex++;\n                const groupStart = series.groupMap[0].start, groupLength = series.groupMap[0].length;\n                let firstGroupEnd;\n                if (isNumber(groupStart) && isNumber(groupLength)) {\n                    firstGroupEnd = groupStart + (groupLength - 1);\n                }\n                groupedXData[0] = {\n                    start: groupedXData[0],\n                    middle: groupedXData[0] + 0.5 * totalRange,\n                    end: groupedXData[0] + totalRange,\n                    firstPoint: series.xData[0],\n                    lastPoint: firstGroupEnd && series.xData[firstGroupEnd]\n                }[firstAnchor];\n            }\n            // Change the last point position but only when it is\n            // the last point in the data set not in the current zoom,\n            // or if it is not the 1st point simutainously.\n            if (groupedDataLastIndex > 0 &&\n                lastAnchor &&\n                totalRange &&\n                groupedXData[groupedDataLastIndex] >= xMax - totalRange) {\n                anchorIndexIterator--;\n                const lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n                groupedXData[groupedDataLastIndex] = {\n                    start: groupedXData[groupedDataLastIndex],\n                    middle: groupedXData[groupedDataLastIndex] + 0.5 * totalRange,\n                    end: groupedXData[groupedDataLastIndex] + totalRange,\n                    firstPoint: lastGroupStart && series.xData[lastGroupStart],\n                    lastPoint: series.xData[series.xData.length - 1]\n                }[lastAnchor];\n            }\n            if (anchor && anchor !== 'start') {\n                const shiftInterval = (totalRange *\n                    { middle: 0.5, end: 1 }[anchor]);\n                // Anchor the rest of the points apart from the ones, that were\n                // previously moved.\n                while (anchorIndexIterator >= anchorFirstIndex) {\n                    groupedXData[anchorIndexIterator] += shiftInterval;\n                    anchorIndexIterator--;\n                }\n            }\n        }\n        /**\n         * For the processed data, calculate the grouped data if needed.\n         *\n         * @private\n         * @function Highcharts.Series#applyGrouping\n         */\n        function applyGrouping(hasExtremesChanged) {\n            const series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n                pick(dataGroupingOptions.enabled, chart.options.isStock), reserveSpace = series.reserveSpace(), lastDataGrouping = this.currentDataGrouping;\n            let currentDataGrouping, croppedData, revertRequireSorting = false;\n            // Data needs to be sorted for dataGrouping\n            if (groupingEnabled && !series.requireSorting) {\n                series.requireSorting = revertRequireSorting = true;\n            }\n            // Skip if skipDataGrouping method returns false or if grouping is disabled\n            // (in that order).\n            const skip = skipDataGrouping(series, hasExtremesChanged) === false || !groupingEnabled;\n            // Revert original requireSorting value if changed\n            if (revertRequireSorting) {\n                series.requireSorting = false;\n            }\n            if (skip) {\n                return;\n            }\n            series.destroyGroupedData();\n            const processedXData = dataGroupingOptions.groupAll ?\n                series.xData :\n                series.processedXData, processedYData = dataGroupingOptions.groupAll ?\n                series.yData :\n                series.processedYData, plotSizeX = chart.plotSizeX, xAxis = series.xAxis, ordinal = xAxis.options.ordinal, groupPixelWidth = series.groupPixelWidth;\n            let i, hasGroupedData;\n            // Execute grouping if the amount of points is greater than the limit\n            // defined in groupPixelWidth\n            if (groupPixelWidth &&\n                processedXData &&\n                processedXData.length &&\n                plotSizeX) {\n                hasGroupedData = true;\n                // Force recreation of point instances in series.translate, #5699\n                series.isDirty = true;\n                series.points = null; // #6709\n                const extremes = xAxis.getExtremes(), xMin = extremes.min, xMax = extremes.max, groupIntervalFactor = (ordinal &&\n                    xAxis.ordinal &&\n                    xAxis.ordinal.getGroupIntervalFactor(xMin, xMax, series)) || 1, interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                    groupIntervalFactor, groupPositions = xAxis.getTimeTicks(DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval, dataGroupingOptions.units ||\n                    DataGroupingDefaults.units), \n                // Processed data may extend beyond axis (#4907)\n                Math.min(xMin, processedXData[0]), Math.max(xMax, processedXData[processedXData.length - 1]), xAxis.options.startOfWeek, processedXData, series.closestPointRange), groupedData = seriesProto.groupData.apply(series, [\n                    processedXData,\n                    processedYData,\n                    groupPositions,\n                    dataGroupingOptions.approximation\n                ]);\n                let groupedXData = groupedData.groupedXData, groupedYData = groupedData.groupedYData, gapSize = 0;\n                // The smoothed option is deprecated, instead, there is a fallback\n                // to the new anchoring mechanism. #12455.\n                if (dataGroupingOptions &&\n                    dataGroupingOptions.smoothed &&\n                    groupedXData.length) {\n                    dataGroupingOptions.firstAnchor = 'firstPoint';\n                    dataGroupingOptions.anchor = 'middle';\n                    dataGroupingOptions.lastAnchor = 'lastPoint';\n                    error(32, false, chart, {\n                        'dataGrouping.smoothed': 'use dataGrouping.anchor'\n                    });\n                }\n                // Record what data grouping values were used\n                for (i = 1; i < groupPositions.length; i++) {\n                    // The grouped gapSize needs to be the largest distance between\n                    // the group to capture varying group sizes like months or DST\n                    // crossing (#10000). Also check that the gap is not at the\n                    // start of a segment.\n                    if (!groupPositions.info.segmentStarts ||\n                        groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                        gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n                    }\n                }\n                currentDataGrouping = groupPositions.info;\n                currentDataGrouping.gapSize = gapSize;\n                series.closestPointRange = groupPositions.info.totalRange;\n                series.groupMap = groupedData.groupMap;\n                series.currentDataGrouping = currentDataGrouping;\n                anchorPoints(series, groupedXData, xMax);\n                if (reserveSpace) {\n                    adjustExtremes(xAxis, groupedXData);\n                }\n                // We calculated all group positions but we should render\n                // only the ones within the visible range\n                if (dataGroupingOptions.groupAll) {\n                    // Keep the reference to all grouped points\n                    // for further calculation (eg. heikinashi).\n                    series.allGroupedData = groupedYData;\n                    croppedData = series.cropData(groupedXData, groupedYData, xAxis.min, xAxis.max);\n                    groupedXData = croppedData.xData;\n                    groupedYData = croppedData.yData;\n                    series.cropStart = croppedData.start; // #15005\n                }\n                // Set series props\n                series.processedXData = groupedXData;\n                series.processedYData = groupedYData;\n            }\n            else {\n                series.groupMap = null;\n            }\n            series.hasGroupedData = hasGroupedData;\n            series.preventGraphAnimation =\n                (lastDataGrouping && lastDataGrouping.totalRange) !==\n                    (currentDataGrouping && currentDataGrouping.totalRange);\n        }\n        /**\n         * @private\n         */\n        function compose(SeriesClass) {\n            const PointClass = SeriesClass.prototype.pointClass;\n            if (pushUnique(composed, compose)) {\n                // Override point prototype to throw a warning when trying to update\n                // grouped points.\n                addEvent(PointClass, 'update', function () {\n                    if (this.dataGroup) {\n                        error(24, false, this.series.chart);\n                        return false;\n                    }\n                });\n                addEvent(SeriesClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(SeriesClass, 'destroy', destroyGroupedData);\n                extend(SeriesClass.prototype, {\n                    applyGrouping,\n                    destroyGroupedData,\n                    generatePoints,\n                    getDGApproximation,\n                    groupData\n                });\n            }\n        }\n        /**\n         * Destroy the grouped data points. #622, #740\n         * @private\n         */\n        function destroyGroupedData() {\n            // Clear previous groups\n            if (this.groupedData) {\n                this.groupedData.forEach(function (point, i) {\n                    if (point) {\n                        this.groupedData[i] = point.destroy ?\n                            point.destroy() : null;\n                    }\n                }, this);\n                // Clears all:\n                // - `this.groupedData`\n                // - `this.points`\n                // - `preserve` object in series.update()\n                this.groupedData.length = 0;\n                delete this.allGroupedData; // #19892\n            }\n        }\n        /**\n         * Override the generatePoints method by adding a reference to grouped data\n         * @private\n         */\n        function generatePoints() {\n            baseGeneratePoints.apply(this);\n            // Record grouped data in order to let it be destroyed the next time\n            // processData runs\n            this.destroyGroupedData(); // #622\n            this.groupedData = this.hasGroupedData ? this.points : null;\n        }\n        /**\n         * Set default approximations to the prototypes if present. Properties are\n         * inherited down. Can be overridden for individual series types.\n         * @private\n         */\n        function getDGApproximation() {\n            if (this.is('arearange')) {\n                return 'range';\n            }\n            if (this.is('ohlc')) {\n                return 'ohlc';\n            }\n            if (this.is('hlc')) {\n                return 'hlc';\n            }\n            if (\n            // #18974, default approximation for cumulative\n            // should be `sum` when `dataGrouping` is enabled\n            this.is('column') ||\n                this.options.cumulative) {\n                return 'sum';\n            }\n            return 'average';\n        }\n        /**\n         * Highcharts Stock only. Takes parallel arrays of x and y data and groups the\n         * data into intervals defined by groupPositions, a collection of starting x\n         * values for each group.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Series#groupData\n         * @param {Array<number>} xData\n         *        Parallel array of x data.\n         * @param {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>} yData\n         *        Parallel array of y data.\n         * @param {Array<number>} groupPositions\n         *        Group positions.\n         * @param {string|Function} [approximation]\n         *        Approximation to use.\n         * @return {Highcharts.DataGroupingResultObject}\n         *         Mapped groups.\n         */\n        function groupData(xData, yData, groupPositions, approximation) {\n            const series = this, data = series.data, dataOptions = series.options && series.options.data, groupedXData = [], groupedYData = [], groupMap = [], dataLength = xData.length, \n            // when grouping the fake extended axis for panning,\n            // we don't need to consider y\n            handleYData = !!yData, values = [], pointArrayMap = series.pointArrayMap, pointArrayMapLength = pointArrayMap && pointArrayMap.length, extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']), groupAll = (this.options.dataGrouping &&\n                this.options.dataGrouping.groupAll);\n            let pointX, pointY, groupedY, pos = 0, start = 0;\n            const approximationFn = (typeof approximation === 'function' ?\n                approximation :\n                approximation && ApproximationRegistry[approximation] ?\n                    ApproximationRegistry[approximation] :\n                    ApproximationRegistry[(series.getDGApproximation && series.getDGApproximation() ||\n                        'average')]);\n            // Calculate values array size from pointArrayMap length\n            if (pointArrayMapLength) {\n                let len = pointArrayMap.length;\n                while (len--) {\n                    values.push([]);\n                }\n            }\n            else {\n                values.push([]);\n            }\n            const valuesLen = pointArrayMapLength || 1;\n            for (let i = 0; i <= dataLength; i++) {\n                // Start with the first point within the X axis range (#2696)\n                if (xData[i] < groupPositions[0]) {\n                    continue; // with next point\n                }\n                // when a new group is entered, summarize and initialize\n                // the previous group\n                while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n                    xData[i] >= groupPositions[pos + 1]) ||\n                    i === dataLength) { // get the last group\n                    // get group x and y\n                    pointX = groupPositions[pos];\n                    series.dataGroupInfo = {\n                        start: groupAll ? start : (series.cropStart + start),\n                        length: values[0].length,\n                        groupStart: pointX\n                    };\n                    groupedY = approximationFn.apply(series, values);\n                    // By default, let options of the first grouped point be passed over\n                    // to the grouped point. This allows preserving properties like\n                    // `name` and `color` or custom properties. Implementers can\n                    // override this from the approximation function, where they can\n                    // write custom options to `this.dataGroupInfo.options`.\n                    if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                        // Convert numbers and arrays into objects\n                        series.dataGroupInfo.options = merge(series.pointClass.prototype\n                            .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                        // Make sure the raw data (x, y, open, high etc) is not copied\n                        // over and overwriting approximated data.\n                        extendedPointArrayMap.forEach(function (key) {\n                            delete series.dataGroupInfo.options[key];\n                        });\n                    }\n                    // push the grouped data\n                    if (typeof groupedY !== 'undefined') {\n                        groupedXData.push(pointX);\n                        groupedYData.push(groupedY);\n                        groupMap.push(series.dataGroupInfo);\n                    }\n                    // reset the aggregate arrays\n                    start = i;\n                    for (let j = 0; j < valuesLen; j++) {\n                        values[j].length = 0; // faster than values[j] = []\n                        values[j].hasNulls = false;\n                    }\n                    // Advance on the group positions\n                    pos += 1;\n                    // don't loop beyond the last group\n                    if (i === dataLength) {\n                        break;\n                    }\n                }\n                // break out\n                if (i === dataLength) {\n                    break;\n                }\n                // for each raw data point, push it to an array that contains all values\n                // for this specific group\n                if (pointArrayMap) {\n                    const index = (series.options.dataGrouping &&\n                        series.options.dataGrouping.groupAll ?\n                        i : series.cropStart + i), point = (data && data[index]) ||\n                        series.pointClass.prototype.applyOptions.apply({\n                            series: series\n                        }, [dataOptions[index]]);\n                    let val;\n                    for (let j = 0; j < pointArrayMapLength; j++) {\n                        val = point[pointArrayMap[j]];\n                        if (isNumber(val)) {\n                            values[j].push(val);\n                        }\n                        else if (val === null) {\n                            values[j].hasNulls = true;\n                        }\n                    }\n                }\n                else {\n                    pointY = handleYData ? yData[i] : null;\n                    if (isNumber(pointY)) {\n                        values[0].push(pointY);\n                    }\n                    else if (pointY === null) {\n                        values[0].hasNulls = true;\n                    }\n                }\n            }\n            return {\n                groupedXData,\n                groupedYData,\n                groupMap\n            };\n        }\n        /**\n         * Handle default options for data grouping. This must be set at runtime because\n         * some series types are defined after this.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = e.options, type = this.type, plotOptions = this.chart.options.plotOptions, \n            // External series, for example technical indicators should also inherit\n            // commonOptions which are not available outside this module\n            baseOptions = (this.useCommonDataGrouping &&\n                DataGroupingDefaults.common), seriesSpecific = DataGroupingDefaults.seriesSpecific;\n            let defaultOptions = D.defaultOptions.plotOptions[type].dataGrouping;\n            if (plotOptions && (seriesSpecific[type] || baseOptions)) { // #1284\n                const rangeSelector = this.chart.rangeSelector;\n                if (!defaultOptions) {\n                    defaultOptions = merge(DataGroupingDefaults.common, seriesSpecific[type]);\n                }\n                options.dataGrouping = merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n                // Set by the StockChart constructor:\n                plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n                    rangeSelector &&\n                    isNumber(rangeSelector.selected) &&\n                    rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n            }\n        }\n        /**\n         * @private\n         */\n        function skipDataGrouping(series, force) {\n            return !(series.isCartesian &&\n                !series.isDirty &&\n                !series.xAxis.isDirty &&\n                !series.yAxis.isDirty &&\n                !force);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingSeriesComposition = {\n            compose,\n            groupData\n        };\n\n        return DataGroupingSeriesComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGrouping.js', [_modules['Extensions/DataGrouping/DataGroupingAxisComposition.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Extensions/DataGrouping/DataGroupingSeriesComposition.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (DataGroupingAxisComposition, DataGroupingDefaults, DataGroupingSeriesComposition, F, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { composed } = H;\n        const { addEvent, extend, isNumber, pick, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, SeriesClass, TooltipClass) {\n            DataGroupingAxisComposition.compose(AxisClass);\n            DataGroupingSeriesComposition.compose(SeriesClass);\n            if (TooltipClass &&\n                pushUnique(composed, compose)) {\n                addEvent(TooltipClass, 'headerFormatter', onTooltipHeaderFormatter);\n            }\n        }\n        /**\n         * Extend the original method, make the tooltip's header reflect the grouped\n         * range.\n         * @private\n         */\n        function onTooltipHeaderFormatter(e) {\n            const chart = this.chart, time = chart.time, labelConfig = e.labelConfig, series = labelConfig.series, point = labelConfig.point, options = series.options, tooltipOptions = series.tooltipOptions, dataGroupingOptions = options.dataGrouping, xAxis = series.xAxis;\n            let xDateFormat = tooltipOptions.xDateFormat, xDateFormatEnd, currentDataGrouping, dateTimeLabelFormats, labelFormats, formattedKey, formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n            // apply only to grouped series\n            if (xAxis &&\n                xAxis.options.type === 'datetime' &&\n                dataGroupingOptions &&\n                isNumber(labelConfig.key)) {\n                // set variables\n                currentDataGrouping = series.currentDataGrouping;\n                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n                    // Fallback to commonOptions (#9693)\n                    DataGroupingDefaults.common.dateTimeLabelFormats;\n                // if we have grouped data, use the grouping information to get the\n                // right format\n                if (currentDataGrouping) {\n                    labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];\n                    if (currentDataGrouping.count === 1) {\n                        xDateFormat = labelFormats[0];\n                    }\n                    else {\n                        xDateFormat = labelFormats[1];\n                        xDateFormatEnd = labelFormats[2];\n                    }\n                    // if not grouped, and we don't have set the xDateFormat option, get the\n                    // best fit, so if the least distance between points is one minute, show\n                    // it, but if the least distance is one day, skip hours and minutes etc.\n                }\n                else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n                    xDateFormat = xAxis.dateTime.getXDateFormat(labelConfig.x, tooltipOptions.dateTimeLabelFormats);\n                }\n                const groupStart = pick(series.groupMap?.[point.index].groupStart, labelConfig.key), groupEnd = groupStart + currentDataGrouping?.totalRange - 1;\n                formattedKey = time.dateFormat(xDateFormat, groupStart);\n                if (xDateFormatEnd) {\n                    formattedKey += time.dateFormat(xDateFormatEnd, groupEnd);\n                }\n                // Replace default header style with class name\n                if (series.chart.styledMode) {\n                    formatString = this.styledModeFormat(formatString);\n                }\n                // return the replaced format\n                e.text = format(formatString, {\n                    point: extend(labelConfig.point, { key: formattedKey }),\n                    series: series\n                }, chart);\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingComposition = {\n            compose,\n            groupData: DataGroupingSeriesComposition.groupData\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n         */\n        /**\n         * The position of the point inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n         */\n        /**\n         * The position of the first or last point in the series inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n         */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingInfoObject\n         */ /**\n        * @name Highcharts.DataGroupingInfoObject#length\n        * @type {number}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#options\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#start\n        * @type {number}\n        */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingResultObject\n         */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedXData\n        * @type {Array<number>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedYData\n        * @type {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupMap\n        * @type {Array<DataGroupingInfoObject>}\n        */\n        /**\n         * Highcharts Stock only. If a point object is created by data\n         * grouping, it doesn't reflect actual points in the raw\n         * data. In this case, the `dataGroup` property holds\n         * information that points back to the raw data.\n         *\n         * - `dataGroup.start` is the index of the first raw data\n         *   point in the group.\n         *\n         * - `dataGroup.length` is the amount of points in the\n         *   group.\n         *\n         * @sample stock/members/point-datagroup\n         *         Click to inspect raw data points\n         *\n         * @product highstock\n         *\n         * @name Highcharts.Point#dataGroup\n         * @type {Highcharts.DataGroupingInfoObject|undefined}\n         */\n        (''); // detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Data grouping is the concept of sampling the data values into larger\n         * blocks in order to ease readability and increase performance of the\n         * JavaScript charts. Highcharts Stock by default applies data grouping when\n         * the points become closer than a certain pixel value, determined by\n         * the `groupPixelWidth` option.\n         *\n         * If data grouping is applied, the grouping information of grouped\n         * points can be read from the [Point.dataGroup](\n         * /class-reference/Highcharts.Point#dataGroup). If point options other than\n         * the data itself are set, for example `name` or `color` or custom properties,\n         * the grouping logic doesn't know how to group it. In this case the options of\n         * the first point instance are copied over to the group point. This can be\n         * altered through a custom `approximation` callback function.\n         *\n         * @declare   Highcharts.DataGroupingOptionsObject\n         * @product   highstock\n         * @requires  product:highstock\n         * @requires  module:modules/datagrouping\n         * @apioption plotOptions.series.dataGrouping\n         */\n        /**\n         * Specifies how the points should be located on the X axis inside the group.\n         * Points that are extremes can be set separately. Available options:\n         *\n         * - `start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * - `middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * - `end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n         *         Changing the point x-coordinate inside the group.\n         *\n         * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n         * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchor}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.anchor\n         */\n        /**\n         * The method of approximation inside a group. When for example 30 days\n         * are grouped into one month, this determines what value should represent\n         * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n         * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n         * is \"ohlc\" by default, which finds the open, high, low and close values\n         * within all the grouped data. For ranges, the approximation is \"range\",\n         * which finds the low and high values. For multi-dimensional data,\n         * like ranges and OHLC, \"averages\" will compute the average for each\n         * dimension.\n         *\n         * Custom aggregate methods can be added by assigning a callback function\n         * as the approximation. This function takes a numeric array as the\n         * argument and should return a single numeric value or `null`. Note\n         * that the numeric array will never contain null values, only true\n         * numbers. Instead, if null values are present in the raw data, the\n         * numeric array will have an `.hasNulls` property set to `true`. For\n         * single-value data sets the data is available in the first argument\n         * of the callback function. For OHLC data sets, all the open values\n         * are in the first argument, all high values in the second etc.\n         *\n         * Since v4.2.7, grouping meta data is available in the approximation\n         * callback from `this.dataGroupInfo`. It can be used to extract information\n         * from the raw data.\n         *\n         * Defaults to `average` for line-type series, `sum` for columns, `range`\n         * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n         *         Approximation callback with custom data\n         * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n         *         Simple approximation demo\n         *\n         * @type       {Highcharts.DataGroupingApproximationValue|Function}\n         * @apioption  plotOptions.series.dataGrouping.approximation\n         */\n        /**\n         * Datetime formats for the header of the tooltip in a stock chart.\n         * The format can vary within a chart depending on the currently selected\n         * time range and the current data grouping.\n         *\n         * The default formats are:\n         * ```js\n         * {\n         *     millisecond: [\n         *         '%A, %e %b, %H:%M:%S.%L', '%A, %e %b, %H:%M:%S.%L', '-%H:%M:%S.%L'\n         *     ],\n         *     second: ['%A, %e %b, %H:%M:%S', '%A, %e %b, %H:%M:%S', '-%H:%M:%S'],\n         *     minute: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     hour: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     day: ['%A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     week: ['Week from %A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     month: ['%B %Y', '%B', '-%B %Y'],\n         *     year: ['%Y', '%Y', '-%Y']\n         * }\n         * ```\n         *\n         * For each of these array definitions, the first item is the format\n         * used when the active time span is one unit. For instance, if the\n         * current data applies to one week, the first item of the week array\n         * is used. The second and third items are used when the active time\n         * span is more than two units. For instance, if the current data applies\n         * to two weeks, the second and third item of the week array are used,\n         *  and applied to the start and end date of the time span.\n         *\n         * @type      {Object}\n         * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n         */\n        /**\n         * Enable or disable data grouping.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.series.dataGrouping.enabled\n         */\n        /**\n         * Specifies how the first grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.firstAnchor\n         */\n        /**\n         * When data grouping is forced, it runs no matter how small the intervals\n         * are. This can be handy for example when the sum should be calculated\n         * for values appearing at random times within each hour.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataGrouping.forced\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. If multiple series with different group pixel widths\n         * are drawn on the same x axis, all series will take the greatest width.\n         * For example, line series have 2px default group width, while column\n         * series have 10px. If combined, both the line and the column will\n         * have 10px by default.\n         *\n         * @type      {number}\n         * @default   2\n         * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n         */\n        /**\n         * By default only points within the visible range are grouped. Enabling this\n         * option will force data grouping to calculate all grouped points for a given\n         * dataset. That option prevents for example a column series from calculating\n         * a grouped point partially. The effect is similar to\n         * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n         * not affect yAxis extremes.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n         *         Two series with the same data but different groupAll setting\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.1.0\n         * @apioption plotOptions.series.dataGrouping.groupAll\n         */\n        /**\n         * Specifies how the last grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n         *         Applying the last anchor in the chart with live data.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.lastAnchor\n         */\n        /**\n         * Normally, a group is indexed by the start of that group, so for example\n         * when 30 daily values are grouped into one month, that month's x value\n         * will be the 1st of the month. This apparently shifts the data to\n         * the left. When the smoothed option is true, this is compensated for.\n         * The data is shifted to the middle of the group, and min and max\n         * values are preserved. Internally, this is used in the Navigator series.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @deprecated\n         * @apioption plotOptions.series.dataGrouping.smoothed\n         */\n        /**\n         * An array determining what time intervals the data is allowed to be\n         * grouped to. Each array item is an array where the first value is\n         * the time unit and the second value another array of allowed multiples.\n         *\n         * Defaults to:\n         * ```js\n         * units: [[\n         *     'millisecond', // unit name\n         *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n         * ], [\n         *     'second',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'minute',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'hour',\n         *     [1, 2, 3, 4, 6, 8, 12]\n         * ], [\n         *     'day',\n         *     [1]\n         * ], [\n         *     'week',\n         *     [1]\n         * ], [\n         *     'month',\n         *     [1, 3, 6]\n         * ], [\n         *     'year',\n         *     null\n         * ]]\n         * ```\n         *\n         * @type      {Array<Array<string,(Array<number>|null)>>}\n         * @apioption plotOptions.series.dataGrouping.units\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. Defaults to `10`.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n         *         Two series with the same data density but different groupPixelWidth\n         *\n         * @type      {number}\n         * @default   10\n         * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n         */\n        ''; // required by JSDoc parsing\n\n        return DataGroupingComposition;\n    });\n    _registerModule(_modules, 'masters/modules/datagrouping.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DataGrouping/ApproximationDefaults.js'], _modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGrouping.js']], function (Highcharts, ApproximationDefaults, ApproximationRegistry, DataGrouping) {\n\n        const G = Highcharts;\n        G.dataGrouping = {\n            approximationDefaults: ApproximationDefaults,\n            approximations: ApproximationRegistry\n        };\n        DataGrouping.compose(G.Axis, G.Series, G.Tooltip);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","ApproximationRegistry","U","arrayMax","arrayMin","correctFloat","extend","isNumber","average","arr","len","length","ret","sum","hasNulls","ApproximationDefaults","averages","forEach","call","arguments","push","close","high","hlc","low","ohlc","open","range","common","groupPixelWidth","dateTimeLabelFormats","millisecond","second","minute","hour","day","week","month","year","seriesSpecific","line","spline","area","areaspline","arearange","column","columnrange","candlestick","heikinashi","units","DataGroupingDefaults","H","AxisConstructor","composed","addEvent","merge","pick","pushUnique","applyGrouping","e","axis","series","getGroupPixelWidth","hasProcessed","hasExtremesChanged","i","doGrouping","dataLength","dgOptions","options","dataGrouping","Math","max","processedXData","data","chart","plotSizeX","forced","onAfterSetScale","setDataGrouping","redraw","update","seriesOptions","ordinal","slope","compose","AxisClass","prototype","DateTimeAxis","D","SeriesRegistry","seriesProto","defined","error","baseGeneratePoints","generatePoints","groupedXData","hasGroupedData","dataGroupingOptions","groupingEnabled","allowDG","enabled","isStock","reserveSpace","lastDataGrouping","currentDataGrouping","croppedData","revertRequireSorting","requireSorting","skip","skipDataGrouping","isCartesian","isDirty","xAxis","yAxis","destroyGroupedData","groupAll","xData","processedYData","yData","points","extremes","getExtremes","xMin","min","xMax","groupIntervalFactor","getGroupIntervalFactor","interval","groupPositions","getTimeTicks","Additions","normalizeTimeTickInterval","startOfWeek","closestPointRange","groupedData","groupData","approximation","groupedYData","gapSize","smoothed","firstAnchor","anchor","lastAnchor","info","segmentStarts","indexOf","totalRange","groupMap","anchorPoints","groupedDataLastIndex","anchorIndexIterator","anchorFirstIndex","firstGroupEnd","groupStart","start","groupLength","middle","end","firstPoint","lastPoint","lastGroupStart","shiftInterval","dataMin","dataMax","allGroupedData","cropData","cropStart","preventGraphAnimation","point","destroy","getDGApproximation","is","cumulative","dataOptions","handleYData","values","pointArrayMap","pointArrayMapLength","extendedPointArrayMap","concat","pointX","pointY","groupedY","pos","approximationFn","valuesLen","dataGroupInfo","pointClass","optionsToObject","key","j","val","index","applyOptions","onAfterSetOptions","type","plotOptions","baseOptions","useCommonDataGrouping","defaultOptions","rangeSelector","userOptions","isInternal","selected","buttonOptions","SeriesClass","PointClass","dataGroup","DataGroupingAxisComposition","DataGroupingSeriesComposition","F","format","onTooltipHeaderFormatter","time","labelConfig","tooltipOptions","xDateFormat","xDateFormatEnd","labelFormats","formattedKey","formatString","isFooter","unitName","count","dateTime","getXDateFormat","x","groupEnd","dateFormat","styledMode","styledModeFormat","text","preventDefault","DataGroupingComposition","TooltipClass","DataGrouping","G","approximationDefaults","approximations","Axis","Series","Tooltip"],"mappings":"AAAA;;;;;;;;CAQC,GACA,SAAUA,CAAO,EACV,AAAkB,UAAlB,OAAOC,QAAuBA,OAAOC,OAAO,EAC5CF,EAAQ,OAAU,CAAGA,EACrBC,OAAOC,OAAO,CAAGF,GACV,AAAkB,YAAlB,OAAOG,QAAyBA,OAAOC,GAAG,CACjDD,OAAO,kCAAmC,CAAC,aAAa,CAAE,SAAUE,CAAU,EAG1E,OAFAL,EAAQK,GACRL,EAAQK,UAAU,CAAGA,EACdL,CACX,GAEAA,EAAQ,AAAsB,aAAtB,OAAOK,WAA6BA,WAAaC,KAAAA,EAEjE,EAAE,SAAUD,CAAU,EAClB,aACA,IAAIE,EAAWF,EAAaA,EAAWE,QAAQ,CAAG,CAAC,EACnD,SAASC,EAAgBC,CAAG,CAAEC,CAAI,CAAEC,CAAI,CAAEC,CAAE,EACnCH,EAAII,cAAc,CAACH,KACpBD,CAAG,CAACC,EAAK,CAAGE,EAAGE,KAAK,CAAC,KAAMH,GAEA,YAAvB,OAAOI,aACPC,OAAOC,aAAa,CAAC,IAAIF,YACrB,yBACA,CAAEG,OAAQ,CAAER,KAAMA,EAAMT,OAAQQ,CAAG,CAACC,EAAK,AAAC,CAAE,IAI5D,CACAF,EAAgBD,EAAU,mDAAoD,EAAE,CAAE,WAmC9E,MAT8B,CAE9B,CAQJ,GACAC,EAAgBD,EAAU,mDAAoD,CAACA,CAAQ,CAAC,mDAAmD,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUY,CAAqB,CAAEC,CAAC,EAU3M,GAAM,CAAEC,SAAAA,CAAQ,CAAEC,SAAAA,CAAQ,CAAEC,aAAAA,CAAY,CAAEC,OAAAA,CAAM,CAAEC,SAAAA,CAAQ,CAAE,CAAGL,EAS/D,SAASM,EAAQC,CAAG,EAChB,IAAMC,EAAMD,EAAIE,MAAM,CAClBC,EAAMC,EAAIJ,GAMd,OAHIF,EAASK,IAAQF,GACjBE,CAAAA,EAAMP,EAAaO,EAAMF,EAAG,EAEzBE,CACX,CA2FA,SAASC,EAAIJ,CAAG,EACZ,IAAIC,EAAMD,EAAIE,MAAM,CAAEC,EAEtB,GAAI,CAACF,GAAOD,EAAIK,QAAQ,CACpBF,EAAM,UAGL,GAAIF,EAEL,IADAE,EAAM,EACCF,KACHE,GAAOH,CAAG,CAACC,EAAI,CAKvB,OAAOE,CACX,CAMA,IAAMG,EAAwB,CAC1BP,QAAAA,EACAQ,SA9GJ,WACI,IAAMJ,EAAM,EAAE,CAMd,MALA,EAAE,CAACK,OAAO,CAACC,IAAI,CAACC,UAAW,SAAUV,CAAG,EACpCG,EAAIQ,IAAI,CAACZ,EAAQC,GACrB,GAGO,AAAkB,KAAA,IAAXG,CAAG,CAAC,EAAE,CAAmB,KAAK,EAAIA,CACpD,EAuGIS,MAnGJ,SAAeZ,CAAG,EACd,OAAOA,EAAIE,MAAM,CACbF,CAAG,CAACA,EAAIE,MAAM,CAAG,EAAE,CAClBF,EAAIK,QAAQ,CAAG,KAAO,KAAK,CACpC,EAgGIQ,KA5FJ,SAAcb,CAAG,EACb,OAAOA,EAAIE,MAAM,CACbR,EAASM,GACRA,EAAIK,QAAQ,CAAG,KAAO,KAAK,CACpC,EAyFIS,IAnFJ,SAAaD,CAAI,CAAEE,CAAG,CAAEH,CAAK,EAIzB,GAHAC,EAAOrB,EAAsBqB,IAAI,CAACA,GAClCE,EAAMvB,EAAsBuB,GAAG,CAACA,GAChCH,EAAQpB,EAAsBoB,KAAK,CAACA,GAChCd,EAASe,IACTf,EAASiB,IACTjB,EAASc,GACT,MAAO,CAACC,EAAME,EAAKH,EAAM,AAEjC,EA2EIG,IAvEJ,SAAaf,CAAG,EACZ,OAAOA,EAAIE,MAAM,CACbP,EAASK,GACRA,EAAIK,QAAQ,CAAG,KAAO,KAAK,CACpC,EAoEIW,KAhEJ,SAAcC,CAAI,CAAEJ,CAAI,CAAEE,CAAG,CAAEH,CAAK,EAKhC,GAJAK,EAAOzB,EAAsByB,IAAI,CAACA,GAClCJ,EAAOrB,EAAsBqB,IAAI,CAACA,GAClCE,EAAMvB,EAAsBuB,GAAG,CAACA,GAChCH,EAAQpB,EAAsBoB,KAAK,CAACA,GAChCd,EAASmB,IACTnB,EAASe,IACTf,EAASiB,IACTjB,EAASc,GACT,MAAO,CAACK,EAAMJ,EAAME,EAAKH,EAAM,AAEvC,EAsDIK,KAlDJ,SAAcjB,CAAG,EACb,OAAOA,EAAIE,MAAM,CAAGF,CAAG,CAAC,EAAE,CAAIA,EAAIK,QAAQ,CAAG,KAAO,KAAK,CAC7D,EAiDIa,MA7CJ,SAAeH,CAAG,CAAEF,CAAI,QAGpB,CAFAE,EAAMvB,EAAsBuB,GAAG,CAACA,GAChCF,EAAOrB,EAAsBqB,IAAI,CAACA,GAC9Bf,EAASiB,IAAQjB,EAASe,IACnB,CAACE,EAAKF,EAAK,CAElBE,AAAQ,OAARA,GAAgBF,AAAS,OAATA,EACT,WAGf,EAoCIT,IAAAA,CACJ,EAGA,OAFAP,EAAOL,EAAuBc,GAEvBA,CACX,GACAzB,EAAgBD,EAAU,kDAAmD,EAAE,CAAE,WA+I7E,MAN6B,CACzBuC,OAvHW,CAGXC,gBAAiB,EAIjBC,qBAAsB,CAClBC,YAAa,CACT,yBACA,yBACA,eACH,CACDC,OAAQ,CACJ,sBACA,sBACA,YACH,CACDC,OAAQ,CACJ,mBACA,mBACA,SACH,CACDC,KAAM,CACF,mBACA,mBACA,SACH,CACDC,IAAK,CACD,eACA,YACA,gBACH,CACDC,KAAM,CACF,yBACA,YACA,gBACH,CACDC,MAAO,CACH,QACA,KACA,SACH,CACDC,KAAM,CACF,KACA,KACA,MACH,AACL,CAEJ,EAsEIC,eAjEmB,CACnBC,KAAM,CAAC,EACPC,OAAQ,CAAC,EACTC,KAAM,CAAC,EACPC,WAAY,CAAC,EACbC,UAAW,CAAC,EACZC,OAAQ,CACJhB,gBAAiB,EACrB,EACAiB,YAAa,CACTjB,gBAAiB,EACrB,EACAkB,YAAa,CACTlB,gBAAiB,EACrB,EACAJ,KAAM,CACFI,gBAAiB,CACrB,EACAN,IAAK,CACDM,gBAAiB,CAErB,EACAmB,WAAY,CACRnB,gBAAiB,EACrB,CACJ,EAyCIoB,MAnCU,CACV,CACI,cACA,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAI,CAC3C,CAAE,CACC,SACA,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAG,CACxB,CAAE,CACC,SACA,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAG,CACxB,CAAE,CACC,OACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG,CACzB,CAAE,CACC,MACA,CAAC,EAAE,CACN,CAAE,CACC,OACA,CAAC,EAAE,CACN,CAAE,CACC,QACA,CAAC,EAAG,EAAG,EAAE,CACZ,CAAE,CACC,OACA,KACH,CACJ,AAUD,CAGJ,GACA3D,EAAgBD,EAAU,yDAA0D,CAACA,CAAQ,CAAC,kDAAkD,CAAEA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAU6D,CAAoB,CAAEC,CAAC,CAAEjD,CAAC,MAiB3OkD,EAPJ,GAAM,CAAEC,SAAAA,CAAQ,CAAE,CAAGF,EACf,CAAEG,SAAAA,CAAQ,CAAEhD,OAAAA,CAAM,CAAEiD,MAAAA,CAAK,CAAEC,KAAAA,CAAI,CAAEC,WAAAA,CAAU,CAAE,CAAGvD,EAoBtD,SAASwD,EAAcC,CAAC,EACpB,IAAMC,EAAO,IAAI,CAAEC,EAASD,EAAKC,MAAM,CAEvCA,EAAO5C,OAAO,CAAC,SAAU4C,CAAM,EAC3BA,EAAOhC,eAAe,CAAG,KAAK,CAClC,GACAgC,EAAO5C,OAAO,CAAC,SAAU4C,CAAM,EAC3BA,EAAOhC,eAAe,CAAI+B,EAAKE,kBAAkB,EAC7CF,EAAKE,kBAAkB,GACvBD,EAAOhC,eAAe,EACtBgC,CAAAA,EAAOE,YAAY,CAAG,CAAA,CAAG,EAI7BF,EAAOH,aAAa,CAAC,CAAC,CAACC,EAAEK,kBAAkB,CAC/C,EACJ,CAuBA,SAASF,IACL,IAAMD,EAAS,IAAI,CAACA,MAAM,CACtBI,EAAIJ,EAAOlD,MAAM,CAAEkB,EAAkB,EAAGqC,EAAa,CAAA,EAAOC,EAAYC,EAE5E,KAAOH,KACHG,CAAAA,EAAYP,CAAM,CAACI,EAAE,CAACI,OAAO,CAACC,YAAY,AAAD,IAIrCzC,EAAkB0C,KAAKC,GAAG,CAAC3C,EAE3B2B,EAAKY,EAAUvC,eAAe,CAAEqB,EAAqBtB,MAAM,CAACC,eAAe,GAC3EsC,EAAa,AAACN,CAAAA,CAAM,CAACI,EAAE,CAACQ,cAAc,EAAIZ,CAAM,CAACI,EAAE,CAACS,IAAI,AAAD,EAAG/D,MAAM,CAG5DkD,CAAAA,CAAM,CAACI,EAAE,CAACpC,eAAe,EACxBsC,EACI,IAAI,CAACQ,KAAK,CAACC,SAAS,CAAG/C,GAC3BsC,GAAcC,EAAUS,MAAM,GAC/BX,CAAAA,EAAa,CAAA,CAAG,GAI5B,OAAOA,EAAarC,EAAkB,CAC1C,CAOA,SAASiD,IACL,IAAI,CAACjB,MAAM,CAAC5C,OAAO,CAAC,SAAU4C,CAAM,EAChCA,EAAOE,YAAY,CAAG,CAAA,CAC1B,EACJ,CAgBA,SAASgB,EAAgBT,CAAY,CAAEU,CAAM,MAErCf,EASJ,GARAe,EAASxB,EAAKwB,EAAQ,CAAA,GACjBV,GACDA,CAAAA,EAAe,CACXO,OAAQ,CAAA,EACR5B,MAAO,IACX,CAAA,EAGA,IAAI,YAAYG,EAEhB,IADAa,EAAI,IAAI,CAACJ,MAAM,CAAClD,MAAM,CACfsD,KACH,IAAI,CAACJ,MAAM,CAACI,EAAE,CAACgB,MAAM,CAAC,CAClBX,aAAcA,CAClB,EAAG,CAAA,QAKP,IAAI,CAACK,KAAK,CAACN,OAAO,CAACR,MAAM,CAAC5C,OAAO,CAAC,SAAUiE,CAAa,EAErDA,EAAcZ,YAAY,CAAG,AAAwB,WAAxB,OAAOA,EAChCA,EACAf,EAAMe,EAAcY,EAAcZ,YAAY,CACtD,EAGAV,CA5BS,IAAI,CA4BRuB,OAAO,EACZvB,CAAAA,AA7BS,IAAI,CA6BRuB,OAAO,CAACC,KAAK,CAAG,KAAK,CAAA,EAE1BJ,GACA,IAAI,CAACL,KAAK,CAACK,MAAM,EAEzB,CAUA,MAJoC,CAChCK,QAhHJ,SAASA,EAAQC,CAAS,EACtBlC,EAAkBkC,EACd7B,EAAWJ,EAAUgC,KACrB/B,EAASgC,EAAW,gBAAiBR,GAGrCxB,EAASgC,EAAW,kBAAmB5B,GACvCpD,EAAOgF,EAAUC,SAAS,CAAE,CACxB7B,cAAAA,EACAI,mBAAAA,EACAiB,gBAAAA,CACJ,GAER,CAoGA,CAGJ,GACAzF,EAAgBD,EAAU,2DAA4D,CAACA,CAAQ,CAAC,mDAAmD,CAAEA,CAAQ,CAAC,kDAAkD,CAAEA,CAAQ,CAAC,4BAA4B,CAAEA,CAAQ,CAAC,mBAAmB,CAAEA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUY,CAAqB,CAAEiD,CAAoB,CAAEsC,CAAY,CAAEC,CAAC,CAAEtC,CAAC,CAAEuC,CAAc,CAAExF,CAAC,EAUvd,GAAM,CAAEmD,SAAAA,CAAQ,CAAE,CAAGF,EACf,CAAEU,OAAQ,CAAE0B,UAAWI,CAAW,CAAE,CAAE,CAAGD,EACzC,CAAEpC,SAAAA,CAAQ,CAAEsC,QAAAA,CAAO,CAAEC,MAAAA,CAAK,CAAEvF,OAAAA,CAAM,CAAEC,SAAAA,CAAQ,CAAEgD,MAAAA,CAAK,CAAEC,KAAAA,CAAI,CAAEC,WAAAA,CAAU,CAAE,CAAGvD,EAM1E4F,EAAqBH,EAAYI,cAAc,CAqGrD,SAASrC,EAAcM,CAAkB,MA5FVgC,MAoHvB/B,EAAGgC,EAvBP,IAAqBtB,EAAQd,AAAd,IAAI,CAAiBc,KAAK,CAAEN,EAAUR,AAAtC,IAAI,CAAyCQ,OAAO,CAAE6B,EAAsB7B,EAAQC,YAAY,CAAE6B,EAAkBtC,AAAmB,CAAA,IAAnBA,AAApH,IAAI,CAAuHuC,OAAO,EAAcF,GAC3J1C,EAAK0C,EAAoBG,OAAO,CAAE1B,EAAMN,OAAO,CAACiC,OAAO,EAAGC,EAAe1C,AAD9D,IAAI,CACiE0C,YAAY,GAAIC,EAAmB,IAAI,CAACC,mBAAmB,CAC3IA,EAAqBC,EAAaC,EAAuB,CAAA,EAEzDR,GAAmB,CAACtC,AAJT,IAAI,CAIY+C,cAAc,EACzC/C,CAAAA,AALW,IAAI,CAKR+C,cAAc,CAAGD,EAAuB,CAAA,CAAG,EAItD,IAAME,EAAOC,AAAiD,CAAA,GAkVvD,CAAEjD,CAAAA,AA3VM,IAAI,CA2VHkD,WAAW,EACvB,CAAClD,AA5VU,IAAI,CA4VPmD,OAAO,EACf,CAACnD,AA7VU,IAAI,CA6VPoD,KAAK,CAACD,OAAO,EACrB,CAACnD,AA9VU,IAAI,CA8VPqD,KAAK,CAACF,OAAO,EACrB,CAtVkChD,CAsV7B,GAtV8D,CAACmC,EAKxE,GAHIQ,GACA9C,CAAAA,AAZW,IAAI,CAYR+C,cAAc,CAAG,CAAA,CAAI,EAE5BC,EACA,OAEJhD,AAjBe,IAAI,CAiBZsD,kBAAkB,GACzB,IAAM1C,EAAiByB,EAAoBkB,QAAQ,CAC/CvD,AAnBW,IAAI,CAmBRwD,KAAK,CACZxD,AApBW,IAAI,CAoBRY,cAAc,CAAE6C,EAAiBpB,EAAoBkB,QAAQ,CACpEvD,AArBW,IAAI,CAqBR0D,KAAK,CACZ1D,AAtBW,IAAI,CAsBRyD,cAAc,CAAE1C,EAAYD,EAAMC,SAAS,CAAEqC,EAAQpD,AAtBjD,IAAI,CAsBoDoD,KAAK,CAAE9B,EAAU8B,EAAM5C,OAAO,CAACc,OAAO,CAAEtD,EAAkBgC,AAtBlH,IAAI,CAsBqHhC,eAAe,CAIvJ,GAAIA,GACA4C,GACAA,EAAe9D,MAAM,EACrBiE,EAAW,CACXqB,EAAiB,CAAA,EAEjBpC,AAhCW,IAAI,CAgCRmD,OAAO,CAAG,CAAA,EACjBnD,AAjCW,IAAI,CAiCR2D,MAAM,CAAG,KAChB,IAAMC,EAAWR,EAAMS,WAAW,GAAIC,EAAOF,EAASG,GAAG,CAAEC,EAAOJ,EAASjD,GAAG,CAAEsD,EAAsB,AAAC3C,GACnG8B,EAAM9B,OAAO,EACb8B,EAAM9B,OAAO,CAAC4C,sBAAsB,CAACJ,EAAME,EApCpC,IAAI,GAoCkD,EAAGG,EAAW,AAACnG,EAAmBgG,CAAAA,EAAOF,CAAG,EAAK/C,EAC9GkD,EAAqBG,EAAiBhB,EAAMiB,YAAY,CAAC1C,EAAa2C,SAAS,CAAC5C,SAAS,CAAC6C,yBAAyB,CAACJ,EAAU9B,EAAoBjD,KAAK,EACvJC,EAAqBD,KAAK,EAE9BsB,KAAKqD,GAAG,CAACD,EAAMlD,CAAc,CAAC,EAAE,EAAGF,KAAKC,GAAG,CAACqD,EAAMpD,CAAc,CAACA,EAAe9D,MAAM,CAAG,EAAE,EAAGsG,EAAM5C,OAAO,CAACgE,WAAW,CAAE5D,EAAgBZ,AAxC9H,IAAI,CAwCiIyE,iBAAiB,EAAGC,EAAc5C,EAAY6C,SAAS,CAAC5I,KAAK,CAxClM,IAAI,CAwCuM,CAClN6E,EACA6C,EACAW,EACA/B,EAAoBuC,aAAa,CACpC,EACGzC,EAAeuC,EAAYvC,YAAY,CAAE0C,EAAeH,EAAYG,YAAY,CAAEC,EAAU,EAchG,IAXIzC,GACAA,EAAoB0C,QAAQ,EAC5B5C,EAAarF,MAAM,GACnBuF,EAAoB2C,WAAW,CAAG,aAClC3C,EAAoB4C,MAAM,CAAG,SAC7B5C,EAAoB6C,UAAU,CAAG,YACjClD,EAAM,GAAI,CAAA,EAAOlB,EAAO,CACpB,wBAAyB,yBAC7B,IAGCV,EAAI,EAAGA,EAAIgE,EAAetH,MAAM,CAAEsD,IAK9BgE,EAAee,IAAI,CAACC,aAAa,EAClChB,AAAiD,KAAjDA,EAAee,IAAI,CAACC,aAAa,CAACC,OAAO,CAACjF,IAC1C0E,CAAAA,EAAUpE,KAAKC,GAAG,CAACyD,CAAc,CAAChE,EAAE,CAAGgE,CAAc,CAAChE,EAAI,EAAE,CAAE0E,EAAO,CAI7ElC,CADAA,CAAAA,EAAsBwB,EAAee,IAAI,AAAD,EACpBL,OAAO,CAAGA,EAC9B9E,AAxEW,IAAI,CAwERyE,iBAAiB,CAAGL,EAAee,IAAI,CAACG,UAAU,CACzDtF,AAzEW,IAAI,CAyERuF,QAAQ,CAAGb,EAAYa,QAAQ,CACtCvF,AA1EW,IAAI,CA0ER4C,mBAAmB,CAAGA,EAC7B4C,AAzIR,SAAsBxF,CAAM,CAAEmC,CAAY,CAAE6B,CAAI,EAC5C,IAAMxD,EAAUR,EAAOQ,OAAO,CAAE6B,EAAsB7B,EAAQC,YAAY,CAAE6E,EAActF,EAAO4C,mBAAmB,EAAI5C,EAAO4C,mBAAmB,CAACkC,OAAO,CAC1J,GAAI,CAAEzC,CAAAA,GACFrC,EAAOwD,KAAK,EACZ8B,GACAtF,EAAOuF,QAAQ,AAAD,EACd,OAEJ,IAAME,EAAuBtD,EAAarF,MAAM,CAAG,EAAGmI,EAAS5C,EAAoB4C,MAAM,CAAED,EAAc3C,EAAoB2C,WAAW,CAAEE,EAAa7C,EAAoB6C,UAAU,CACjLQ,EAAsBvD,EAAarF,MAAM,CAAG,EAAG6I,EAAmB,EAGtE,GAAIX,GAAehF,EAAOwD,KAAK,CAAC,EAAE,EAAIrB,CAAY,CAAC,EAAE,CAAE,KAG/CyD,CAFJD,CAAAA,IACA,IAAME,EAAa7F,EAAOuF,QAAQ,CAAC,EAAE,CAACO,KAAK,CAAEC,EAAc/F,EAAOuF,QAAQ,CAAC,EAAE,CAACzI,MAAM,CAEhFJ,EAASmJ,IAAenJ,EAASqJ,IACjCH,CAAAA,EAAgBC,EAAcE,CAAAA,EAAc,CAAA,CAAC,EAEjD5D,CAAY,CAAC,EAAE,CAAG,CAAA,CACd2D,MAAO3D,CAAY,CAAC,EAAE,CACtB6D,OAAQ7D,CAAY,CAAC,EAAE,CAAG,GAAMmD,EAChCW,IAAK9D,CAAY,CAAC,EAAE,CAAGmD,EACvBY,WAAYlG,EAAOwD,KAAK,CAAC,EAAE,CAC3B2C,UAAWP,GAAiB5F,EAAOwD,KAAK,CAACoC,EAAc,AAC3D,CAAA,CAAC,CAACZ,EAAY,AAClB,CAIA,GAAIS,EAAuB,GACvBP,GACAI,GACAnD,CAAY,CAACsD,EAAqB,EAAIzB,EAAOsB,EAAY,CACzDI,IACA,IAAMU,EAAiBpG,EAAOuF,QAAQ,CAACvF,EAAOuF,QAAQ,CAACzI,MAAM,CAAG,EAAE,CAACgJ,KAAK,AACxE3D,CAAAA,CAAY,CAACsD,EAAqB,CAAG,CAAA,CACjCK,MAAO3D,CAAY,CAACsD,EAAqB,CACzCO,OAAQ7D,CAAY,CAACsD,EAAqB,CAAG,GAAMH,EACnDW,IAAK9D,CAAY,CAACsD,EAAqB,CAAGH,EAC1CY,WAAYE,GAAkBpG,EAAOwD,KAAK,CAAC4C,EAAe,CAC1DD,UAAWnG,EAAOwD,KAAK,CAACxD,EAAOwD,KAAK,CAAC1G,MAAM,CAAG,EAAE,AACpD,CAAA,CAAC,CAACoI,EAAW,AACjB,CACA,GAAID,GAAUA,AAAW,UAAXA,EAAoB,CAC9B,IAAMoB,EAAiBf,EACnB,CAAA,CAAEU,OAAQ,GAAKC,IAAK,CAAE,CAAA,CAAC,CAAChB,EAAO,CAGnC,KAAOS,GAAuBC,GAC1BxD,CAAY,CAACuD,EAAoB,EAAIW,EACrCX,GAER,CACJ,EAQmB,IAAI,CA2EMvD,EAAc6B,GAC/BtB,IAtKJX,EAAQI,CAHeA,EA0KGA,EAvKN,CAAC,EAAE,GACvBzF,EAAS0G,AAsKUA,EAtKJW,GAAG,GAClBrH,EAAS0G,AAqKUA,EArKJkD,OAAO,GACtBnE,CAAY,CAAC,EAAE,CAAGiB,AAoKCA,EApKKW,GAAG,GACvB,CAAA,AAAC,CAAChC,EAAQqB,AAmKKA,EAnKC5C,OAAO,CAACuD,GAAG,GAC3BX,AAkKeA,EAlKTW,GAAG,EAAIX,AAkKEA,EAlKIkD,OAAO,EAC1BlD,AAiKeA,EAjKTW,GAAG,GAAKX,AAiKCA,EAjKKkD,OAAO,AAAD,GAC1BlD,CAAAA,AAgKeA,EAhKTW,GAAG,CAAGrD,KAAKqD,GAAG,CAAC5B,CAAY,CAAC,EAAE,CAAEiB,AAgKvBA,EAhK6BW,GAAG,CAAA,EAEnDX,AA8JmBA,EA9JbkD,OAAO,CAAG5F,KAAKqD,GAAG,CAAC5B,CAAY,CAAC,EAAE,CAAEiB,AA8JvBA,EA9J6BkD,OAAO,GAIvDvE,EAAQI,CAAY,CAACA,EAAarF,MAAM,CAAG,EAAE,GAC7CJ,EAAS0G,AAyJUA,EAzJJzC,GAAG,GAClBjE,EAAS0G,AAwJUA,EAxJJmD,OAAO,GACtBpE,CAAY,CAACA,EAAarF,MAAM,CAAG,EAAE,CAAGsG,AAuJrBA,EAvJ2BzC,GAAG,GAC7C,CAAA,AAAC,CAACoB,EAAQqB,AAsJKA,EAtJC5C,OAAO,CAACG,GAAG,GAC3BjE,EAAS0G,AAqJMA,EArJAmD,OAAO,GACtBnD,AAoJeA,EApJTzC,GAAG,EAAIyC,AAoJEA,EApJImD,OAAO,EAAKnD,AAoJhBA,EApJsBzC,GAAG,GAAKyC,AAoJ9BA,EApJoCmD,OAAO,AAAD,GACzDnD,CAAAA,AAmJeA,EAnJTzC,GAAG,CAAGD,KAAKC,GAAG,CAACwB,CAAY,CAACA,EAAarF,MAAM,CAAG,EAAE,CAAEsG,AAmJ7CA,EAnJmDzC,GAAG,CAAA,EAEzEyC,AAiJmBA,EAjJbmD,OAAO,CAAG7F,KAAKC,GAAG,CAACwB,CAAY,CAACA,EAAarF,MAAM,CAAG,EAAE,CAAEsG,AAiJ7CA,EAjJmDmD,OAAO,IAqJzElE,EAAoBkB,QAAQ,GAG5BvD,AApFO,IAAI,CAoFJwG,cAAc,CAAG3B,EAExB1C,EAAeU,AADfA,CAAAA,EAAc7C,AArFP,IAAI,CAqFUyG,QAAQ,CAACtE,EAAc0C,EAAczB,EAAMW,GAAG,CAAEX,EAAMzC,GAAG,CAAA,EACnD6C,KAAK,CAChCqB,EAAehC,EAAYa,KAAK,CAChC1D,AAxFO,IAAI,CAwFJ0G,SAAS,CAAG7D,EAAYiD,KAAK,EAGxC9F,AA3FW,IAAI,CA2FRY,cAAc,CAAGuB,EACxBnC,AA5FW,IAAI,CA4FRyD,cAAc,CAAGoB,CAC5B,MAEI7E,AA/FW,IAAI,CA+FRuF,QAAQ,CAAG,IAEtBvF,CAjGe,IAAI,CAiGZoC,cAAc,CAAGA,EACxBpC,AAlGe,IAAI,CAkGZ2G,qBAAqB,CACxB,AAAChE,CAAAA,GAAoBA,EAAiB2C,UAAU,AAAD,IAC1C1C,CAAAA,GAAuBA,EAAoB0C,UAAU,AAAD,CACjE,CA8BA,SAAShC,IAED,IAAI,CAACoB,WAAW,GAChB,IAAI,CAACA,WAAW,CAACtH,OAAO,CAAC,SAAUwJ,CAAK,CAAExG,CAAC,EACnCwG,GACA,CAAA,IAAI,CAAClC,WAAW,CAACtE,EAAE,CAAGwG,EAAMC,OAAO,CAC/BD,EAAMC,OAAO,GAAK,IAAG,CAEjC,EAAG,IAAI,EAKP,IAAI,CAACnC,WAAW,CAAC5H,MAAM,CAAG,EAC1B,OAAO,IAAI,CAAC0J,cAAc,CAElC,CAKA,SAAStE,IACLD,EAAmBlG,KAAK,CAAC,IAAI,EAG7B,IAAI,CAACuH,kBAAkB,GACvB,IAAI,CAACoB,WAAW,CAAG,IAAI,CAACtC,cAAc,CAAG,IAAI,CAACuB,MAAM,CAAG,IAC3D,CAMA,SAASmD,WACL,AAAI,IAAI,CAACC,EAAE,CAAC,aACD,QAEP,IAAI,CAACA,EAAE,CAAC,QACD,OAEP,IAAI,CAACA,EAAE,CAAC,OACD,MAKX,IAAI,CAACA,EAAE,CAAC,WACJ,IAAI,CAACvG,OAAO,CAACwG,UAAU,CAChB,MAEJ,SACX,CAoBA,SAASrC,EAAUnB,CAAK,CAAEE,CAAK,CAAEU,CAAc,CAAEQ,CAAa,EAC1D,IAAM5E,EAAS,IAAI,CAAEa,EAAOb,EAAOa,IAAI,CAAEoG,EAAcjH,EAAOQ,OAAO,EAAIR,EAAOQ,OAAO,CAACK,IAAI,CAAEsB,EAAe,EAAE,CAAE0C,EAAe,EAAE,CAAEU,EAAW,EAAE,CAAEjF,EAAakD,EAAM1G,MAAM,CAG5KoK,EAAc,CAAC,CAACxD,EAAOyD,EAAS,EAAE,CAAEC,EAAgBpH,EAAOoH,aAAa,CAAEC,EAAsBD,GAAiBA,EAActK,MAAM,CAAEwK,EAAwB,CAAC,IAAI,CAACC,MAAM,CAACH,GAAiB,CAAC,IAAI,EAAG7D,EAAY,IAAI,CAAC/C,OAAO,CAACC,YAAY,EACtO,IAAI,CAACD,OAAO,CAACC,YAAY,CAAC8C,QAAQ,CAClCiE,EAAQC,EAAQC,EAAUC,EAAM,EAAG7B,EAAQ,EACzC8B,EAAmB,AAAyB,YAAzB,OAAOhD,EAC5BA,EACAA,GAAiBxI,CAAqB,CAACwI,EAAc,CACjDxI,CAAqB,CAACwI,EAAc,CACpCxI,CAAqB,CAAE4D,EAAO8G,kBAAkB,EAAI9G,EAAO8G,kBAAkB,IACzE,UAAW,CAEvB,GAAIO,EAAqB,CACrB,IAAIxK,EAAMuK,EAActK,MAAM,CAC9B,KAAOD,KACHsK,EAAO5J,IAAI,CAAC,EAAE,CAEtB,MAEI4J,EAAO5J,IAAI,CAAC,EAAE,EAElB,IAAMsK,EAAYR,GAAuB,EACzC,IAAK,IAAIjH,EAAI,EAAGA,GAAKE,EAAYF,IAE7B,IAAIoD,CAAAA,CAAK,CAACpD,EAAE,CAAGgE,CAAc,CAAC,EAAE,AAAD,GAK/B,KAAO,AAAoC,KAAA,IAA5BA,CAAc,CAACuD,EAAM,EAAE,EAClCnE,CAAK,CAACpD,EAAE,EAAIgE,CAAc,CAACuD,EAAM,EAAE,EACnCvH,IAAME,GAAY,CAElBkH,EAASpD,CAAc,CAACuD,EAAI,CAC5B3H,EAAO8H,aAAa,CAAG,CACnBhC,MAAOvC,EAAWuC,EAAS9F,EAAO0G,SAAS,CAAGZ,EAC9ChJ,OAAQqK,CAAM,CAAC,EAAE,CAACrK,MAAM,CACxB+I,WAAY2B,CAChB,EACAE,EAAWE,EAAgB7L,KAAK,CAACiE,EAAQmH,GAMrCnH,EAAO+H,UAAU,EAAI,CAAChG,EAAQ/B,EAAO8H,aAAa,CAACtH,OAAO,IAE1DR,EAAO8H,aAAa,CAACtH,OAAO,CAAGd,EAAMM,EAAO+H,UAAU,CAACrG,SAAS,CAC3DsG,eAAe,CAAC3K,IAAI,CAAC,CAAE2C,OAAQA,CAAO,EAAGA,EAAOQ,OAAO,CAACK,IAAI,CAACb,EAAO0G,SAAS,CAAGZ,EAAM,GAG3FwB,EAAsBlK,OAAO,CAAC,SAAU6K,CAAG,EACvC,OAAOjI,EAAO8H,aAAa,CAACtH,OAAO,CAACyH,EAAI,AAC5C,IAGoB,KAAA,IAAbP,IACPvF,EAAa5E,IAAI,CAACiK,GAClB3C,EAAatH,IAAI,CAACmK,GAClBnC,EAAShI,IAAI,CAACyC,EAAO8H,aAAa,GAGtChC,EAAQ1F,EACR,IAAK,IAAI8H,EAAI,EAAGA,EAAIL,EAAWK,IAC3Bf,CAAM,CAACe,EAAE,CAACpL,MAAM,CAAG,EACnBqK,CAAM,CAACe,EAAE,CAACjL,QAAQ,CAAG,CAAA,EAKzB,GAFA0K,GAAO,EAEHvH,IAAME,EACN,KAER,CAEA,GAAIF,IAAME,EACN,MAIJ,GAAI8G,EAAe,KAOXe,EANJ,IAAMC,EAASpI,EAAOQ,OAAO,CAACC,YAAY,EACtCT,EAAOQ,OAAO,CAACC,YAAY,CAAC8C,QAAQ,CACpCnD,EAAIJ,EAAO0G,SAAS,CAAGtG,EAAIwG,EAAQ,AAAC/F,GAAQA,CAAI,CAACuH,EAAM,EACvDpI,EAAO+H,UAAU,CAACrG,SAAS,CAAC2G,YAAY,CAACtM,KAAK,CAAC,CAC3CiE,OAAQA,CACZ,EAAG,CAACiH,CAAW,CAACmB,EAAM,CAAC,EAE3B,IAAK,IAAIF,EAAI,EAAGA,EAAIb,EAAqBa,IAEjCxL,EADJyL,EAAMvB,CAAK,CAACQ,CAAa,CAACc,EAAE,CAAC,EAEzBf,CAAM,CAACe,EAAE,CAAC3K,IAAI,CAAC4K,GAEF,OAARA,GACLhB,CAAAA,CAAM,CAACe,EAAE,CAACjL,QAAQ,CAAG,CAAA,CAAG,CAGpC,MAGQP,EADJ+K,EAASP,EAAcxD,CAAK,CAACtD,EAAE,CAAG,MAE9B+G,CAAM,CAAC,EAAE,CAAC5J,IAAI,CAACkK,GAEC,OAAXA,GACLN,CAAAA,CAAM,CAAC,EAAE,CAAClK,QAAQ,CAAG,CAAA,CAAG,EAIpC,MAAO,CACHkF,aAAAA,EACA0C,aAAAA,EACAU,SAAAA,CACJ,CACJ,CAMA,SAAS+C,EAAkBxI,CAAC,EACxB,IAAMU,EAAUV,EAAEU,OAAO,CAAE+H,EAAO,IAAI,CAACA,IAAI,CAAEC,EAAc,IAAI,CAAC1H,KAAK,CAACN,OAAO,CAACgI,WAAW,CAGzFC,EAAe,IAAI,CAACC,qBAAqB,EACrCrJ,EAAqBtB,MAAM,CAAGW,EAAiBW,EAAqBX,cAAc,CAClFiK,EAAiB/G,EAAE+G,cAAc,CAACH,WAAW,CAACD,EAAK,CAAC9H,YAAY,CACpE,GAAI+H,GAAgB9J,CAAAA,CAAc,CAAC6J,EAAK,EAAIE,CAAU,EAAI,CACtD,IAAMG,EAAgB,IAAI,CAAC9H,KAAK,CAAC8H,aAAa,CACzCD,GACDA,CAAAA,EAAiBjJ,EAAML,EAAqBtB,MAAM,CAAEW,CAAc,CAAC6J,EAAK,CAAA,EAE5E/H,EAAQC,YAAY,CAAGf,EAAM+I,EAAaE,EAAgBH,EAAYxI,MAAM,EAAIwI,EAAYxI,MAAM,CAACS,YAAY,CAE/G+H,CAAW,CAACD,EAAK,CAAC9H,YAAY,CAAE,IAAI,CAACoI,WAAW,CAACpI,YAAY,CAAE,CAACD,EAAQsI,UAAU,EAC9EF,GACAlM,EAASkM,EAAcG,QAAQ,GAC/BH,EAAcI,aAAa,CAACJ,EAAcG,QAAQ,CAAC,CAACtI,YAAY,CACxE,CACJ,CAqBA,MALsC,CAClCe,QA9PJ,SAASA,EAAQyH,CAAW,EACxB,IAAMC,EAAaD,EAAYvH,SAAS,CAACqG,UAAU,CAC/CnI,EAAWJ,EAAUgC,KAGrB/B,EAASyJ,EAAY,SAAU,WAC3B,GAAI,IAAI,CAACC,SAAS,CAEd,OADAnH,EAAM,GAAI,CAAA,EAAO,IAAI,CAAChC,MAAM,CAACc,KAAK,EAC3B,CAAA,CAEf,GACArB,EAASwJ,EAAa,kBAAmBX,GACzC7I,EAASwJ,EAAa,UAAW3F,GACjC7G,EAAOwM,EAAYvH,SAAS,CAAE,CAC1B7B,cAAAA,EACAyD,mBAAAA,EACApB,eAAAA,EACA4E,mBAAAA,EACAnC,UAAAA,CACJ,GAER,EA0OIA,UAAAA,CACJ,CAGJ,GACAlJ,EAAgBD,EAAU,0CAA2C,CAACA,CAAQ,CAAC,yDAAyD,CAAEA,CAAQ,CAAC,kDAAkD,CAAEA,CAAQ,CAAC,2DAA2D,CAAEA,CAAQ,CAAC,qBAAqB,CAAEA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAU4N,CAA2B,CAAE/J,CAAoB,CAAEgK,CAA6B,CAAEC,CAAC,CAAEhK,CAAC,CAAEjD,CAAC,EAUzc,GAAM,CAAEkN,OAAAA,CAAM,CAAE,CAAGD,EACb,CAAE9J,SAAAA,CAAQ,CAAE,CAAGF,EACf,CAAEG,SAAAA,CAAQ,CAAEhD,OAAAA,CAAM,CAAEC,SAAAA,CAAQ,CAAEiD,KAAAA,CAAI,CAAEC,WAAAA,CAAU,CAAE,CAAGvD,EAsBzD,SAASmN,EAAyB1J,CAAC,EAC/B,IAAMgB,EAAQ,IAAI,CAACA,KAAK,CAAE2I,EAAO3I,EAAM2I,IAAI,CAAEC,EAAc5J,EAAE4J,WAAW,CAAE1J,EAAS0J,EAAY1J,MAAM,CAAE4G,EAAQ8C,EAAY9C,KAAK,CAAEpG,EAAUR,EAAOQ,OAAO,CAAEmJ,EAAiB3J,EAAO2J,cAAc,CAAEtH,EAAsB7B,EAAQC,YAAY,CAAE2C,EAAQpD,EAAOoD,KAAK,CAChQwG,EAAcD,EAAeC,WAAW,CAAEC,EAAgBjH,EAAqB3E,EAAsB6L,EAAcC,EAAcC,EAAeL,CAAc,CAAC7J,EAAEmK,QAAQ,CAAG,eAAiB,eAAe,CAEhN,GAAI7G,GACAA,AAAuB,aAAvBA,EAAM5C,OAAO,CAAC+H,IAAI,EAClBlG,GACA3F,EAASgN,EAAYzB,GAAG,EAAG,CAE3BrF,EAAsB5C,EAAO4C,mBAAmB,CAChD3E,EAAuBoE,EAAoBpE,oBAAoB,EAE3DoB,EAAqBtB,MAAM,CAACE,oBAAoB,CAGhD2E,GACAkH,EAAe7L,CAAoB,CAAC2E,EAAoBsH,QAAQ,CAAC,CAC7DtH,AAA8B,IAA9BA,EAAoBuH,KAAK,CACzBP,EAAcE,CAAY,CAAC,EAAE,EAG7BF,EAAcE,CAAY,CAAC,EAAE,CAC7BD,EAAiBC,CAAY,CAAC,EAAE,GAM/B,CAACF,GAAe3L,GAAwBmF,EAAMgH,QAAQ,EAC3DR,CAAAA,EAAcxG,EAAMgH,QAAQ,CAACC,cAAc,CAACX,EAAYY,CAAC,CAAEX,EAAe1L,oBAAoB,CAAA,EAElG,IAAM4H,EAAalG,EAAKK,EAAOuF,QAAQ,EAAE,CAACqB,EAAMwB,KAAK,CAAC,CAACvC,WAAY6D,EAAYzB,GAAG,EAAGsC,EAAW1E,EAAajD,GAAqB0C,WAAa,EAC/IyE,EAAeN,EAAKe,UAAU,CAACZ,EAAa/D,GACxCgE,GACAE,CAAAA,GAAgBN,EAAKe,UAAU,CAACX,EAAgBU,EAAQ,EAGxDvK,EAAOc,KAAK,CAAC2J,UAAU,EACvBT,CAAAA,EAAe,IAAI,CAACU,gBAAgB,CAACV,EAAY,EAGrDlK,EAAE6K,IAAI,CAAGpB,EAAOS,EAAc,CAC1BpD,MAAOnK,EAAOiN,EAAY9C,KAAK,CAAE,CAAEqB,IAAK8B,CAAa,GACrD/J,OAAQA,CACZ,EAAGc,GACHhB,EAAE8K,cAAc,EACpB,CACJ,CAMA,IAAMC,EAA0B,CAC5BrJ,QAnEJ,SAASA,EAAQC,CAAS,CAAEwH,CAAW,CAAE6B,CAAY,EACjD1B,EAA4B5H,OAAO,CAACC,GACpC4H,EAA8B7H,OAAO,CAACyH,GAClC6B,GACAlL,EAAWJ,EAAUgC,IACrB/B,EAASqL,EAAc,kBAAmBtB,EAElD,EA6DI7E,UAAW0E,EAA8B1E,SAAS,AACtD,EAgXA,OAAOkG,CACX,GACApP,EAAgBD,EAAU,sCAAuC,CAACA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,mDAAmD,CAAEA,CAAQ,CAAC,mDAAmD,CAAEA,CAAQ,CAAC,0CAA0C,CAAC,CAAE,SAAUF,CAAU,CAAE4B,CAAqB,CAAEd,CAAqB,CAAE2O,CAAY,EAG7VC,AADU1P,EACRmF,YAAY,CAAG,CACbwK,sBAAuB/N,EACvBgO,eAAgB9O,CACpB,EACA2O,EAAavJ,OAAO,CAACwJ,AALX1P,EAKa6P,IAAI,CAAEH,AALnB1P,EAKqB8P,MAAM,CAAEJ,AAL7B1P,EAK+B+P,OAAO,CAEpD,EACJ"}