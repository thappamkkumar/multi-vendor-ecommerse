{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Gantt JS v11.3.0 (2024-01-10)\n *\n * GridAxis\n *\n * (c) 2016-2024 Lars A. V. Cabrera\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/grid-axis', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/GridAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Axis, H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed, dateFormats } = H;\n        const { addEvent, defined, erase, find, isArray, isNumber, merge, pick, pushUnique, timeUnits, wrap } = U;\n        /* *\n         *\n         *  Enums\n         *\n         * */\n        /**\n         * Enum for which side the axis is on. Maps to axis.side.\n         * @private\n         */\n        var GridAxisSide;\n        (function (GridAxisSide) {\n            GridAxisSide[GridAxisSide[\"top\"] = 0] = \"top\";\n            GridAxisSide[GridAxisSide[\"right\"] = 1] = \"right\";\n            GridAxisSide[GridAxisSide[\"bottom\"] = 2] = \"bottom\";\n            GridAxisSide[GridAxisSide[\"left\"] = 3] = \"left\";\n        })(GridAxisSide || (GridAxisSide = {}));\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function argsToArray(args) {\n            return Array.prototype.slice.call(args, 1);\n        }\n        /**\n         * @private\n         */\n        function isObject(x) {\n            // Always use strict mode\n            return U.isObject(x, true);\n        }\n        /**\n         * @private\n         */\n        function applyGridOptions(axis) {\n            const options = axis.options;\n            // Center-align by default\n            /*\n            if (!options.labels) {\n                options.labels = {};\n            }\n            */\n            options.labels.align = pick(options.labels.align, 'center');\n            // @todo: Check against tickLabelPlacement between/on etc\n            /* Prevents adding the last tick label if the axis is not a category\n               axis.\n               Since numeric labels are normally placed at starts and ends of a\n               range of value, and this module makes the label point at the value,\n               an \"extra\" label would appear. */\n            if (!axis.categories) {\n                options.showLastLabel = false;\n            }\n            // Prevents rotation of labels when squished, as rotating them would not\n            // help.\n            axis.labelRotation = 0;\n            options.labels.rotation = 0;\n            // Allow putting ticks closer than their data points.\n            options.minTickInterval = 1;\n        }\n        /**\n         * Extends axis class with grid support.\n         * @private\n         */\n        function compose(AxisClass, ChartClass, TickClass) {\n            if (pushUnique(composed, compose)) {\n                AxisClass.keepProps.push('grid');\n                AxisClass.prototype.getMaxLabelDimensions = getMaxLabelDimensions;\n                wrap(AxisClass.prototype, 'unsquish', wrapUnsquish);\n                wrap(AxisClass.prototype, 'getOffset', wrapGetOffset);\n                // Add event handlers\n                addEvent(AxisClass, 'init', onInit);\n                addEvent(AxisClass, 'afterGetTitlePosition', onAfterGetTitlePosition);\n                addEvent(AxisClass, 'afterInit', onAfterInit);\n                addEvent(AxisClass, 'afterRender', onAfterRender);\n                addEvent(AxisClass, 'afterSetAxisTranslation', onAfterSetAxisTranslation);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions2);\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                addEvent(AxisClass, 'afterTickSize', onAfterTickSize);\n                addEvent(AxisClass, 'trimTicks', onTrimTicks);\n                addEvent(AxisClass, 'destroy', onDestroy);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                addEvent(TickClass, 'labelFormat', onTickLabelFormat);\n            }\n            return AxisClass;\n        }\n        /**\n         * Get the largest label width and height.\n         *\n         * @private\n         * @function Highcharts.Axis#getMaxLabelDimensions\n         *\n         * @param {Highcharts.Dictionary<Highcharts.Tick>} ticks\n         * All the ticks on one axis.\n         *\n         * @param {Array<number|string>} tickPositions\n         * All the tick positions on one axis.\n         *\n         * @return {Highcharts.SizeObject}\n         * Object containing the properties height and width.\n         *\n         * @todo Move this to the generic axis implementation, as it is used there.\n         */\n        function getMaxLabelDimensions(ticks, tickPositions) {\n            const dimensions = {\n                width: 0,\n                height: 0\n            };\n            tickPositions.forEach(function (pos) {\n                const tick = ticks[pos];\n                let labelHeight = 0, labelWidth = 0, label;\n                if (isObject(tick)) {\n                    label = isObject(tick.label) ? tick.label : {};\n                    // Find width and height of label\n                    labelHeight = label.getBBox ? label.getBBox().height : 0;\n                    if (label.textStr && !isNumber(label.textPxLength)) {\n                        label.textPxLength = label.getBBox().width;\n                    }\n                    labelWidth = isNumber(label.textPxLength) ?\n                        // Math.round ensures crisp lines\n                        Math.round(label.textPxLength) :\n                        0;\n                    if (label.textStr) {\n                        // Set the tickWidth same as the label width after ellipsis\n                        // applied #10281\n                        labelWidth = Math.round(label.getBBox().width);\n                    }\n                    // Update the result if width and/or height are larger\n                    dimensions.height = Math.max(labelHeight, dimensions.height);\n                    dimensions.width = Math.max(labelWidth, dimensions.width);\n                }\n            });\n            // For tree grid, add indentation\n            if (this.options.type === 'treegrid' &&\n                this.treeGrid &&\n                this.treeGrid.mapOfPosToGridNode) {\n                const treeDepth = this.treeGrid.mapOfPosToGridNode[-1].height || 0;\n                dimensions.width += (this.options.labels.indentation *\n                    (treeDepth - 1));\n            }\n            return dimensions;\n        }\n        /**\n         * Handle columns and getOffset.\n         * @private\n         */\n        function wrapGetOffset(proceed) {\n            const { grid } = this, \n            // On the left side we handle the columns first because the offset is\n            // calculated from the plot area and out\n            columnsFirst = this.side === 3;\n            if (!columnsFirst) {\n                proceed.apply(this);\n            }\n            if (!grid?.isColumn) {\n                let columns = grid?.columns || [];\n                if (columnsFirst) {\n                    columns = columns.slice().reverse();\n                }\n                columns\n                    .forEach((column) => {\n                    column.getOffset();\n                });\n            }\n            if (columnsFirst) {\n                proceed.apply(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterGetTitlePosition(e) {\n            const axis = this;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                // compute anchor points for each of the title align options\n                const { axisTitle, height: axisHeight, horiz, left: axisLeft, offset, opposite, options, top: axisTop, width: axisWidth } = axis;\n                const tickSize = axis.tickSize();\n                const titleWidth = axisTitle && axisTitle.getBBox().width;\n                const xOption = options.title.x;\n                const yOption = options.title.y;\n                const titleMargin = pick(options.title.margin, horiz ? 5 : 10);\n                const titleFontSize = axisTitle ? axis.chart.renderer.fontMetrics(axisTitle).f : 0;\n                const crispCorr = tickSize ? tickSize[0] / 2 : 0;\n                // TODO account for alignment\n                // the position in the perpendicular direction of the axis\n                const offAxis = ((horiz ? axisTop + axisHeight : axisLeft) +\n                    (horiz ? 1 : -1) * // horizontal axis reverses the margin\n                        (opposite ? -1 : 1) * // so does opposite axes\n                        crispCorr +\n                    (axis.side === GridAxisSide.bottom ? titleFontSize : 0));\n                e.titlePosition.x = horiz ?\n                    axisLeft - (titleWidth || 0) / 2 - titleMargin + xOption :\n                    offAxis + (opposite ? axisWidth : 0) + offset + xOption;\n                e.titlePosition.y = horiz ?\n                    (offAxis -\n                        (opposite ? axisHeight : 0) +\n                        (opposite ? titleFontSize : -titleFontSize) / 2 +\n                        offset +\n                        yOption) :\n                    axisTop - titleMargin + yOption;\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterInit() {\n            const axis = this;\n            const { chart, options: { grid: gridOptions = {} }, userOptions } = axis;\n            if (gridOptions.enabled) {\n                applyGridOptions(axis);\n            }\n            if (gridOptions.columns) {\n                const columns = axis.grid.columns = [];\n                let columnIndex = axis.grid.columnIndex = 0;\n                // Handle columns, each column is a grid axis\n                while (++columnIndex < gridOptions.columns.length) {\n                    const columnOptions = merge(userOptions, gridOptions.columns[columnIndex], {\n                        isInternal: true,\n                        linkedTo: 0,\n                        // Disable by default the scrollbar on the grid axis\n                        scrollbar: {\n                            enabled: false\n                        }\n                    }, \n                    // Avoid recursion\n                    {\n                        grid: {\n                            columns: void 0\n                        }\n                    });\n                    const column = new Axis(axis.chart, columnOptions, 'yAxis');\n                    column.grid.isColumn = true;\n                    column.grid.columnIndex = columnIndex;\n                    // Remove column axis from chart axes array, and place it\n                    // in the columns array.\n                    erase(chart.axes, column);\n                    erase(chart[axis.coll] || [], column);\n                    columns.push(column);\n                }\n            }\n        }\n        /**\n         * Draw an extra line on the far side of the outermost axis,\n         * creating floor/roof/wall of a grid. And some padding.\n         * ```\n         * Make this:\n         *             (axis.min) __________________________ (axis.max)\n         *                           |    |    |    |    |\n         * Into this:\n         *             (axis.min) __________________________ (axis.max)\n         *                        ___|____|____|____|____|__\n         * ```\n         * @private\n         */\n        function onAfterRender() {\n            const axis = this, { axisTitle, grid, options } = axis, gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                const min = axis.min || 0, max = axis.max || 0, firstTick = axis.ticks[axis.tickPositions[0]];\n                // Adjust the title max width to the column width (#19657)\n                if (axisTitle &&\n                    !axis.chart.styledMode &&\n                    firstTick?.slotWidth &&\n                    !axis.options.title.style.width) {\n                    axisTitle.css({ width: `${firstTick.slotWidth}px` });\n                }\n                // @todo acutual label padding (top, bottom, left, right)\n                axis.maxLabelDimensions = axis.getMaxLabelDimensions(axis.ticks, axis.tickPositions);\n                // Remove right wall before rendering if updating\n                if (axis.rightWall) {\n                    axis.rightWall.destroy();\n                }\n                /*\n                Draw an extra axis line on outer axes\n                            >\n                Make this:    |______|______|______|___\n\n                            > _________________________\n                Into this:    |______|______|______|__|\n                                                        */\n                if (axis.grid && axis.grid.isOuterAxis() && axis.axisLine) {\n                    const lineWidth = options.lineWidth;\n                    if (lineWidth) {\n                        const linePath = axis.getLinePath(lineWidth), startPoint = linePath[0], endPoint = linePath[1], \n                        // Negate distance if top or left axis\n                        // Subtract 1px to draw the line at the end of the tick\n                        tickLength = (axis.tickSize('tick') || [1])[0], distance = (tickLength - 1) * ((axis.side === GridAxisSide.top ||\n                            axis.side === GridAxisSide.left) ? -1 : 1);\n                        // If axis is horizontal, reposition line path vertically\n                        if (startPoint[0] === 'M' && endPoint[0] === 'L') {\n                            if (axis.horiz) {\n                                startPoint[2] += distance;\n                                endPoint[2] += distance;\n                            }\n                            else {\n                                startPoint[1] += distance;\n                                endPoint[1] += distance;\n                            }\n                        }\n                        // If it doesn't exist, add an upper and lower border\n                        // for the vertical grid axis.\n                        if (!axis.horiz && axis.chart.marginRight) {\n                            const upperBorderStartPoint = startPoint, upperBorderEndPoint = [\n                                'L',\n                                axis.left,\n                                startPoint[2] || 0\n                            ], upperBorderPath = [\n                                upperBorderStartPoint,\n                                upperBorderEndPoint\n                            ], lowerBorderEndPoint = [\n                                'L',\n                                axis.chart.chartWidth - axis.chart.marginRight,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderStartPoint = [\n                                'M',\n                                endPoint[1] || 0,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderPath = [\n                                lowerBorderStartPoint,\n                                lowerBorderEndPoint\n                            ];\n                            if (!axis.grid.upperBorder && min % 1 !== 0) {\n                                axis.grid.upperBorder = axis.grid.renderBorder(upperBorderPath);\n                            }\n                            if (axis.grid.upperBorder) {\n                                axis.grid.upperBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.upperBorder.animate({\n                                    d: upperBorderPath\n                                });\n                            }\n                            if (!axis.grid.lowerBorder && max % 1 !== 0) {\n                                axis.grid.lowerBorder = axis.grid.renderBorder(lowerBorderPath);\n                            }\n                            if (axis.grid.lowerBorder) {\n                                axis.grid.lowerBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.lowerBorder.animate({\n                                    d: lowerBorderPath\n                                });\n                            }\n                        }\n                        // Render an extra line parallel to the existing axes, to\n                        // close the grid.\n                        if (!axis.grid.axisLineExtra) {\n                            axis.grid.axisLineExtra = axis.grid.renderBorder(linePath);\n                        }\n                        else {\n                            axis.grid.axisLineExtra.attr({\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth\n                            });\n                            axis.grid.axisLineExtra.animate({\n                                d: linePath\n                            });\n                        }\n                        // show or hide the line depending on options.showEmpty\n                        axis.axisLine[axis.showAxis ? 'show' : 'hide']();\n                    }\n                }\n                (grid && grid.columns || []).forEach((column) => column.render());\n                // Manipulate the tick mark visibility\n                // based on the axis.max- allows smooth scrolling.\n                if (!axis.horiz &&\n                    axis.chart.hasRendered &&\n                    (axis.scrollbar ||\n                        (axis.linkedParent && axis.linkedParent.scrollbar)) &&\n                    axis.tickPositions.length) {\n                    const tickmarkOffset = axis.tickmarkOffset, lastTick = axis.tickPositions[axis.tickPositions.length - 1], firstTick = axis.tickPositions[0];\n                    let label, tickMark;\n                    while ((label = axis.hiddenLabels.pop()) && label.element) {\n                        label.show(); // #15453\n                    }\n                    while ((tickMark = axis.hiddenMarks.pop()) &&\n                        tickMark.element) {\n                        tickMark.show(); // #16439\n                    }\n                    // Hide/show first tick label.\n                    label = axis.ticks[firstTick].label;\n                    if (label) {\n                        if (min - firstTick > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    // Hide/show last tick mark/label.\n                    label = axis.ticks[lastTick].label;\n                    if (label) {\n                        if (lastTick - max > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    const mark = axis.ticks[lastTick].mark;\n                    if (mark &&\n                        lastTick - max < tickmarkOffset &&\n                        lastTick - max > 0 && axis.ticks[lastTick].isLast) {\n                        axis.hiddenMarks.push(mark.hide());\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetAxisTranslation() {\n            const axis = this;\n            const tickInfo = axis.tickPositions && axis.tickPositions.info;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            const userLabels = axis.userOptions.labels || {};\n            // Fire this only for the Gantt type chart, #14868.\n            if (gridOptions.enabled) {\n                if (axis.horiz) {\n                    axis.series.forEach((series) => {\n                        series.options.pointRange = 0;\n                    });\n                    // Lower level time ticks, like hours or minutes, represent\n                    // points in time and not ranges. These should be aligned\n                    // left in the grid cell by default. The same applies to\n                    // years of higher order.\n                    if (tickInfo &&\n                        options.dateTimeLabelFormats &&\n                        options.labels &&\n                        !defined(userLabels.align) &&\n                        (options.dateTimeLabelFormats[tickInfo.unitName]\n                            .range === false ||\n                            tickInfo.count > 1 // years\n                        )) {\n                        options.labels.align = 'left';\n                        if (!defined(userLabels.x)) {\n                            options.labels.x = 3;\n                        }\n                    }\n                }\n                else {\n                    // Don't trim ticks which not in min/max range but\n                    // they are still in the min/max plus tickInterval.\n                    if (this.options.type !== 'treegrid' &&\n                        axis.grid &&\n                        axis.grid.columns) {\n                        this.minPointOffset = this.tickInterval;\n                    }\n                }\n            }\n        }\n        /**\n         * Creates a left and right wall on horizontal axes:\n         * - Places leftmost tick at the start of the axis, to create a left\n         *   wall\n         * - Ensures that the rightmost tick is at the end of the axis, to\n         *   create a right wall.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = this.options, userOptions = e.userOptions, gridOptions = ((options && isObject(options.grid)) ? options.grid : {});\n            let gridAxisOptions;\n            if (gridOptions.enabled === true) {\n                // Merge the user options into default grid axis options so\n                // that when a user option is set, it takes presedence.\n                gridAxisOptions = merge(true, {\n                    className: ('highcharts-grid-axis ' + (userOptions.className || '')),\n                    dateTimeLabelFormats: {\n                        hour: {\n                            list: ['%H:%M', '%H']\n                        },\n                        day: {\n                            list: ['%A, %e. %B', '%a, %e. %b', '%E']\n                        },\n                        week: {\n                            list: ['Week %W', 'W%W']\n                        },\n                        month: {\n                            list: ['%B', '%b', '%o']\n                        }\n                    },\n                    grid: {\n                        borderWidth: 1\n                    },\n                    labels: {\n                        padding: 2,\n                        style: {\n                            fontSize: '0.9em'\n                        }\n                    },\n                    margin: 0,\n                    title: {\n                        text: null,\n                        reserveSpace: false,\n                        rotation: 0,\n                        style: {\n                            textOverflow: 'ellipsis'\n                        }\n                    },\n                    // In a grid axis, only allow one unit of certain types,\n                    // for example we shouln't have one grid cell spanning\n                    // two days.\n                    units: [[\n                            'millisecond',\n                            [1, 10, 100]\n                        ], [\n                            'second',\n                            [1, 10]\n                        ], [\n                            'minute',\n                            [1, 5, 15]\n                        ], [\n                            'hour',\n                            [1, 6]\n                        ], [\n                            'day',\n                            [1]\n                        ], [\n                            'week',\n                            [1]\n                        ], [\n                            'month',\n                            [1]\n                        ], [\n                            'year',\n                            null\n                        ]]\n                }, userOptions);\n                // X-axis specific options\n                if (this.coll === 'xAxis') {\n                    // For linked axes, tickPixelInterval is used only if\n                    // the tickPositioner below doesn't run or returns\n                    // undefined (like multiple years)\n                    if (defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPixelInterval)) {\n                        gridAxisOptions.tickPixelInterval = 350;\n                    }\n                    // For the secondary grid axis, use the primary axis'\n                    // tick intervals and return ticks one level higher.\n                    if (\n                    // Check for tick pixel interval in options\n                    !defined(userOptions.tickPixelInterval) &&\n                        // Only for linked axes\n                        defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPositioner) &&\n                        !defined(userOptions.tickInterval) &&\n                        !defined(userOptions.units)) {\n                        gridAxisOptions.tickPositioner = function (min, max) {\n                            const parentInfo = (this.linkedParent &&\n                                this.linkedParent.tickPositions &&\n                                this.linkedParent.tickPositions.info);\n                            if (parentInfo) {\n                                const units = (gridAxisOptions.units || []);\n                                let unitIdx, count = 1, unitName = 'year';\n                                for (let i = 0; i < units.length; i++) {\n                                    const unit = units[i];\n                                    if (unit && unit[0] === parentInfo.unitName) {\n                                        unitIdx = i;\n                                        break;\n                                    }\n                                }\n                                // Get the first allowed count on the next unit.\n                                const unit = (isNumber(unitIdx) && units[unitIdx + 1]);\n                                if (unit) {\n                                    unitName = unit[0] || 'year';\n                                    const counts = unit[1];\n                                    count = counts && counts[0] || 1;\n                                    // In case the base X axis shows years, make the\n                                    // secondary axis show ten times the years (#11427)\n                                }\n                                else if (parentInfo.unitName === 'year') {\n                                    // unitName is 'year'\n                                    count = parentInfo.count * 10;\n                                }\n                                const unitRange = timeUnits[unitName];\n                                this.tickInterval = unitRange * count;\n                                return this.chart.time.getTimeTicks({ unitRange, count, unitName }, min, max, this.options.startOfWeek);\n                            }\n                        };\n                    }\n                }\n                // Now merge the combined options into the axis options\n                merge(true, this.options, gridAxisOptions);\n                if (this.horiz) {\n                    /*               _________________________\n                    Make this:    ___|_____|_____|_____|__|\n                                    ^                     ^\n                                    _________________________\n                    Into this:    |_____|_____|_____|_____|\n                                        ^                 ^    */\n                    options.minPadding = pick(userOptions.minPadding, 0);\n                    options.maxPadding = pick(userOptions.maxPadding, 0);\n                }\n                // If borderWidth is set, then use its value for tick and\n                // line width.\n                if (isNumber(options.grid.borderWidth)) {\n                    options.tickWidth = options.lineWidth =\n                        gridOptions.borderWidth;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetOptions2(e) {\n            const axis = this;\n            const userOptions = e.userOptions;\n            const gridOptions = userOptions && userOptions.grid || {};\n            const columns = gridOptions.columns;\n            // Add column options to the parent axis. Children has their column options\n            // set on init in onGridAxisAfterInit.\n            if (gridOptions.enabled && columns) {\n                merge(true, axis.options, columns[0]);\n            }\n        }\n        /**\n         * Handle columns and setScale.\n         * @private\n         */\n        function onAfterSetScale() {\n            const axis = this;\n            (axis.grid.columns || []).forEach((column) => column.setScale());\n        }\n        /**\n         * Draw vertical axis ticks extra long to create cell floors and roofs.\n         * Overrides the tickLength for vertical axes.\n         * @private\n         */\n        function onAfterTickSize(e) {\n            const { horiz, maxLabelDimensions, options: { grid: gridOptions = {} } } = this;\n            if (gridOptions.enabled && maxLabelDimensions) {\n                const labelPadding = this.options.labels.distance * 2;\n                const distance = horiz ?\n                    (gridOptions.cellHeight ||\n                        labelPadding + maxLabelDimensions.height) :\n                    labelPadding + maxLabelDimensions.width;\n                if (isArray(e.tickSize)) {\n                    e.tickSize[0] = distance;\n                }\n                else {\n                    e.tickSize = [distance, 0];\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            this.axes.forEach((axis) => {\n                (axis.grid && axis.grid.columns || []).forEach((column) => {\n                    column.setAxisSize();\n                    column.setAxisTranslation();\n                });\n            });\n        }\n        /**\n         * @private\n         */\n        function onDestroy(e) {\n            const { grid } = this;\n            (grid.columns || []).forEach((column) => column.destroy(e.keepEvents));\n            grid.columns = void 0;\n        }\n        /**\n         * Wraps axis init to draw cell walls on vertical axes.\n         * @private\n         */\n        function onInit(e) {\n            const axis = this;\n            const userOptions = e.userOptions || {};\n            const gridOptions = userOptions.grid || {};\n            if (gridOptions.enabled && defined(gridOptions.borderColor)) {\n                userOptions.tickColor = userOptions.lineColor = (gridOptions.borderColor);\n            }\n            if (!axis.grid) {\n                axis.grid = new GridAxisAdditions(axis);\n            }\n            axis.hiddenLabels = [];\n            axis.hiddenMarks = [];\n        }\n        /**\n         * Center tick labels in cells.\n         * @private\n         */\n        function onTickAfterGetLabelPosition(e) {\n            const tick = this, label = tick.label, axis = tick.axis, reversed = axis.reversed, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, labelOpts = axis.options.labels, align = labelOpts.align, \n            // verticalAlign is currently not supported for axis.labels.\n            verticalAlign = 'middle', // labelOpts.verticalAlign,\n            side = GridAxisSide[axis.side], tickmarkOffset = e.tickmarkOffset, tickPositions = axis.tickPositions, tickPos = tick.pos - tickmarkOffset, nextTickPos = (isNumber(tickPositions[e.index + 1]) ?\n                tickPositions[e.index + 1] - tickmarkOffset :\n                (axis.max || 0) + tickmarkOffset), tickSize = axis.tickSize('tick'), tickWidth = tickSize ? tickSize[0] : 0, crispCorr = tickSize ? tickSize[1] / 2 : 0;\n            // Only center tick labels in grid axes\n            if (gridOptions.enabled === true) {\n                let bottom, top, left, right;\n                // Calculate top and bottom positions of the cell.\n                if (side === 'top') {\n                    bottom = axis.top + axis.offset;\n                    top = bottom - tickWidth;\n                }\n                else if (side === 'bottom') {\n                    top = chart.chartHeight - axis.bottom + axis.offset;\n                    bottom = top + tickWidth;\n                }\n                else {\n                    bottom = axis.top + axis.len - (axis.translate(reversed ? nextTickPos : tickPos) || 0);\n                    top = axis.top + axis.len - (axis.translate(reversed ? tickPos : nextTickPos) || 0);\n                }\n                // Calculate left and right positions of the cell.\n                if (side === 'right') {\n                    left = chart.chartWidth - axis.right + axis.offset;\n                    right = left + tickWidth;\n                }\n                else if (side === 'left') {\n                    right = axis.left + axis.offset;\n                    left = right - tickWidth;\n                }\n                else {\n                    left = Math.round(axis.left + (axis.translate(reversed ? nextTickPos : tickPos) || 0)) - crispCorr;\n                    right = Math.min(// #15742\n                    Math.round(axis.left + (axis.translate(reversed ? tickPos : nextTickPos) || 0)) - crispCorr, axis.left + axis.len);\n                }\n                tick.slotWidth = right - left;\n                // Calculate the positioning of the label based on\n                // alignment.\n                e.pos.x = (align === 'left' ?\n                    left :\n                    align === 'right' ?\n                        right :\n                        left + ((right - left) / 2) // default to center\n                );\n                e.pos.y = (verticalAlign === 'top' ?\n                    top :\n                    verticalAlign === 'bottom' ?\n                        bottom :\n                        top + ((bottom - top) / 2) // default to middle\n                );\n                if (label) {\n                    const lblMetrics = chart.renderer.fontMetrics(label), labelHeight = label.getBBox().height;\n                    // Adjustment to y position to align the label correctly.\n                    // Would be better to have a setter or similar for this.\n                    if (!labelOpts.useHTML) {\n                        const lines = Math.round(labelHeight / lblMetrics.h);\n                        e.pos.y += (\n                        // Center the label\n                        // TODO: why does this actually center the label?\n                        ((lblMetrics.b - (lblMetrics.h - lblMetrics.f)) / 2) +\n                            // Adjust for height of additional lines.\n                            -(((lines - 1) * lblMetrics.h) / 2));\n                    }\n                    else {\n                        e.pos.y += (\n                        // Readjust yCorr in htmlUpdateTransform\n                        lblMetrics.b +\n                            // Adjust for height of html label\n                            -(labelHeight / 2));\n                    }\n                }\n                e.pos.x += (axis.horiz && labelOpts.x) || 0;\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickLabelFormat(ctx) {\n            const { axis, value } = ctx;\n            if (axis.options.grid &&\n                axis.options.grid.enabled) {\n                const tickPos = axis.tickPositions;\n                const series = (axis.linkedParent || axis).series[0];\n                const isFirst = value === tickPos[0];\n                const isLast = value === tickPos[tickPos.length - 1];\n                const point = series && find(series.options.data, function (p) {\n                    return p[axis.isXAxis ? 'x' : 'y'] === value;\n                });\n                let pointCopy;\n                if (point && series.is('gantt')) {\n                    // For the Gantt set point aliases to the pointCopy\n                    // to do not change the original point\n                    pointCopy = merge(point);\n                    H.seriesTypes.gantt.prototype.pointClass\n                        .setGanttPointAliases(pointCopy);\n                }\n                // Make additional properties available for the\n                // formatter\n                ctx.isFirst = isFirst;\n                ctx.isLast = isLast;\n                ctx.point = pointCopy;\n            }\n        }\n        /**\n         * Makes tick labels which are usually ignored in a linked axis\n         * displayed if they are within range of linkedParent.min.\n         * ```\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Make this:             |   |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Into this:             | 1 |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         * ```\n         * @private\n         * @todo Does this function do what the drawing says? Seems to affect\n         *       ticks and not the labels directly?\n         */\n        function onTrimTicks() {\n            const axis = this, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, categoryAxis = axis.categories, tickPositions = axis.tickPositions, firstPos = tickPositions[0], secondPos = tickPositions[1], lastPos = tickPositions[tickPositions.length - 1], beforeLastPos = tickPositions[tickPositions.length - 2], linkedMin = axis.linkedParent && axis.linkedParent.min, linkedMax = axis.linkedParent && axis.linkedParent.max, min = linkedMin || axis.min, max = linkedMax || axis.max, tickInterval = axis.tickInterval, startLessThanMin = ( // #19845\n            isNumber(min) &&\n                min >= firstPos + tickInterval &&\n                min < secondPos), endMoreThanMin = (isNumber(min) &&\n                firstPos < min &&\n                firstPos + tickInterval > min), startLessThanMax = (isNumber(max) &&\n                lastPos > max &&\n                lastPos - tickInterval < max), endMoreThanMax = (isNumber(max) &&\n                max <= lastPos - tickInterval &&\n                max > beforeLastPos);\n            if (gridOptions.enabled === true &&\n                !categoryAxis &&\n                (axis.isXAxis || axis.isLinked)) {\n                if ((endMoreThanMin || startLessThanMin) && !options.startOnTick) {\n                    tickPositions[0] = min;\n                }\n                if ((startLessThanMax || endMoreThanMax) && !options.endOnTick) {\n                    tickPositions[tickPositions.length - 1] = max;\n                }\n            }\n        }\n        /**\n         * Avoid altering tickInterval when reserving space.\n         * @private\n         */\n        function wrapUnsquish(proceed) {\n            const axis = this;\n            const { options: { grid: gridOptions = {} } } = axis;\n            if (gridOptions.enabled === true && axis.categories) {\n                return axis.tickInterval;\n            }\n            return proceed.apply(axis, argsToArray(arguments));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Additions for grid axes.\n         * @private\n         * @class\n         */\n        class GridAxisAdditions {\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Checks if an axis is the outer axis in its dimension. Since\n             * axes are placed outwards in order, the axis with the highest\n             * index is the outermost axis.\n             *\n             * Example: If there are multiple x-axes at the top of the chart,\n             * this function returns true if the axis supplied is the last\n             * of the x-axes.\n             *\n             * @private\n             *\n             * @return {boolean}\n             * True if the axis is the outermost axis in its dimension; false if\n             * not.\n             */\n            isOuterAxis() {\n                const axis = this.axis;\n                const chart = axis.chart;\n                const columnIndex = axis.grid.columnIndex;\n                const columns = (axis.linkedParent?.grid.columns ||\n                    axis.grid.columns ||\n                    []);\n                const parentAxis = columnIndex ? axis.linkedParent : axis;\n                let thisIndex = -1, lastIndex = 0;\n                // On the left side, when we have columns (not only multiple axes), the\n                // main axis is to the left\n                if (axis.side === 3 && !chart.inverted && columns.length) {\n                    return !axis.linkedParent;\n                }\n                (chart[axis.coll] || []).forEach((otherAxis, index) => {\n                    if (otherAxis.side === axis.side &&\n                        !otherAxis.options.isInternal) {\n                        lastIndex = index;\n                        if (otherAxis === parentAxis) {\n                            // Get the index of the axis in question\n                            thisIndex = index;\n                        }\n                    }\n                });\n                return (lastIndex === thisIndex &&\n                    (isNumber(columnIndex) ?\n                        columns.length === columnIndex :\n                        true));\n            }\n            /**\n             * Add extra border based on the provided path.\n             * @private\n             * @param {SVGPath} path\n             * The path of the border.\n             * @return {Highcharts.SVGElement}\n             * Border\n             */\n            renderBorder(path) {\n                const axis = this.axis, renderer = axis.chart.renderer, options = axis.options, extraBorderLine = renderer.path(path)\n                    .addClass('highcharts-axis-line')\n                    .add(axis.axisGroup);\n                if (!renderer.styledMode) {\n                    extraBorderLine.attr({\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth,\n                        zIndex: 7\n                    });\n                }\n                return extraBorderLine;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        // First letter of the day of the week, e.g. 'M' for 'Monday'.\n        dateFormats.E = function (timestamp) {\n            return this.dateFormat('%a', timestamp, true).charAt(0);\n        };\n        // Adds week date format\n        dateFormats.W = function (timestamp) {\n            const time = this, d = new this.Date(timestamp), unitsToOmit = ['Hours', 'Milliseconds', 'Minutes', 'Seconds'];\n            unitsToOmit.forEach(function (format) {\n                time.set(format, d, 0);\n            });\n            const firstDay = (this.get('Day', d) + 6) % 7;\n            const thursday = new this.Date(d.valueOf());\n            this.set('Date', thursday, this.get('Date', d) - firstDay + 3);\n            const firstThursday = new this.Date(this.get('FullYear', thursday), 0, 1);\n            if (this.get('Day', firstThursday) !== 4) {\n                this.set('Month', d, 0);\n                this.set('Date', d, 1 + (11 - this.get('Day', firstThursday)) % 7);\n            }\n            return (1 +\n                Math.floor((thursday.valueOf() - firstThursday.valueOf()) / 604800000)).toString();\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const GridAxis = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * @productdesc {gantt}\n         * For grid axes (like in Gantt charts),\n         * it is possible to declare as a list to provide different\n         * formats depending on available space.\n         *\n         * Defaults to:\n         * ```js\n         * {\n         *     hour: { list: ['%H:%M', '%H'] },\n         *     day: { list: ['%A, %e. %B', '%a, %e. %b', '%E'] },\n         *     week: { list: ['Week %W', 'W%W'] },\n         *     month: { list: ['%B', '%b', '%o'] }\n         * }\n         * ```\n         *\n         * @sample {gantt} gantt/grid-axis/date-time-label-formats\n         *         Gantt chart with custom axis date format.\n         *\n         * @apioption xAxis.dateTimeLabelFormats\n         */\n        /**\n         * Set grid options for the axis labels. Requires Highcharts Gantt.\n         *\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid\n         */\n        /**\n         * Enable grid on the axis labels. Defaults to true for Gantt charts.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid.enabled\n         */\n        /**\n         * Set specific options for each column (or row for horizontal axes) in the\n         * grid. Each extra column/row is its own axis, and the axis options can be set\n         * here.\n         *\n         * @sample gantt/demo/left-axis-table\n         *         Left axis as a table\n         * @sample gantt/demo/treegrid-columns\n         *         Collapsible tree grid with columns\n         *\n         * @type      {Array<Highcharts.XAxisOptions>}\n         * @apioption xAxis.grid.columns\n         */\n        /**\n         * Set border color for the label grid lines.\n         *\n         * @type      {Highcharts.ColorString}\n         * @default   #e6e6e6\n         * @apioption xAxis.grid.borderColor\n         */\n        /**\n         * Set border width of the label grid lines.\n         *\n         * @type      {number}\n         * @default   1\n         * @apioption xAxis.grid.borderWidth\n         */\n        /**\n         * Set cell height for grid axis labels. By default this is calculated from font\n         * size. This option only applies to horizontal axes. For vertical axes, check\n         * the [#yAxis.staticScale](yAxis.staticScale) option.\n         *\n         * @sample gantt/grid-axis/cellheight\n         *         Gant chart with custom cell height\n         * @type      {number}\n         * @apioption xAxis.grid.cellHeight\n         */\n        ''; // keeps doclets above in JS file\n\n        return GridAxis;\n    });\n    _registerModule(_modules, 'masters/modules/grid-axis.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/GridAxis.js']], function (Highcharts, GridAxis) {\n\n        const G = Highcharts;\n        // Compositions\n        GridAxis.compose(G.Axis, G.Chart, G.Tick);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","Axis","H","U","GridAxisSide","composed","dateFormats","addEvent","defined","erase","find","isArray","isNumber","merge","pick","pushUnique","timeUnits","wrap","isObject","x","getMaxLabelDimensions","ticks","tickPositions","dimensions","width","height","forEach","pos","tick","labelHeight","labelWidth","label","getBBox","textStr","textPxLength","Math","round","max","options","type","treeGrid","mapOfPosToGridNode","treeDepth","labels","indentation","wrapGetOffset","proceed","grid","columnsFirst","side","isColumn","columns","slice","reverse","column","getOffset","onAfterGetTitlePosition","e","axis","gridOptions","enabled","axisTitle","axisHeight","horiz","left","axisLeft","offset","opposite","top","axisTop","axisWidth","tickSize","titleWidth","xOption","title","yOption","y","titleMargin","margin","titleFontSize","chart","renderer","fontMetrics","f","crispCorr","offAxis","bottom","titlePosition","onAfterInit","userOptions","applyGridOptions","align","categories","showLastLabel","labelRotation","rotation","minTickInterval","columnIndex","length","columnOptions","isInternal","linkedTo","scrollbar","axes","coll","push","onAfterRender","min","firstTick","styledMode","slotWidth","style","css","maxLabelDimensions","rightWall","destroy","isOuterAxis","axisLine","lineWidth","linePath","getLinePath","startPoint","endPoint","tickLength","distance","marginRight","upperBorderEndPoint","upperBorderPath","lowerBorderEndPoint","chartWidth","toPixels","tickmarkOffset","lowerBorderStartPoint","lowerBorderPath","upperBorder","renderBorder","attr","stroke","lineColor","animate","d","lowerBorder","axisLineExtra","showAxis","render","hasRendered","linkedParent","tickMark","lastTick","hiddenLabels","pop","element","show","hiddenMarks","hide","mark","isLast","onAfterSetAxisTranslation","tickInfo","info","userLabels","series","pointRange","dateTimeLabelFormats","unitName","range","count","minPointOffset","tickInterval","onAfterSetOptions","gridAxisOptions","className","hour","list","day","week","month","borderWidth","padding","fontSize","text","reserveSpace","textOverflow","units","tickPixelInterval","tickPositioner","parentInfo","unitIdx","i","unit","counts","unitRange","time","getTimeTicks","startOfWeek","minPadding","maxPadding","tickWidth","onAfterSetOptions2","onAfterSetScale","setScale","onAfterTickSize","labelPadding","cellHeight","onChartAfterSetChartSize","setAxisSize","setAxisTranslation","onDestroy","keepEvents","onInit","borderColor","tickColor","GridAxisAdditions","onTickAfterGetLabelPosition","reversed","labelOpts","tickPos","nextTickPos","index","right","chartHeight","len","translate","lblMetrics","useHTML","b","lines","h","onTickLabelFormat","ctx","value","pointCopy","isFirst","point","data","p","isXAxis","is","seriesTypes","gantt","prototype","pointClass","setGanttPointAliases","onTrimTicks","categoryAxis","firstPos","secondPos","lastPos","beforeLastPos","linkedMin","linkedMax","startLessThanMin","endMoreThanMin","startLessThanMax","endMoreThanMax","isLinked","startOnTick","endOnTick","wrapUnsquish","arguments","Array","call","constructor","parentAxis","thisIndex","lastIndex","inverted","otherAxis","extraBorderLine","addClass","add","axisGroup","zIndex","E","timestamp","dateFormat","charAt","W","Date","unitsToOmit","format","set","firstDay","get","thursday","valueOf","firstThursday","floor","toString","compose","AxisClass","ChartClass","TickClass","keepProps","GridAxis","G","Chart","Tick"],"mappings":"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"}