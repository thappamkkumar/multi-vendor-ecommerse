{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Gantt JS v11.3.0 (2024-01-10)\n *\n * Gantt series\n *\n * (c) 2016-2024 Lars A. V. Cabrera\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/gantt', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/ArrowSymbols.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2017 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates an arrow symbol. Like a triangle, except not filled.\n         * ```\n         *                   o\n         *             o\n         *       o\n         * o\n         *       o\n         *             o\n         *                   o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the arrow\n         *\n         * @param {number} y\n         *        y position of the arrow\n         *\n         * @param {number} w\n         *        width of the arrow\n         *\n         * @param {number} h\n         *        height of the arrow\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function arrow(x, y, w, h) {\n            return [\n                ['M', x, y + h / 2],\n                ['L', x + w, y],\n                ['L', x, y + h / 2],\n                ['L', x + w, y + h]\n            ];\n        }\n        /**\n         * Creates a half-width arrow symbol. Like a triangle, except not filled.\n         * ```\n         *       o\n         *    o\n         * o\n         *    o\n         *       o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the arrow\n         *\n         * @param {number} y\n         *        y position of the arrow\n         *\n         * @param {number} w\n         *        width of the arrow\n         *\n         * @param {number} h\n         *        height of the arrow\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function arrowHalf(x, y, w, h) {\n            return arrow(x, y, w / 2, h);\n        }\n        /**\n         * @private\n         */\n        function compose(SVGRendererClass) {\n            if (pushUnique(composed, compose)) {\n                const symbols = SVGRendererClass.prototype.symbols;\n                symbols.arrow = arrow;\n                symbols['arrow-filled'] = triangleLeft;\n                symbols['arrow-filled-half'] = triangleLeftHalf;\n                symbols['arrow-half'] = arrowHalf;\n                symbols['triangle-left'] = triangleLeft;\n                symbols['triangle-left-half'] = triangleLeftHalf;\n            }\n        }\n        /**\n         * Creates a left-oriented triangle.\n         * ```\n         *             o\n         *       ooooooo\n         * ooooooooooooo\n         *       ooooooo\n         *             o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the triangle\n         *\n         * @param {number} y\n         *        y position of the triangle\n         *\n         * @param {number} w\n         *        width of the triangle\n         *\n         * @param {number} h\n         *        height of the triangle\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function triangleLeft(x, y, w, h) {\n            return [\n                ['M', x + w, y],\n                ['L', x, y + h / 2],\n                ['L', x + w, y + h],\n                ['Z']\n            ];\n        }\n        /**\n         * Creates a half-width, left-oriented triangle.\n         * ```\n         *       o\n         *    oooo\n         * ooooooo\n         *    oooo\n         *       o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the triangle\n         *\n         * @param {number} y\n         *        y position of the triangle\n         *\n         * @param {number} w\n         *        width of the triangle\n         *\n         * @param {number} h\n         *        height of the triangle\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function triangleLeftHalf(x, y, w, h) {\n            return triangleLeft(x, y, w / 2, h);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ArrowSymbols = {\n            compose\n        };\n\n        return ArrowSymbols;\n    });\n    _registerModule(_modules, 'Gantt/Connection.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, error, merge, objectEach } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const deg2rad = H.deg2rad, max = Math.max, min = Math.min;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Connection class. Used internally to represent a connection between two\n         * points.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Connection\n         *\n         * @param {Highcharts.Point} from\n         *        Connection runs from this Point.\n         *\n         * @param {Highcharts.Point} to\n         *        Connection runs to this Point.\n         *\n         * @param {Highcharts.ConnectorsOptions} [options]\n         *        Connection options.\n         */\n        class Connection {\n            constructor(from, to, options) {\n                this.init(from, to, options);\n            }\n            /**\n             * Initialize the Connection object. Used as constructor only.\n             *\n             * @function Highcharts.Connection#init\n             *\n             * @param {Highcharts.Point} from\n             *        Connection runs from this Point.\n             *\n             * @param {Highcharts.Point} to\n             *        Connection runs to this Point.\n             *\n             * @param {Highcharts.ConnectorsOptions} [options]\n             *        Connection options.\n             */\n            init(from, to, options) {\n                this.fromPoint = from;\n                this.toPoint = to;\n                this.options = options;\n                this.chart = from.series.chart;\n                this.pathfinder = this.chart.pathfinder;\n            }\n            /**\n             * Add (or update) this connection's path on chart. Stores reference to the\n             * created element on this.graphics.path.\n             *\n             * @function Highcharts.Connection#renderPath\n             *\n             * @param {Highcharts.SVGPathArray} path\n             *        Path to render, in array format. E.g. ['M', 0, 0, 'L', 10, 10]\n             *\n             * @param {Highcharts.SVGAttributes} [attribs]\n             *        SVG attributes for the path.\n             *\n             * @param {Partial<Highcharts.AnimationOptionsObject>} [animation]\n             *        Animation options for the rendering.\n             */\n            renderPath(path, attribs) {\n                const connection = this, chart = this.chart, styledMode = chart.styledMode, pathfinder = this.pathfinder, anim = {};\n                let pathGraphic = connection.graphics && connection.graphics.path;\n                // Add the SVG element of the pathfinder group if it doesn't exist\n                if (!pathfinder.group) {\n                    pathfinder.group = chart.renderer.g()\n                        .addClass('highcharts-pathfinder-group')\n                        .attr({ zIndex: -1 })\n                        .add(chart.seriesGroup);\n                }\n                // Shift the group to compensate for plot area.\n                // Note: Do this always (even when redrawing a path) to avoid issues\n                // when updating chart in a way that changes plot metrics.\n                pathfinder.group.translate(chart.plotLeft, chart.plotTop);\n                // Create path if does not exist\n                if (!(pathGraphic && pathGraphic.renderer)) {\n                    pathGraphic = chart.renderer.path()\n                        .add(pathfinder.group);\n                    if (!styledMode) {\n                        pathGraphic.attr({\n                            opacity: 0\n                        });\n                    }\n                }\n                // Set path attribs and animate to the new path\n                pathGraphic.attr(attribs);\n                anim.d = path;\n                if (!styledMode) {\n                    anim.opacity = 1;\n                }\n                pathGraphic.animate(anim);\n                // Store reference on connection\n                this.graphics = this.graphics || {};\n                this.graphics.path = pathGraphic;\n            }\n            /**\n             * Calculate and add marker graphics for connection to the chart. The\n             * created/updated elements are stored on this.graphics.start and\n             * this.graphics.end.\n             *\n             * @function Highcharts.Connection#addMarker\n             *\n             * @param {string} type\n             *        Marker type, either 'start' or 'end'.\n             *\n             * @param {Highcharts.ConnectorsMarkerOptions} options\n             *        All options for this marker. Not calculated or merged with other\n             *        options.\n             *\n             * @param {Highcharts.SVGPathArray} path\n             *        Connection path in array format. This is used to calculate the\n             *        rotation angle of the markers.\n             */\n            addMarker(type, options, path) {\n                const connection = this, chart = connection.fromPoint.series.chart, pathfinder = chart.pathfinder, renderer = chart.renderer, point = (type === 'start' ?\n                    connection.fromPoint :\n                    connection.toPoint), anchor = point.getPathfinderAnchorPoint(options);\n                let markerVector, radians, rotation, box, width, height, pathVector, segment;\n                if (!options.enabled) {\n                    return;\n                }\n                // Last vector before start/end of path, used to get angle\n                if (type === 'start') {\n                    segment = path[1];\n                }\n                else { // 'end'\n                    segment = path[path.length - 2];\n                }\n                if (segment && segment[0] === 'M' || segment[0] === 'L') {\n                    pathVector = {\n                        x: segment[1],\n                        y: segment[2]\n                    };\n                    // Get angle between pathVector and anchor point and use it to\n                    // create marker position.\n                    radians = point.getRadiansToVector(pathVector, anchor);\n                    markerVector = point.getMarkerVector(radians, options.radius, anchor);\n                    // Rotation of marker is calculated from angle between pathVector\n                    // and markerVector.\n                    // (Note:\n                    //  Used to recalculate radians between markerVector and pathVector,\n                    //  but this should be the same as between pathVector and anchor.)\n                    rotation = -radians / deg2rad;\n                    if (options.width && options.height) {\n                        width = options.width;\n                        height = options.height;\n                    }\n                    else {\n                        width = height = options.radius * 2;\n                    }\n                    // Add graphics object if it does not exist\n                    connection.graphics = connection.graphics || {};\n                    box = {\n                        x: markerVector.x - (width / 2),\n                        y: markerVector.y - (height / 2),\n                        width: width,\n                        height: height,\n                        rotation: rotation,\n                        rotationOriginX: markerVector.x,\n                        rotationOriginY: markerVector.y\n                    };\n                    if (!connection.graphics[type]) {\n                        // Create new marker element\n                        connection.graphics[type] = renderer\n                            .symbol(options.symbol)\n                            .addClass('highcharts-point-connecting-path-' + type + '-marker' +\n                            ' highcharts-color-' + this.fromPoint.colorIndex)\n                            .attr(box)\n                            .add(pathfinder.group);\n                        if (!renderer.styledMode) {\n                            connection.graphics[type].attr({\n                                fill: options.color || connection.fromPoint.color,\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth,\n                                opacity: 0\n                            })\n                                .animate({\n                                opacity: 1\n                            }, point.series.options.animation);\n                        }\n                    }\n                    else {\n                        connection.graphics[type].animate(box);\n                    }\n                }\n            }\n            /**\n             * Calculate and return connection path.\n             * Note: Recalculates chart obstacles on demand if they aren't calculated.\n             *\n             * @function Highcharts.Connection#getPath\n             *\n             * @param {Highcharts.ConnectorsOptions} options\n             *        Connector options. Not calculated or merged with other options.\n             *\n             * @return {object|undefined}\n             *         Calculated SVG path data in array format.\n             */\n            getPath(options) {\n                const pathfinder = this.pathfinder, chart = this.chart, algorithm = pathfinder.algorithms[options.type];\n                let chartObstacles = pathfinder.chartObstacles;\n                if (typeof algorithm !== 'function') {\n                    error('\"' + options.type + '\" is not a Pathfinder algorithm.');\n                    return {\n                        path: [],\n                        obstacles: []\n                    };\n                }\n                // This function calculates obstacles on demand if they don't exist\n                if (algorithm.requiresObstacles && !chartObstacles) {\n                    chartObstacles =\n                        pathfinder.chartObstacles =\n                            pathfinder.getChartObstacles(options);\n                    // If the algorithmMargin was computed, store the result in default\n                    // options.\n                    chart.options.connectors.algorithmMargin =\n                        options.algorithmMargin;\n                    // Cache some metrics too\n                    pathfinder.chartObstacleMetrics =\n                        pathfinder.getObstacleMetrics(chartObstacles);\n                }\n                // Get the SVG path\n                return algorithm(\n                // From\n                this.fromPoint.getPathfinderAnchorPoint(options.startMarker), \n                // To\n                this.toPoint.getPathfinderAnchorPoint(options.endMarker), merge({\n                    chartObstacles: chartObstacles,\n                    lineObstacles: pathfinder.lineObstacles || [],\n                    obstacleMetrics: pathfinder.chartObstacleMetrics,\n                    hardBounds: {\n                        xMin: 0,\n                        xMax: chart.plotWidth,\n                        yMin: 0,\n                        yMax: chart.plotHeight\n                    },\n                    obstacleOptions: {\n                        margin: options.algorithmMargin\n                    },\n                    startDirectionX: pathfinder.getAlgorithmStartDirection(options.startMarker)\n                }, options));\n            }\n            /**\n             * (re)Calculate and (re)draw the connection.\n             *\n             * @function Highcharts.Connection#render\n             */\n            render() {\n                const connection = this, fromPoint = connection.fromPoint, series = fromPoint.series, chart = series.chart, pathfinder = chart.pathfinder, attribs = {};\n                let options = merge(chart.options.connectors, series.options.connectors, fromPoint.options.connectors, connection.options);\n                // Set path attribs\n                if (!chart.styledMode) {\n                    attribs.stroke = options.lineColor || fromPoint.color;\n                    attribs['stroke-width'] = options.lineWidth;\n                    if (options.dashStyle) {\n                        attribs.dashstyle = options.dashStyle;\n                    }\n                }\n                attribs['class'] = // eslint-disable-line dot-notation\n                    'highcharts-point-connecting-path ' +\n                        'highcharts-color-' + fromPoint.colorIndex;\n                options = merge(attribs, options);\n                // Set common marker options\n                if (!defined(options.marker.radius)) {\n                    options.marker.radius = min(max(Math.ceil((options.algorithmMargin || 8) / 2) - 1, 1), 5);\n                }\n                // Get the path\n                const pathResult = connection.getPath(options), path = pathResult.path;\n                // Always update obstacle storage with obstacles from this path.\n                // We don't know if future calls will need this for their algorithm.\n                if (pathResult.obstacles) {\n                    pathfinder.lineObstacles =\n                        pathfinder.lineObstacles || [];\n                    pathfinder.lineObstacles =\n                        pathfinder.lineObstacles.concat(pathResult.obstacles);\n                }\n                // Add the calculated path to the pathfinder group\n                connection.renderPath(path, attribs);\n                // Render the markers\n                connection.addMarker('start', merge(options.marker, options.startMarker), path);\n                connection.addMarker('end', merge(options.marker, options.endMarker), path);\n            }\n            /**\n             * Destroy connection by destroying the added graphics elements.\n             *\n             * @function Highcharts.Connection#destroy\n             */\n            destroy() {\n                if (this.graphics) {\n                    objectEach(this.graphics, function (val) {\n                        val.destroy();\n                    });\n                    delete this.graphics;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * The default pathfinder algorithm to use for a chart. It is possible to define\n         * your own algorithms by adding them to the\n         * `Highcharts.Pathfinder.prototype.algorithms`\n         * object before the chart has been created.\n         *\n         * The default algorithms are as follows:\n         *\n         * `straight`:      Draws a straight line between the connecting\n         *                  points. Does not avoid other points when drawing.\n         *\n         * `simpleConnect`: Finds a path between the points using right angles\n         *                  only. Takes only starting/ending points into\n         *                  account, and will not avoid other points.\n         *\n         * `fastAvoid`:     Finds a path between the points using right angles\n         *                  only. Will attempt to avoid other points, but its\n         *                  focus is performance over accuracy. Works well with\n         *                  less dense datasets.\n         *\n         * @typedef {\"fastAvoid\"|\"simpleConnect\"|\"straight\"|string} Highcharts.PathfinderTypeValue\n         */\n        ''; // Keeps doclets above in JS file\n\n        return Connection;\n    });\n    _registerModule(_modules, 'Extensions/CurrentDateIndication.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, merge, pushUnique, wrap } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Show an indicator on the axis for the current date and time. Can be a\n         * boolean or a configuration object similar to\n         * [xAxis.plotLines](#xAxis.plotLines).\n         *\n         * @sample gantt/current-date-indicator/demo\n         *         Current date indicator enabled\n         * @sample gantt/current-date-indicator/object-config\n         *         Current date indicator with custom options\n         *\n         * @declare   Highcharts.CurrentDateIndicatorOptions\n         * @type      {boolean|CurrentDateIndicatorOptions}\n         * @default   true\n         * @extends   xAxis.plotLines\n         * @excluding value\n         * @product   gantt\n         * @apioption xAxis.currentDateIndicator\n         */\n        const defaultOptions = {\n            color: \"#ccd3ff\" /* Palette.highlightColor20 */,\n            width: 2,\n            /**\n             * @declare Highcharts.AxisCurrentDateIndicatorLabelOptions\n             */\n            label: {\n                /**\n                 * Format of the label. This options is passed as the fist argument to\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat) function.\n                 *\n                 * @type      {string}\n                 * @default   %a, %b %d %Y, %H:%M\n                 * @product   gantt\n                 * @apioption xAxis.currentDateIndicator.label.format\n                 */\n                format: '%a, %b %d %Y, %H:%M',\n                formatter: function (value, format) {\n                    return this.axis.chart.time.dateFormat(format || '', value);\n                },\n                rotation: 0,\n                /**\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    fontSize: '0.7em'\n                }\n            }\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, PlotLineOrBandClass) {\n            if (pushUnique(composed, compose)) {\n                addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                addEvent(PlotLineOrBandClass, 'render', onPlotLineOrBandRender);\n                wrap(PlotLineOrBandClass.prototype, 'getLabelText', wrapPlotLineOrBandGetLabelText);\n            }\n        }\n        /**\n         * @private\n         */\n        function onAxisAfterSetOptions() {\n            const options = this.options, cdiOptions = options.currentDateIndicator;\n            if (cdiOptions) {\n                const plotLineOptions = typeof cdiOptions === 'object' ?\n                    merge(defaultOptions, cdiOptions) :\n                    merge(defaultOptions);\n                plotLineOptions.value = Date.now();\n                plotLineOptions.className = 'highcharts-current-date-indicator';\n                if (!options.plotLines) {\n                    options.plotLines = [];\n                }\n                options.plotLines.push(plotLineOptions);\n            }\n        }\n        /**\n         * @private\n         */\n        function onPlotLineOrBandRender() {\n            // If the label already exists, update its text\n            if (this.label) {\n                this.label.attr({\n                    text: this.getLabelText(this.options.label)\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapPlotLineOrBandGetLabelText(defaultMethod, defaultLabelOptions) {\n            const options = this.options;\n            if (options &&\n                options.className &&\n                options.className.indexOf('highcharts-current-date-indicator') !== -1 &&\n                options.label &&\n                typeof options.label.formatter === 'function') {\n                options.value = Date.now();\n                return options.label.formatter\n                    .call(this, options.value, options.label.format);\n            }\n            return defaultMethod.call(this, defaultLabelOptions);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const CurrentDateIndication = {\n            compose\n        };\n\n        return CurrentDateIndication;\n    });\n    _registerModule(_modules, 'Core/Chart/GanttChart.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (Chart, D, U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { isArray, merge, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Gantt-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n         *\n         * @requires modules/gantt\n         *\n         * @class\n         * @name Highcharts.GanttChart\n         * @extends Highcharts.Chart\n         */\n        class GanttChart extends Chart {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initializes the chart. The constructor's arguments are passed on\n             * directly.\n             *\n             * @function Highcharts.GanttChart#init\n             *\n             * @param {Highcharts.Options} userOptions\n             *        Custom options.\n             *\n             * @param {Function} [callback]\n             *        Function to run when the chart has loaded and and all external\n             *        images are loaded.\n             *\n             *\n             * @emits Highcharts.GanttChart#event:init\n             * @emits Highcharts.GanttChart#event:afterInit\n             */\n            init(userOptions, callback) {\n                const xAxisOptions = userOptions.xAxis, yAxisOptions = userOptions.yAxis;\n                let defaultLinkedTo;\n                // Avoid doing these twice\n                userOptions.xAxis = userOptions.yAxis = void 0;\n                const options = merge(true, {\n                    chart: {\n                        type: 'gantt'\n                    },\n                    title: {\n                        text: ''\n                    },\n                    legend: {\n                        enabled: false\n                    },\n                    navigator: {\n                        series: { type: 'gantt' },\n                        // Bars were clipped, #14060.\n                        yAxis: {\n                            type: 'category'\n                        }\n                    }\n                }, userOptions, // User's options\n                // forced options\n                {\n                    isGantt: true\n                });\n                userOptions.xAxis = xAxisOptions;\n                userOptions.yAxis = yAxisOptions;\n                // Apply X axis options to both single and multi x axes If user hasn't\n                // defined axes as array, make it into an array and add a second axis by\n                // default.\n                options.xAxis = (!isArray(userOptions.xAxis) ?\n                    [userOptions.xAxis || {}, {}] :\n                    userOptions.xAxis).map((xAxisOptions, i) => {\n                    if (i === 1) { // Second xAxis\n                        defaultLinkedTo = 0;\n                    }\n                    return merge(\n                    // Defaults\n                    {\n                        grid: {\n                            borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                            enabled: true\n                        },\n                        opposite: defaultOptions.xAxis?.opposite ??\n                            xAxisOptions.opposite ??\n                            true,\n                        linkedTo: defaultLinkedTo\n                    }, \n                    // User options\n                    xAxisOptions, \n                    // Forced options\n                    {\n                        type: 'datetime'\n                    });\n                });\n                // Apply Y axis options to both single and multi y axes\n                options.yAxis = (splat(userOptions.yAxis || {})).map((yAxisOptions) => merge(\n                // Defaults\n                {\n                    grid: {\n                        borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                        enabled: true\n                    },\n                    staticScale: 50,\n                    reversed: true,\n                    // Set default type treegrid, but only if 'categories' is\n                    // undefined\n                    type: yAxisOptions.categories ? yAxisOptions.type : 'treegrid'\n                }, \n                // User options\n                yAxisOptions));\n                super.init(options, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GanttChart) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable jsdoc/check-param-names */\n            /**\n             * The factory function for creating new gantt charts. Creates a new {@link\n             * Highcharts.GanttChart|GanttChart} object with different default options\n             * than the basic Chart.\n             *\n             * @example\n             * // Render a chart in to div#container\n             * let chart = Highcharts.ganttChart('container', {\n             *     title: {\n             *         text: 'My chart'\n             *     },\n             *     series: [{\n             *         data: ...\n             *     }]\n             * });\n             *\n             * @function Highcharts.ganttChart\n             *\n             * @param {string|Highcharts.HTMLDOMElement} renderTo\n             *        The DOM element to render to, or its id.\n             *\n             * @param {Highcharts.Options} options\n             *        The chart options structure.\n             *\n             * @param {Highcharts.ChartCallbackFunction} [callback]\n             *        Function to run when the chart has loaded and and all external\n             *        images are loaded. Defining a\n             *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n             *        handler is equivalent.\n             *\n             * @return {Highcharts.GanttChart}\n             *         Returns the Chart object.\n             */\n            function ganttChart(a, b, c) {\n                return new GanttChart(a, b, c);\n            }\n            GanttChart.ganttChart = ganttChart;\n            /* eslint-enable jsdoc/check-param-names */\n        })(GanttChart || (GanttChart = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttChart;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxisComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed, isTouchDevice } = H;\n        const { addEvent, correctFloat, defined, isNumber, pick, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onAxisInit() {\n            const axis = this;\n            if (!axis.navigatorAxis) {\n                axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n            }\n        }\n        /**\n         * For Stock charts, override selection zooming with some special features\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector.\n         * @private\n         */\n        function onAxisZoom(e) {\n            const axis = this, chart = axis.chart, chartOptions = chart.options, navigator = chartOptions.navigator, navigatorAxis = axis.navigatorAxis, pinchType = chart.zooming.pinchType, rangeSelector = chartOptions.rangeSelector, zoomType = chart.zooming.type;\n            if (axis.isXAxis && ((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled))) {\n                // For y only zooming, ignore the X axis completely\n                if (zoomType === 'y') {\n                    e.zoomed = false;\n                    // For xy zooming, record the state of the zoom before zoom\n                    // selection, then when the reset button is pressed, revert to\n                    // this state. This should apply only if the chart is\n                    // initialized with a range (#6612), otherwise zoom all the way\n                    // out.\n                }\n                else if (((!isTouchDevice && zoomType === 'xy') ||\n                    (isTouchDevice && pinchType === 'xy')) &&\n                    axis.options.range) {\n                    const previousZoom = navigatorAxis.previousZoom;\n                    if (defined(e.newMin)) {\n                        navigatorAxis.previousZoom = [axis.min, axis.max];\n                    }\n                    else if (previousZoom) {\n                        e.newMin = previousZoom[0];\n                        e.newMax = previousZoom[1];\n                        navigatorAxis.previousZoom = void 0;\n                    }\n                }\n            }\n            if (typeof e.zoomed !== 'undefined') {\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class NavigatorAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass) {\n                if (pushUnique(composed, this.compose)) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'zoom', onAxisZoom);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.axis = void 0;\n            }\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            toFixedRange(pxMin, pxMax, fixedMin, fixedMax) {\n                const axis = this.axis, chart = axis.chart;\n                let newMin = pick(fixedMin, axis.translate(pxMin, true, !axis.horiz)), newMax = pick(fixedMax, axis.translate(pxMax, true, !axis.horiz));\n                const fixedRange = chart && chart.fixedRange, halfPointRange = (axis.pointRange || 0) / 2;\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                // Make sure panning to the edges does not decrease the zoomed range\n                if (fixedRange && axis.dataMin && axis.dataMax) {\n                    if (newMax >= axis.dataMax) {\n                        newMin = correctFloat(axis.dataMax - fixedRange);\n                    }\n                    if (newMin <= axis.dataMin) {\n                        newMax = correctFloat(axis.dataMin + fixedRange);\n                    }\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorAxisAdditions;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorDefaults.js', [_modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js']], function (Color, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { seriesTypes } = SeriesRegistry;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The navigator is a small series below the main series, displaying\n         * a view of the entire data set. It provides tools to zoom in and\n         * out on parts of the data as well as panning across the dataset.\n         *\n         * @product      highstock gantt\n         * @optionparent navigator\n         */\n        const NavigatorDefaults = {\n            /**\n             * Whether the navigator and scrollbar should adapt to updated data\n             * in the base X axis. When loading data async, as in the demo below,\n             * this should be `false`. Otherwise new data will trigger navigator\n             * redraw, which will cause unwanted looping. In the demo below, the\n             * data in the navigator is set only once. On navigating, only the main\n             * chart content is updated.\n             *\n             * @sample {highstock} stock/demo/lazy-loading/\n             *         Set to false with async data loading\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.adaptToUpdatedData\n             */\n            /**\n             * An integer identifying the index to use for the base series, or a\n             * string representing the id of the series.\n             *\n             * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n             * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n             *\n             * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n             *\n             * @deprecated\n             * @type      {number|string}\n             * @default   0\n             * @apioption navigator.baseSeries\n             */\n            /**\n             * Enable or disable the navigator.\n             *\n             * @sample {highstock} stock/navigator/enabled/\n             *         Disable the navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.enabled\n             */\n            /**\n             * When the chart is inverted, whether to draw the navigator on the\n             * opposite side.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     5.0.8\n             * @apioption navigator.opposite\n             */\n            /**\n             * The height of the navigator.\n             *\n             * @sample {highstock} stock/navigator/height/\n             *         A higher navigator\n             */\n            height: 40,\n            /**\n             * The distance from the nearest element, the X axis or X axis labels.\n             *\n             * @sample {highstock} stock/navigator/margin/\n             *         A margin of 2 draws the navigator closer to the X axis labels\n             */\n            margin: 25,\n            /**\n             * Whether the mask should be inside the range marking the zoomed\n             * range, or outside. In Highcharts Stock 1.x it was always `false`.\n             *\n             * @sample {highstock} stock/demo/maskinside-false/\n             *         False, mask outside\n             *\n             * @since   2.0\n             */\n            maskInside: true,\n            /**\n             * Options for the handles for dragging the zoomed area.\n             *\n             * @sample {highstock} stock/navigator/handles/\n             *         Colored handles\n             */\n            handles: {\n                /**\n                 * Width for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                width: 7,\n                /**\n                 * Height for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                height: 15,\n                /**\n                 * Array to define shapes of handles. 0-index for left, 1-index for\n                 * right.\n                 *\n                 * Additionally, the URL to a graphic can be given on this form:\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"navigator-handle\", \"navigator-handle\"]\n                 * @since   6.0.0\n                 */\n                symbols: ['navigator-handle', 'navigator-handle'],\n                /**\n                 * Allows to enable/disable handles.\n                 *\n                 * @since   6.0.0\n                 */\n                enabled: true,\n                /**\n                 * The width for the handle border and the stripes inside.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since     6.0.0\n                 * @apioption navigator.handles.lineWidth\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill for the handle.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#f2f2f2\" /* Palette.neutralColor5 */,\n                /**\n                 * The stroke for the handle border and the stripes inside.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */\n            },\n            /**\n             * The color of the mask covering the areas of the navigator series\n             * that are currently not visible in the main series. The default\n             * color is bluish with an opacity of 0.3 to see the series below.\n             *\n             * @see In styled mode, the mask is styled with the\n             *      `.highcharts-navigator-mask` and\n             *      `.highcharts-navigator-mask-inside` classes.\n             *\n             * @sample {highstock} stock/navigator/maskfill/\n             *         Blue, semi transparent mask\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default rgba(102,133,194,0.3)\n             */\n            maskFill: color(\"#667aff\" /* Palette.highlightColor60 */).setOpacity(0.3).get(),\n            /**\n             * The color of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #cccccc\n             */\n            outlineColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * The width of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @see In styled mode, the outline stroke width is set with the\n             *      `.highcharts-navigator-outline` class.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {number}\n             */\n            outlineWidth: 1,\n            /**\n             * Options for the navigator series. Available options are the same\n             * as any series, documented at [plotOptions](#plotOptions.series)\n             * and [series](#series).\n             *\n             * Unless data is explicitly defined on navigator.series, the data\n             * is borrowed from the first series in the chart.\n             *\n             * Default series options for the navigator series are:\n             * ```js\n             * series: {\n             *     type: 'areaspline',\n             *     fillOpacity: 0.05,\n             *     dataGrouping: {\n             *         smoothed: true\n             *     },\n             *     lineWidth: 1,\n             *     marker: {\n             *         enabled: false\n             *     }\n             * }\n             * ```\n             *\n             * @see In styled mode, the navigator series is styled with the\n             *      `.highcharts-navigator-series` class.\n             *\n             * @sample {highstock} stock/navigator/series-data/\n             *         Using a separate data set for the navigator\n             * @sample {highstock} stock/navigator/series/\n             *         A green navigator series\n             *\n             * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n             */\n            series: {\n                /**\n                 * The type of the navigator series.\n                 *\n                 * Heads up:\n                 * In column-type navigator, zooming is limited to at least one\n                 * point with its `pointRange`.\n                 *\n                 * @sample {highstock} stock/navigator/column/\n                 *         Column type navigator\n                 *\n                 * @type    {string}\n                 * @default {highstock} `areaspline` if defined, otherwise `line`\n                 * @default {gantt} gantt\n                 */\n                type: (typeof seriesTypes.areaspline === 'undefined' ?\n                    'line' :\n                    'areaspline'),\n                /**\n                 * The fill opacity of the navigator series.\n                 */\n                fillOpacity: 0.05,\n                /**\n                 * The pixel line width of the navigator series.\n                 */\n                lineWidth: 1,\n                /**\n                 * @ignore-option\n                 */\n                compare: null,\n                /**\n                 * @ignore-option\n                 */\n                sonification: {\n                    enabled: false\n                },\n                /**\n                 * Unless data is explicitly defined, the data is borrowed from the\n                 * first series in the chart.\n                 *\n                 * @type      {Array<number|Array<number|string|null>|object|null>}\n                 * @product   highstock\n                 * @apioption navigator.series.data\n                 */\n                /**\n                 * Data grouping options for the navigator series.\n                 *\n                 * @extends plotOptions.series.dataGrouping\n                 */\n                dataGrouping: {\n                    approximation: 'average',\n                    enabled: true,\n                    groupPixelWidth: 2,\n                    // Replace smoothed property by anchors, #12455.\n                    firstAnchor: 'firstPoint',\n                    anchor: 'middle',\n                    lastAnchor: 'lastPoint',\n                    // Day and week differs from plotOptions.series.dataGrouping\n                    units: [\n                        ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                        ['second', [1, 2, 5, 10, 15, 30]],\n                        ['minute', [1, 2, 5, 10, 15, 30]],\n                        ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                        ['day', [1, 2, 3, 4]],\n                        ['week', [1, 2, 3]],\n                        ['month', [1, 3, 6]],\n                        ['year', null]\n                    ]\n                },\n                /**\n                 * Data label options for the navigator series. Data labels are\n                 * disabled by default on the navigator series.\n                 *\n                 * @extends plotOptions.series.dataLabels\n                 */\n                dataLabels: {\n                    enabled: false,\n                    zIndex: 2 // #1839\n                },\n                id: 'highcharts-navigator-series',\n                className: 'highcharts-navigator-series',\n                /**\n                 * Sets the fill color of the navigator series.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption navigator.series.color\n                 */\n                /**\n                 * Line color for the navigator series. Allows setting the color\n                 * while disallowing the default candlestick setting.\n                 *\n                 * @type {Highcharts.ColorString|null}\n                 */\n                lineColor: null,\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * Since Highcharts Stock v8, default value is the same as default\n                 * `pointRange` defined for a specific type (e.g. `null` for\n                 * column type).\n                 *\n                 * In Highcharts Stock version < 8, defaults to 0.\n                 *\n                 * @extends plotOptions.series.pointRange\n                 * @type {number|null}\n                 * @apioption navigator.series.pointRange\n                 */\n                /**\n                 * The threshold option. Setting it to 0 will make the default\n                 * navigator area series draw its area from the 0 value and up.\n                 *\n                 * @type {number|null}\n                 */\n                threshold: null\n            },\n            /**\n             * Enable or disable navigator sticking to right, while adding new\n             * points. If `undefined`, the navigator sticks to the axis maximum only\n             * if it was already at the maximum prior to adding points.\n             *\n             * @type      {boolean}\n             * @default   undefined\n             * @since 10.2.1\n             * @sample {highstock} stock/navigator/sticktomax-false/\n             * stickToMax set to false\n             * @apioption navigator.stickToMax\n             */\n            /**\n             * Options for the navigator X axis. Default series options for the\n             * navigator xAxis are:\n             * ```js\n             * xAxis: {\n             *     tickWidth: 0,\n             *     lineWidth: 0,\n             *     gridLineWidth: 1,\n             *     tickPixelInterval: 200,\n             *     labels: {\n             *            align: 'left',\n             *         style: {\n             *             color: '#888'\n             *         },\n             *         x: 3,\n             *         y: -4\n             *     }\n             * }\n             * ```\n             *\n             * @extends   xAxis\n             * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n             *            showEmpty, maxRange\n             */\n            xAxis: {\n                /**\n                 * Additional range on the right side of the xAxis. Works similar to\n                 * xAxis.maxPadding, but value is set in milliseconds.\n                 * Can be set for both, main xAxis and navigator's xAxis.\n                 *\n                 * @since   6.0.0\n                 */\n                overscroll: 0,\n                className: 'highcharts-navigator-xaxis',\n                tickLength: 0,\n                lineWidth: 0,\n                gridLineColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n                gridLineWidth: 1,\n                tickPixelInterval: 200,\n                labels: {\n                    align: 'left',\n                    /**\n                     * @type {Highcharts.CSSObject}\n                     */\n                    style: {\n                        /** @ignore */\n                        color: \"#000000\" /* Palette.neutralColor100 */,\n                        /** @ignore */\n                        fontSize: '0.7em',\n                        /** @ignore */\n                        opacity: 0.6,\n                        /** @ignore */\n                        textOutline: '2px contrast'\n                    },\n                    x: 3,\n                    y: -4\n                },\n                crosshair: false\n            },\n            /**\n             * Options for the navigator Y axis. Default series options for the\n             * navigator yAxis are:\n             * ```js\n             * yAxis: {\n             *     gridLineWidth: 0,\n             *     startOnTick: false,\n             *     endOnTick: false,\n             *     minPadding: 0.1,\n             *     maxPadding: 0.1,\n             *     labels: {\n             *         enabled: false\n             *     },\n             *     title: {\n             *         text: null\n             *     },\n             *     tickWidth: 0\n             * }\n             * ```\n             *\n             * @extends   yAxis\n             * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n             *            showEmpty, scrollbar, top, units, maxRange, minLength,\n             *            maxLength, resize\n             */\n            yAxis: {\n                className: 'highcharts-navigator-yaxis',\n                gridLineWidth: 0,\n                startOnTick: false,\n                endOnTick: false,\n                minPadding: 0.1,\n                maxPadding: 0.1,\n                labels: {\n                    enabled: false\n                },\n                crosshair: false,\n                title: {\n                    text: null\n                },\n                tickLength: 0,\n                tickWidth: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Maximum range which can be set using the navigator's handles.\n         * Opposite of [xAxis.minRange](#xAxis.minRange).\n         *\n         * @sample {highstock} stock/navigator/maxrange/\n         *         Defined max and min range\n         *\n         * @type      {number}\n         * @since     6.0.0\n         * @product   highstock gantt\n         * @apioption xAxis.maxRange\n         */\n        (''); // keeps doclets above in JS file\n\n        return NavigatorDefaults;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorSymbols.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator.\n         * @private\n         */\n        function navigatorHandle(_x, _y, width, height, options = {}) {\n            const halfWidth = options.width ? options.width / 2 : width, markerPosition = Math.round(halfWidth / 3) + 0.5;\n            height = options.height || height;\n            return [\n                ['M', -halfWidth - 1, 0.5],\n                ['L', halfWidth, 0.5],\n                ['L', halfWidth, height + 0.5],\n                ['L', -halfWidth - 1, height + 0.5],\n                ['L', -halfWidth - 1, 0.5],\n                ['M', -markerPosition, 4],\n                ['L', -markerPosition, height - 3],\n                ['M', markerPosition - 1, 4],\n                ['L', markerPosition - 1, height - 3]\n            ];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorSymbols = {\n            'navigator-handle': navigatorHandle\n        };\n\n        return NavigatorSymbols;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/Navigator/NavigatorSymbols.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Core/Utilities.js']], function (D, H, NavigatorAxisAdditions, NavigatorDefaults, NavigatorSymbols, RendererRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, setOptions } = D;\n        const { composed, isTouchDevice } = H;\n        const { getRendererType } = RendererRegistry;\n        const { addEvent, extend, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let NavigatorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, NavigatorClass, SeriesClass) {\n            NavigatorAxisAdditions.compose(AxisClass);\n            NavigatorConstructor = NavigatorClass;\n            if (pushUnique(composed, compose)) {\n                const chartProto = ChartClass.prototype;\n                chartProto.callbacks.push(onChartCallback);\n                addEvent(ChartClass, 'afterAddSeries', onChartAfterAddSeries);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(ChartClass, 'afterUpdate', onChartAfterUpdate);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'beforeShowResetZoom', onChartBeforeShowResetZoom);\n                addEvent(ChartClass, 'update', onChartUpdate);\n                addEvent(SeriesClass, 'afterUpdate', onSeriesAfterUpdate);\n                extend(getRendererType().prototype.symbols, NavigatorSymbols);\n                extend(defaultOptions, { navigator: NavigatorDefaults });\n            }\n        }\n        /**\n         * Handle adding new series.\n         * @private\n         */\n        function onChartAfterAddSeries() {\n            if (this.navigator) {\n                // Recompute which series should be shown in navigator, and add them\n                this.navigator.setBaseSeries(null, false);\n            }\n        }\n        /**\n         * For stock charts, extend the Chart.setChartSize method so that we can set the\n         * final top position of the navigator once the height of the chart, including\n         * the legend, is determined. #367. We can't use Chart.getMargins, because\n         * labels offsets are not calculated yet.\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            const legend = this.legend, navigator = this.navigator;\n            let legendOptions, xAxis, yAxis;\n            if (navigator) {\n                legendOptions = legend && legend.options;\n                xAxis = navigator.xAxis;\n                yAxis = navigator.yAxis;\n                const { scrollbarHeight, scrollButtonSize } = navigator;\n                // Compute the top position\n                if (this.inverted) {\n                    navigator.left = navigator.opposite ?\n                        this.chartWidth - scrollbarHeight -\n                            navigator.height :\n                        this.spacing[3] + scrollbarHeight;\n                    navigator.top = this.plotTop + scrollButtonSize;\n                }\n                else {\n                    navigator.left = pick(xAxis.left, this.plotLeft + scrollButtonSize);\n                    navigator.top = navigator.navigatorOptions.top ||\n                        this.chartHeight -\n                            navigator.height -\n                            scrollbarHeight -\n                            (this.scrollbar?.options.margin || 0) -\n                            this.spacing[2] -\n                            (this.rangeSelector && this.extraBottomMargin ?\n                                this.rangeSelector.getHeight() :\n                                0) -\n                            ((legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.layout !== 'proximate' && // #13392\n                                legendOptions.enabled &&\n                                !legendOptions.floating) ?\n                                legend.legendHeight +\n                                    pick(legendOptions.margin, 10) :\n                                0) -\n                            (this.titleOffset ? this.titleOffset[2] : 0);\n                }\n                if (xAxis && yAxis) { // false if navigator is disabled (#904)\n                    if (this.inverted) {\n                        xAxis.options.left = yAxis.options.left = navigator.left;\n                    }\n                    else {\n                        xAxis.options.top = yAxis.options.top = navigator.top;\n                    }\n                    xAxis.setAxisSize();\n                    yAxis.setAxisSize();\n                }\n            }\n        }\n        /**\n         * Initialize navigator, if no scrolling exists yet.\n         * @private\n         */\n        function onChartAfterUpdate(event) {\n            if (!this.navigator && !this.scroller &&\n                (this.options.navigator.enabled ||\n                    this.options.scrollbar.enabled)) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n                if (pick(event.redraw, true)) {\n                    this.redraw(event.animation); // #7067\n                }\n            }\n        }\n        /**\n         * Initialize navigator for stock charts\n         * @private\n         */\n        function onChartBeforeRender() {\n            const options = this.options;\n            if (options.navigator.enabled ||\n                options.scrollbar.enabled) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n            }\n        }\n        /**\n         * For Stock charts. For x only zooming, do not to create the zoom button\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector. (#9285)\n         * @private\n         */\n        function onChartBeforeShowResetZoom() {\n            const chartOptions = this.options, navigator = chartOptions.navigator, rangeSelector = chartOptions.rangeSelector;\n            if (((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled)) &&\n                ((!isTouchDevice &&\n                    this.zooming.type === 'x') ||\n                    (isTouchDevice && this.zooming.pinchType === 'x'))) {\n                return false;\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            const navigator = chart.navigator;\n            // Initialize the navigator\n            if (navigator && chart.xAxis[0]) {\n                const extremes = chart.xAxis[0].getExtremes();\n                navigator.render(extremes.min, extremes.max);\n            }\n        }\n        /**\n         * Merge options, if no scrolling exists yet\n         * @private\n         */\n        function onChartUpdate(e) {\n            const navigatorOptions = (e.options.navigator || {}), scrollbarOptions = (e.options.scrollbar || {});\n            if (!this.navigator && !this.scroller &&\n                (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                merge(true, this.options.navigator, navigatorOptions);\n                merge(true, this.options.scrollbar, scrollbarOptions);\n                delete e.options.navigator;\n                delete e.options.scrollbar;\n            }\n        }\n        /**\n         * Handle updating series\n         * @private\n         */\n        function onSeriesAfterUpdate() {\n            if (this.chart.navigator && !this.options.isInternal) {\n                this.chart.navigator.setBaseSeries(null, false);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorComposition = {\n            compose\n        };\n\n        return NavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, defined, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ScrollbarAxis;\n        (function (ScrollbarAxis) {\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            let Scrollbar;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Attaches to axis events to create scrollbars if enabled.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Scrollbar} ScrollbarClass\n             * Scrollbar class to use.\n             */\n            function compose(AxisClass, ScrollbarClass) {\n                if (pushUnique(composed, compose)) {\n                    Scrollbar = ScrollbarClass;\n                    addEvent(AxisClass, 'afterGetOffset', onAxisAfterGetOffset);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                }\n            }\n            ScrollbarAxis.compose = compose;\n            /** @private */\n            function getExtremes(axis) {\n                const axisMin = pick(axis.options && axis.options.min, axis.min);\n                const axisMax = pick(axis.options && axis.options.max, axis.max);\n                return {\n                    axisMin,\n                    axisMax,\n                    scrollMin: defined(axis.dataMin) ?\n                        Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                    scrollMax: defined(axis.dataMax) ?\n                        Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                };\n            }\n            /**\n             * Make space for a scrollbar.\n             * @private\n             */\n            function onAxisAfterGetOffset() {\n                const axis = this, scrollbar = axis.scrollbar, opposite = scrollbar && !scrollbar.options.opposite, index = axis.horiz ? 2 : opposite ? 3 : 1;\n                if (scrollbar) {\n                    // Reset scrollbars offsets\n                    axis.chart.scrollbarsOffsets = [0, 0];\n                    axis.chart.axisOffset[index] +=\n                        scrollbar.size + (scrollbar.options.margin || 0);\n                }\n            }\n            /**\n             * Wrap axis initialization and create scrollbar if enabled.\n             * @private\n             */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (axis.options &&\n                    axis.options.scrollbar &&\n                    axis.options.scrollbar.enabled) {\n                    // Predefined options:\n                    axis.options.scrollbar.vertical = !axis.horiz;\n                    axis.options.startOnTick = axis.options.endOnTick = false;\n                    axis.scrollbar = new Scrollbar(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                    addEvent(axis.scrollbar, 'changed', function (e) {\n                        const { axisMin, axisMax, scrollMin: unitedMin, scrollMax: unitedMax } = getExtremes(axis), range = unitedMax - unitedMin;\n                        let to, from;\n                        // #12834, scroll when show/hide series, wrong extremes\n                        if (!defined(axisMin) || !defined(axisMax)) {\n                            return;\n                        }\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            to = unitedMin + range * this.to;\n                            from = unitedMin + range * this.from;\n                        }\n                        else {\n                            // Y-values in browser are reversed, but this also\n                            // applies for reversed horizontal axis:\n                            to = unitedMin + range * (1 - this.from);\n                            from = unitedMin + range * (1 - this.to);\n                        }\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            // #17977, set animation to undefined instead of true\n                            const animate = e.DOMType === 'mousemove' ||\n                                e.DOMType === 'touchmove' ? false : void 0;\n                            axis.setExtremes(from, to, true, animate, e);\n                        }\n                        else {\n                            // When live redraw is disabled, don't change extremes\n                            // Only change the position of the scollbar thumb\n                            this.setRange(this.from, this.to);\n                        }\n                    });\n                }\n            }\n            /**\n             * Wrap rendering axis, and update scrollbar if one is created.\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, { scrollMin, scrollMax } = getExtremes(axis), scrollbar = axis.scrollbar, offset = (axis.axisTitleMargin + (axis.titleOffset || 0)), scrollbarsOffsets = axis.chart.scrollbarsOffsets, axisMargin = axis.options.margin || 0;\n                let offsetsIndex, from, to;\n                if (scrollbar && scrollbarsOffsets) {\n                    if (axis.horiz) {\n                        // Reserve space for labels/title\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += offset;\n                        }\n                        scrollbar.position(axis.left, (axis.top +\n                            axis.height +\n                            2 +\n                            scrollbarsOffsets[1] -\n                            (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += axisMargin;\n                        }\n                        offsetsIndex = 1;\n                    }\n                    else {\n                        // Reserve space for labels/title\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += offset;\n                        }\n                        let xPosition;\n                        if (!scrollbar.options.opposite) {\n                            xPosition = axis.opposite ? 0 : axisMargin;\n                        }\n                        else {\n                            xPosition = axis.left +\n                                axis.width +\n                                2 +\n                                scrollbarsOffsets[0] -\n                                (axis.opposite ? 0 : axisMargin);\n                        }\n                        scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += axisMargin;\n                        }\n                        offsetsIndex = 0;\n                    }\n                    scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                        (scrollbar.options.margin || 0);\n                    if (isNaN(scrollMin) ||\n                        isNaN(scrollMax) ||\n                        !defined(axis.min) ||\n                        !defined(axis.max) ||\n                        axis.min === axis.max // #10733\n                    ) {\n                        // Default action: when extremes are the same or there is\n                        // not extremes on the axis, but scrollbar exists, make it\n                        // full size\n                        scrollbar.setRange(0, 1);\n                    }\n                    else {\n                        from = ((axis.min - scrollMin) /\n                            (scrollMax - scrollMin));\n                        to = ((axis.max - scrollMin) /\n                            (scrollMax - scrollMin));\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            scrollbar.setRange(from, to);\n                        }\n                        else {\n                            // Inverse vertical axis\n                            scrollbar.setRange(1 - to, 1 - from);\n                        }\n                    }\n                }\n            }\n        })(ScrollbarAxis || (ScrollbarAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/ScrollbarDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can  also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        const ScrollbarDefaults = {\n            /**\n             * The height of the scrollbar. If `buttonsEnabled` is true , the height\n             * also applies to the width of the scroll arrows so that they are always\n             * squares.\n             *\n             * @sample stock/scrollbar/style/\n             *         Non-default height\n             *\n             * @type    {number}\n             */\n            height: 10,\n            /**\n             * The border rounding radius of the bar.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderRadius: 5,\n            /**\n             * The corner radius of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderRadius: 0,\n            /**\n             * Enable or disable the buttons at the end of the scrollbar.\n             *\n             * @since 11.0.0\n             */\n            buttonsEnabled: false,\n            /**\n             * Enable or disable the scrollbar.\n             *\n             * @sample stock/scrollbar/enabled/\n             *         Disable the scrollbar, only use navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.enabled\n             */\n            /**\n             * Whether to redraw the main chart as the scrollbar or the navigator\n             * zoomed window is moved. Defaults to `true` for modern browsers and\n             * `false` for legacy IE browsers as well as mobile devices.\n             *\n             * @sample stock/scrollbar/liveredraw\n             *         Setting live redraw to false\n             *\n             * @type  {boolean}\n             * @since 1.3\n             */\n            liveRedraw: void 0,\n            /**\n             * The margin between the scrollbar and its axis when the scrollbar is\n             * applied directly to an axis, or the navigator in case that is enabled.\n             * Defaults to 10 for axis, 0 for navigator.\n             *\n             * @type {number|undefined}\n             */\n            margin: void 0,\n            /**\n             * The minimum width of the scrollbar.\n             *\n             * @since 1.2.5\n             */\n            minWidth: 6,\n            /** @ignore-option */\n            opposite: true,\n            /**\n             * Whether to show or hide the scrollbar when the scrolled content is\n             * zoomed out to it full extent.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.showFull\n             */\n            step: 0.2,\n            /**\n             * The z index of the scrollbar group.\n             */\n            zIndex: 3,\n            /**\n             * The background color of the scrollbar itself.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBackgroundColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The width of the bar's border.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderWidth: 0,\n            /**\n             * The color of the scrollbar's border.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The color of the small arrow inside the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonArrowColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * The color of scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBackgroundColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The color of the border of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The border width of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderWidth: 1,\n            /**\n             * The color of the small rifles in the middle of the scrollbar.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            rifleColor: 'none',\n            /**\n             * The color of the track background.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBackgroundColor: 'rgba(255, 255, 255, 0.001)',\n            /**\n             * The color of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The corner radius of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderRadius: 5,\n            /**\n             * The width of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderWidth: 1\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/Scrollbar.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, correctFloat, defined, destroyObjectProperties, fireEvent, merge, pick, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Scrollbar {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            }\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            static swapXY(path, vertical) {\n                if (vertical) {\n                    path.forEach((seg) => {\n                        const len = seg.length;\n                        let temp;\n                        for (let i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(renderer, options, chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this._events = [];\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.scrollbarButtons = [];\n                this.scrollbarLeft = 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.trackBorderWidth = 1;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            addEvents() {\n                const buttonsOrder = this.options.inverted ? [1, 0] : [0, 1], buttons = this.scrollbarButtons, bar = this.scrollbarGroup.element, track = this.track.element, mouseDownHandler = this.mouseDownHandler.bind(this), mouseMoveHandler = this.mouseMoveHandler.bind(this), mouseUpHandler = this.mouseUpHandler.bind(this);\n                // Mouse events\n                const _events = [\n                    [\n                        buttons[buttonsOrder[0]].element,\n                        'click',\n                        this.buttonToMinClick.bind(this)\n                    ],\n                    [\n                        buttons[buttonsOrder[1]].element,\n                        'click',\n                        this.buttonToMaxClick.bind(this)\n                    ],\n                    [track, 'click', this.trackClick.bind(this)],\n                    [bar, 'mousedown', mouseDownHandler],\n                    [bar.ownerDocument, 'mousemove', mouseMoveHandler],\n                    [bar.ownerDocument, 'mouseup', mouseUpHandler]\n                ];\n                // Touch events\n                if (H.hasTouch) {\n                    _events.push([bar, 'touchstart', mouseDownHandler], [bar.ownerDocument, 'touchmove', mouseMoveHandler], [bar.ownerDocument, 'touchend', mouseUpHandler]);\n                }\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            }\n            buttonToMaxClick(e) {\n                const scroller = this;\n                const range = ((scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            buttonToMinClick(e) {\n                const scroller = this;\n                const range = correctFloat(scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            cursorToScrollbarPosition(normalizedEvent) {\n                const scroller = this, options = scroller.options, minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                    options.minWidth :\n                    0; // minWidth distorts translation\n                return {\n                    chartX: (normalizedEvent.chartX - scroller.x -\n                        scroller.xOffset) /\n                        (scroller.barWidth - minWidthDifference),\n                    chartY: (normalizedEvent.chartY - scroller.y -\n                        scroller.yOffset) /\n                        (scroller.barWidth - minWidthDifference)\n                };\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            destroy() {\n                const scroller = this, navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            }\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            drawScrollbarButton(index) {\n                const scroller = this, renderer = scroller.renderer, scrollbarButtons = scroller.scrollbarButtons, options = scroller.options, size = scroller.size, group = renderer.g().add(scroller.group);\n                scrollbarButtons.push(group);\n                if (options.buttonsEnabled) {\n                    // Create a rectangle for the scrollbar button\n                    const rect = renderer.rect()\n                        .addClass('highcharts-scrollbar-button')\n                        .add(group);\n                    // Presentational attributes\n                    if (!scroller.chart.styledMode) {\n                        rect.attr({\n                            stroke: options.buttonBorderColor,\n                            'stroke-width': options.buttonBorderWidth,\n                            fill: options.buttonBackgroundColor\n                        });\n                    }\n                    // Place the rectangle based on the rendered stroke width\n                    rect.attr(rect.crisp({\n                        x: -0.5,\n                        y: -0.5,\n                        // +1 to compensate for crispifying in rect method\n                        width: size + 1,\n                        height: size + 1,\n                        r: options.buttonBorderRadius\n                    }, rect.strokeWidth()));\n                    // Button arrow\n                    const arrow = renderer\n                        .path(Scrollbar.swapXY([[\n                            'M',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 - 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 + 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? 2 : -2),\n                            size / 2\n                        ]], options.vertical))\n                        .addClass('highcharts-scrollbar-arrow')\n                        .add(scrollbarButtons[index]);\n                    if (!scroller.chart.styledMode) {\n                        arrow.attr({\n                            fill: options.buttonArrowColor\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            init(renderer, options, chart) {\n                const scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.options.margin = pick(scroller.options.margin, 10);\n                scroller.chart = chart;\n                // backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            }\n            mouseDownHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer.normalize(e), mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            }\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            mouseMoveHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer.normalize(e), options = scroller.options, direction = options.vertical ?\n                    'chartY' : 'chartX', initPositions = scroller.initPositions || [];\n                let scrollPosition, chartPosition, change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            }\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            mouseUpHandler(e) {\n                const scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            }\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scorllbar\n             */\n            position(x, y, width, height) {\n                const scroller = this, options = scroller.options, { buttonsEnabled, margin = 0, vertical } = options, method = scroller.rendered ? 'animate' : 'attr';\n                let xOffset = height, yOffset = 0;\n                // Make the scrollbar visible when it is repositioned, #15763.\n                scroller.group.show();\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.yOffset = yOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = height - (buttonsEnabled ? width * 2 : 0);\n                    scroller.x = x = x + margin;\n                }\n                else {\n                    scroller.height = height = scroller.size;\n                    scroller.xOffset = xOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = width - (buttonsEnabled ? height * 2 : 0);\n                    scroller.y = scroller.y + margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button to its place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            removeEvents() {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            }\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            render() {\n                const scroller = this, renderer = scroller.renderer, options = scroller.options, size = scroller.size, styledMode = scroller.chart.styledMode, group = renderer.g('scrollbar')\n                    .attr({\n                    zIndex: options.zIndex\n                })\n                    .hide() // initially hide the scrollbar #15863\n                    .add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                const trackBorderWidth = scroller.trackBorderWidth =\n                    scroller.track.strokeWidth();\n                scroller.track.attr({\n                    x: -trackBorderWidth % 2 / 2,\n                    y: -trackBorderWidth % 2 / 2\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size - trackBorderWidth,\n                    width: size - trackBorderWidth,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-scroller.scrollbarStrokeWidth % 2 / 2, -scroller.scrollbarStrokeWidth % 2 / 2);\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            }\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            setRange(from, to) {\n                const scroller = this, options = scroller.options, vertical = options.vertical, minWidth = options.minWidth, fullWidth = scroller.barWidth, method = (this.rendered &&\n                    !this.hasDragged &&\n                    !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                const toPX = fullWidth * Math.min(to, 1);\n                let fromPX, newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                const newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                const newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                // Store current position:\n                scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show();\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            }\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            shouldUpdateExtremes(eventType) {\n                return (pick(this.options.liveRedraw, H.svg &&\n                    !H.isTouchDevice &&\n                    !this.chart.boosted) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            }\n            trackClick(e) {\n                const scroller = this;\n                const normalizedEvent = scroller.chart.pointer.normalize(e), range = scroller.to - scroller.from, top = scroller.y + scroller.scrollbarTop, left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            update(options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            }\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            updatePosition(from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Scrollbar.defaultOptions = ScrollbarDefaults;\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Stock/Navigator/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorComposition.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Utilities.js']], function (Axis, D, H, NavigatorAxisAdditions, NavigatorComposition, Scrollbar, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { hasTouch, isTouchDevice } = H;\n        const { addEvent, clamp, correctFloat, defined, destroyObjectProperties, erase, extend, find, fireEvent, isArray, isNumber, merge, pick, removeEvent, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Finding the min or max of a set of variables where we don't know if they are\n         * defined, is a pattern that is repeated several places in Highcharts. Consider\n         * making this a global utility method.\n         * @private\n         */\n        function numExt(extreme, ...args) {\n            const numbers = [].filter.call(args, isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        class Navigator {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, SeriesClass) {\n                NavigatorComposition.compose(AxisClass, ChartClass, Navigator, SeriesClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.scrollbarHeight = 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator.\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        Flag for chart.inverted\n             *\n             * @param {string} verb\n             *        Use 'animate' or 'attr'\n             */\n            drawHandle(x, index, inverted, verb) {\n                const navigator = this, height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawOutline(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, maskInside = navigator.navigatorOptions.maskInside, outlineWidth = navigator.outline.strokeWidth(), halfOutline = outlineWidth / 2, outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                scrollButtonSize = navigator.scrollButtonSize, navigatorSize = navigator.size, navigatorTop = navigator.top, height = navigator.height, lineTop = navigatorTop - halfOutline, lineBtm = navigatorTop + height;\n                let left = navigator.left, verticalMin, path;\n                if (inverted) {\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + height,\n                            navigatorTop - scrollButtonSize - outlineCorrection\n                        ],\n                        // top right of zoomed range\n                        ['L', left + height, verticalMin],\n                        ['L', left, verticalMin],\n                        ['M', left, zoomedMax],\n                        ['L', left + height, zoomedMax],\n                        [\n                            'L',\n                            left + height,\n                            navigatorTop + navigatorSize + scrollButtonSize\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', left + height, verticalMin - halfOutline], \n                        // upper right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    left -= scrollButtonSize;\n                    zoomedMin += left + scrollButtonSize - outlineCorrection;\n                    zoomedMax += left + scrollButtonSize - outlineCorrection;\n                    path = [\n                        // left\n                        ['M', left, lineTop],\n                        // upper left of zoomed range\n                        ['L', zoomedMin, lineTop],\n                        // lower left of z.r.\n                        ['L', zoomedMin, lineBtm],\n                        // lower right of z.r.\n                        ['M', zoomedMax, lineBtm],\n                        // upper right of z.r.\n                        ['L', zoomedMax, lineTop],\n                        // right\n                        [\n                            'L',\n                            left + navigatorSize + scrollButtonSize * 2,\n                            navigatorTop + halfOutline\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, lineTop], \n                        // upper right of z.r.\n                        ['L', zoomedMax + halfOutline, lineTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawMasks(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, left = navigator.left, top = navigator.top, navigatorHeight = navigator.height;\n                let height, width, x, y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach((shade, i) => {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            }\n            /**\n             * Generate DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            renderElements() {\n                const navigator = this, navigatorOptions = navigator.navigatorOptions, maskInside = navigatorOptions.maskInside, chart = navigator.chart, inverted = chart.inverted, renderer = chart.renderer, mouseCursor = {\n                    cursor: inverted ? 'ns-resize' : 'ew-resize'\n                }, \n                // Create the main navigator group\n                navigatorGroup = navigator.navigatorGroup = renderer\n                    .g('navigator')\n                    .attr({\n                    zIndex: 8,\n                    visibility: 'hidden'\n                })\n                    .add();\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach((hasMask, index) => {\n                    const shade = renderer.rect()\n                        .addClass('highcharts-navigator-mask' +\n                        (index === 1 ? '-inside' : '-outside'))\n                        .add(navigatorGroup);\n                    if (!chart.styledMode) {\n                        shade.attr({\n                            fill: hasMask ?\n                                navigatorOptions.maskFill :\n                                'rgba(0,0,0,0)'\n                        });\n                        if (index === 1) {\n                            shade.css(mouseCursor);\n                        }\n                    }\n                    navigator.shades[index] = shade;\n                });\n                // Create the outline:\n                navigator.outline = renderer.path()\n                    .addClass('highcharts-navigator-outline')\n                    .add(navigatorGroup);\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles && navigatorOptions.handles.enabled) {\n                    const handlesOptions = navigatorOptions.handles, { height, width } = handlesOptions;\n                    [0, 1].forEach((index) => {\n                        navigator.handles[index] = renderer.symbol(handlesOptions.symbols[index], -width / 2 - 1, 0, width, height, handlesOptions);\n                        if (chart.inverted) {\n                            navigator.handles[index].attr({\n                                rotation: 90,\n                                rotationOriginX: Math.floor(-width / 2),\n                                rotationOriginY: (height + width) / 2\n                            });\n                        }\n                        // zIndex = 6 for right handle, 7 for left.\n                        // Can't be 10, because of the tooltip in inverted chart #2908\n                        navigator.handles[index].attr({ zIndex: 7 - index })\n                            .addClass('highcharts-navigator-handle ' +\n                            'highcharts-navigator-handle-' +\n                            ['left', 'right'][index]).add(navigatorGroup);\n                        if (!chart.styledMode) {\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            }\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            update(options) {\n                // Remove references to old navigator series in base series\n                (this.series || []).forEach((series) => {\n                    if (series.baseSeries) {\n                        delete series.baseSeries.navigatorSeries;\n                    }\n                });\n                // Destroy and rebuild navigator\n                this.destroy();\n                const chartOptions = this.chart.options;\n                merge(true, chartOptions.navigator, options);\n                this.init(this.chart);\n            }\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            render(min, max, pxMin, pxMax) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, pointRange = xAxis.pointRange || 0, scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis, navigatorEnabled = navigator.navigatorEnabled, rendered = navigator.rendered, inverted = chart.inverted, minRange = chart.xAxis[0].minRange, maxRange = chart.xAxis[0].options.maxRange, scrollButtonSize = navigator.scrollButtonSize;\n                let navigatorWidth, scrollbarLeft, scrollbarTop, scrollbarHeight = navigator.scrollbarHeight, navigatorSize, verb;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // in case of scrollbar only, without navigator\n                chart.plotLeft + scrollButtonSize +\n                    (inverted ? chart.plotWidth : 0));\n                let zoomedMax = navigator.size = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollButtonSize);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollButtonSize;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                const newMin = xAxis.toValue(pxMin, true), newMax = xAxis.toValue(pxMax, true), currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                const zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'inherit'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollButtonSize;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollButtonSize;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollButtonSize;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n                fireEvent(this, 'afterRender');\n            }\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            addMouseEvents() {\n                const navigator = this, chart = navigator.chart, container = chart.container;\n                let eventsToUnbind = [], mouseMoveHandler, mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                // Add mouse move and mouseup events. These are bind to doc/container,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                eventsToUnbind.push(addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler));\n                // Touch events\n                if (hasTouch) {\n                    eventsToUnbind.push(addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                    eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                }\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            }\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            getPartsEvents(eventName) {\n                const navigator = this, events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            }\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            shadesMousedown(e, index) {\n                e = this.chart.pointer.normalize(e);\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, zoomedMin = navigator.zoomedMin, navigatorSize = navigator.size, range = navigator.range;\n                let navigatorPosition = navigator.left, chartX = e.chartX, fixedMax, fixedMin, ext, left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // it has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, null, // auto animation\n                            { trigger: 'navigator' });\n                        }\n                    }\n                }\n            }\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            handlesMousedown(e, index) {\n                e = this.chart.pointer.normalize(e);\n                const navigator = this, chart = navigator.chart, baseXAxis = chart.xAxis[0], \n                // For reversed axes, min and max are changed,\n                // so the other extreme should be stored\n                reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.fixedRange = null;\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseMove(e) {\n                const navigator = this, chart = navigator.chart, navigatorSize = navigator.navigatorSize, range = navigator.range, dragOffset = navigator.dragOffset, inverted = chart.inverted;\n                let left = navigator.left, chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer.normalize(e);\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // outside left\n                            chartX = dragOffset;\n                            // outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on touch\n                        // devices or if the chart is in boost.\n                        !isTouchDevice &&\n                            !this.chart.boosted)) {\n                        e.DOMType = e.type;\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseUp(e) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, scrollbar = navigator.scrollbar, DOMEvent = e.DOMEvent || e, inverted = chart.inverted, verb = navigator.rendered && !navigator.hasDragged ?\n                    'animate' : 'attr';\n                let zoomedMax, zoomedMin, unionExtremes, fixedMin, fixedMax, ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, \n                        // Run animation when clicking buttons, scrollbar track etc,\n                        // but not when dragging handles or scrollbar\n                        navigator.hasDragged ? false : null, {\n                            trigger: 'navigator',\n                            triggerOp: 'navigator-drag',\n                            DOMEvent: DOMEvent // #1838\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            removeEvents() {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            }\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            removeBaseSeriesEvents() {\n                const baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            }\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             */\n            init(chart) {\n                const chartOptions = chart.options, navigatorOptions = chartOptions.navigator || {}, navigatorEnabled = navigatorOptions.enabled, scrollbarOptions = chartOptions.scrollbar || {}, scrollbarEnabled = scrollbarOptions.enabled, height = navigatorEnabled && navigatorOptions.height || 0, scrollbarHeight = scrollbarEnabled && scrollbarOptions.height || 0, scrollButtonSize = scrollbarOptions.buttonsEnabled && scrollbarHeight || 0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollButtonSize = scrollButtonSize;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n                const navigator = this, baseSeries = navigator.baseSeries, xAxisIndex = chart.xAxis.length, yAxisIndex = chart.yAxis.length, baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                    chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    // an x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // inherit base xAxis' break and ordinal options\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal\n                    }, navigatorOptions.xAxis, {\n                        id: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        type: 'datetime',\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true,\n                        startOnTick: false,\n                        endOnTick: false,\n                        minPadding: 0,\n                        maxPadding: 0,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets: [scrollButtonSize, 0, -scrollButtonSize, 0],\n                        width: height\n                    } : {\n                        offsets: [0, -scrollButtonSize, 0, scrollButtonSize],\n                        height: height\n                    }), 'xAxis');\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        id: 'navigator-y-axis',\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false),\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }), 'yAxis');\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // in case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            const axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollButtonSize, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // from pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // from value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxisAdditions.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    const options = merge(chart.options.scrollbar, { vertical: chart.inverted });\n                    if (!isNumber(options.margin) && navigator.navigatorEnabled) {\n                        options.margin = chart.inverted ? -3 : 3;\n                    }\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, options, chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        const range = navigator.size, to = range * this.to, from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            }\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            getUnionExtremes(returnFalseOnNoBaseSeries) {\n                const baseAxis = this.chart.xAxis[0], navAxis = this.xAxis, navAxisOptions = navAxis.options, baseAxisOptions = baseAxis.options;\n                let ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            }\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            setBaseSeries(baseSeriesOptions, redraw) {\n                const chart = this.chart, baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, (s) => (!s.options.isInternal)).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach((series, i) => {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            }\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             */\n            updateNavigatorSeries(addEvents, redraw) {\n                const navigator = this, chart = navigator.chart, baseSeries = navigator.baseSeries, navSeriesMixin = {\n                    enableMouseTracking: false,\n                    index: null,\n                    linkedTo: null,\n                    group: 'nav',\n                    padXAxis: false,\n                    xAxis: 'navigator-x-axis',\n                    yAxis: 'navigator-y-axis',\n                    showInLegend: false,\n                    stacking: void 0,\n                    isInternal: true,\n                    states: {\n                        inactive: {\n                            opacity: 1\n                        }\n                    }\n                }, \n                // Remove navigator series that are no longer in the baseSeries\n                navigatorSeries = navigator.series =\n                    (navigator.series || []).filter((navSeries) => {\n                        const base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                let baseOptions, mergedNavSeriesOptions, chartNavigatorSeriesOptions = navigator.navigatorOptions.series, baseNavigatorOptions;\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach((base) => {\n                        const linkedNavSeries = base.navigatorSeries, userNavOptions = extend(\n                        // Grab color and visibility from base as default\n                        {\n                            color: base.color,\n                            visible: base.visible\n                        }, !isArray(chartNavigatorSeriesOptions) ?\n                            chartNavigatorSeriesOptions :\n                            defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        const navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach((userSeriesOptions, i) => {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            }\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            addBaseSeriesEvents() {\n                const navigator = this, baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach((base) => {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitily\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                });\n            }\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param {number} currentSeriesMin\n             *        Minium from the current series\n             * @return {number}\n             *         Minimum from all series\n             */\n            getBaseSeriesMin(currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData && series.xData.length ?\n                        series.xData[0] : min);\n                }, currentSeriesMin);\n            }\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            modifyNavigatorAxisExtremes() {\n                const xAxis = this.xAxis;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    const unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            }\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            modifyBaseAxisExtremes() {\n                const baseXAxis = this, navigator = baseXAxis.chart.navigator, baseExtremes = baseXAxis.getExtremes(), baseMin = baseExtremes.min, baseMax = baseExtremes.max, baseDataMin = baseExtremes.dataMin, baseDataMax = baseExtremes.dataMax, range = baseMax - baseMin, stickToMin = navigator.stickToMin, stickToMax = navigator.stickToMax, overscroll = pick(baseXAxis.options.overscroll, 0), navigatorSeries = navigator.series && navigator.series[0], hasSetExtremes = !!baseXAxis.setExtremes, \n                // When the extremes have been set by range selector button, don't\n                // stick to min or max. The range selector buttons will handle the\n                // extremes. (#5489)\n                unmutable = baseXAxis.eventArgs &&\n                    baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                let newMax, newMin;\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            }\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            updatedDataHandler() {\n                const navigator = this.chart.navigator, baseSeries = this, navigatorSeries = this.navigatorSeries, shouldStickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data comes in, unless user set navigator.stickToMax to false.\n                navigator.stickToMax = pick(this.chart.options.navigator &&\n                    this.chart.options.navigator.stickToMax, shouldStickToMax);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            }\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            shouldStickToMin(baseSeries, navigator) {\n                const xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]), xAxis = baseSeries.xAxis, max = xAxis.max, min = xAxis.min, range = xAxis.options.range;\n                let stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            }\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            addChartEvents() {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    const navigator = this.navigator, xAxis = navigator && (navigator.baseSeries &&\n                        navigator.baseSeries[0] &&\n                        navigator.baseSeries[0].xAxis ||\n                        this.xAxis[0]); // #5709, #13114\n                    if (xAxis) {\n                        navigator.render(xAxis.min, xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    let chart = this, navigator = chart.navigator, marginName = navigator.opposite ?\n                        'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.height + navigator.scrollbarHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }));\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            destroy() {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach((s) => {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach((prop) => {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                });\n                // Destroy elements in collection\n                [this.handles].forEach((coll) => {\n                    destroyObjectProperties(coll);\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Navigator;\n    });\n    _registerModule(_modules, 'Series/PathUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const getLinkPath = {\n            'default': getDefaultPath,\n            straight: getStraightPath,\n            curved: getCurvedPath\n        };\n        function getDefaultPath(pathParams) {\n            const { x1, y1, x2, y2, width = 0, inverted = false, radius, parentVisible } = pathParams;\n            const path = [\n                ['M', x1, y1],\n                ['L', x1, y1],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2]\n            ];\n            return parentVisible ?\n                applyRadius([\n                    ['M', x1, y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y2],\n                    ['L', x2, y2]\n                ], radius) :\n                path;\n        }\n        function getStraightPath(pathParams) {\n            const { x1, y1, x2, y2, width = 0, inverted = false, parentVisible } = pathParams;\n            return parentVisible ? [\n                ['M', x1, y1],\n                ['L', x1 + width * (inverted ? -1 : 1), y2],\n                ['L', x2, y2]\n            ] : [\n                ['M', x1, y1],\n                ['L', x1, y2],\n                ['L', x1, y2]\n            ];\n        }\n        function getCurvedPath(pathParams) {\n            const { x1, y1, x2, y2, offset = 0, width = 0, inverted = false, parentVisible } = pathParams;\n            return parentVisible ?\n                [\n                    ['M', x1, y1],\n                    [\n                        'C',\n                        x1 + offset,\n                        y1,\n                        x1 - offset + width * (inverted ? -1 : 1),\n                        y2,\n                        x1 + width * (inverted ? -1 : 1),\n                        y2\n                    ],\n                    ['L', x2, y2]\n                ] :\n                [\n                    ['M', x1, y1],\n                    ['C', x1, y1, x1, y2, x1, y2],\n                    ['L', x2, y2]\n                ];\n        }\n        /**\n         * General function to apply corner radius to a path\n         * @private\n         */\n        function applyRadius(path, r) {\n            const d = [];\n            for (let i = 0; i < path.length; i++) {\n                const x = path[i][1];\n                const y = path[i][2];\n                if (typeof x === 'number' && typeof y === 'number') {\n                    // moveTo\n                    if (i === 0) {\n                        d.push(['M', x, y]);\n                    }\n                    else if (i === path.length - 1) {\n                        d.push(['L', x, y]);\n                        // curveTo\n                    }\n                    else if (r) {\n                        const prevSeg = path[i - 1];\n                        const nextSeg = path[i + 1];\n                        if (prevSeg && nextSeg) {\n                            const x1 = prevSeg[1], y1 = prevSeg[2], x2 = nextSeg[1], y2 = nextSeg[2];\n                            // Only apply to breaks\n                            if (typeof x1 === 'number' &&\n                                typeof x2 === 'number' &&\n                                typeof y1 === 'number' &&\n                                typeof y2 === 'number' &&\n                                x1 !== x2 &&\n                                y1 !== y2) {\n                                const directionX = x1 < x2 ? 1 : -1, directionY = y1 < y2 ? 1 : -1;\n                                d.push([\n                                    'L',\n                                    x - directionX * Math.min(Math.abs(x - x1), r),\n                                    y - directionY * Math.min(Math.abs(y - y1), r)\n                                ], [\n                                    'C',\n                                    x,\n                                    y,\n                                    x,\n                                    y,\n                                    x + directionX * Math.min(Math.abs(x - x2), r),\n                                    y + directionY * Math.min(Math.abs(y - y2), r)\n                                ]);\n                            }\n                        }\n                        // lineTo\n                    }\n                    else {\n                        d.push(['L', x, y]);\n                    }\n                }\n            }\n            return d;\n        }\n        const PathUtilities = {\n            applyRadius,\n            getLinkPath\n        };\n\n        return PathUtilities;\n    });\n    _registerModule(_modules, 'Gantt/PathfinderAlgorithms.js', [_modules['Series/PathUtilities.js'], _modules['Core/Utilities.js']], function (PathUtilities, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Author: Ã˜ystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const { min, max, abs } = Math;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get index of last obstacle before xMin. Employs a type of binary search, and\n         * thus requires that obstacles are sorted by xMin value.\n         *\n         * @private\n         * @function findLastObstacleBefore\n         *\n         * @param {Array<object>} obstacles\n         *        Array of obstacles to search in.\n         *\n         * @param {number} xMin\n         *        The xMin threshold.\n         *\n         * @param {number} [startIx]\n         *        Starting index to search from. Must be within array range.\n         *\n         * @return {number}\n         *         The index of the last obstacle element before xMin.\n         */\n        function findLastObstacleBefore(obstacles, xMin, startIx) {\n            const min = xMin - 0.0000001; // Make sure we include all obstacles at xMin\n            let left = startIx || 0, // Left limit\n            right = obstacles.length - 1, // Right limit\n            cursor, cmp;\n            while (left <= right) {\n                cursor = (right + left) >> 1;\n                cmp = min - obstacles[cursor].xMin;\n                if (cmp > 0) {\n                    left = cursor + 1;\n                }\n                else if (cmp < 0) {\n                    right = cursor - 1;\n                }\n                else {\n                    return cursor;\n                }\n            }\n            return left > 0 ? left - 1 : 0;\n        }\n        /**\n         * Test if a point lays within an obstacle.\n         *\n         * @private\n         * @function pointWithinObstacle\n         *\n         * @param {Object} obstacle\n         *        Obstacle to test.\n         *\n         * @param {Highcharts.Point} point\n         *        Point with x/y props.\n         *\n         * @return {boolean}\n         *         Whether point is within the obstacle or not.\n         */\n        function pointWithinObstacle(obstacle, point) {\n            return (point.x <= obstacle.xMax &&\n                point.x >= obstacle.xMin &&\n                point.y <= obstacle.yMax &&\n                point.y >= obstacle.yMin);\n        }\n        /**\n         * Find the index of an obstacle that wraps around a point.\n         * Returns -1 if not found.\n         *\n         * @private\n         * @function findObstacleFromPoint\n         *\n         * @param {Array<object>} obstacles\n         *        Obstacles to test.\n         *\n         * @param {Highcharts.Point} point\n         *        Point with x/y props.\n         *\n         * @return {number}\n         *         Ix of the obstacle in the array, or -1 if not found.\n         */\n        function findObstacleFromPoint(obstacles, point) {\n            let i = findLastObstacleBefore(obstacles, point.x + 1) + 1;\n            while (i--) {\n                if (obstacles[i].xMax >= point.x &&\n                    // Optimization using lazy evaluation\n                    pointWithinObstacle(obstacles[i], point)) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        /**\n         * Get SVG path array from array of line segments.\n         *\n         * @private\n         * @function pathFromSegments\n         *\n         * @param {Array<object>} segments\n         *        The segments to build the path from.\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         SVG path array as accepted by the SVG Renderer.\n         */\n        function pathFromSegments(segments) {\n            const path = [];\n            if (segments.length) {\n                path.push(['M', segments[0].start.x, segments[0].start.y]);\n                for (let i = 0; i < segments.length; ++i) {\n                    path.push(['L', segments[i].end.x, segments[i].end.y]);\n                }\n            }\n            return path;\n        }\n        /**\n         * Limits obstacle max/mins in all directions to bounds. Modifies input\n         * obstacle.\n         *\n         * @private\n         * @function limitObstacleToBounds\n         *\n         * @param {Object} obstacle\n         *        Obstacle to limit.\n         *\n         * @param {Object} bounds\n         *        Bounds to use as limit.\n         *\n         * @return {void}\n         */\n        function limitObstacleToBounds(obstacle, bounds) {\n            obstacle.yMin = max(obstacle.yMin, bounds.yMin);\n            obstacle.yMax = min(obstacle.yMax, bounds.yMax);\n            obstacle.xMin = max(obstacle.xMin, bounds.xMin);\n            obstacle.xMax = min(obstacle.xMax, bounds.xMax);\n        }\n        /**\n         * Get an SVG path from a starting coordinate to an ending coordinate.\n         * Draws a straight line.\n         *\n         * @function Highcharts.Pathfinder.algorithms.straight\n         *\n         * @param {Highcharts.PositionObject} start\n         *        Starting coordinate, object with x/y props.\n         *\n         * @param {Highcharts.PositionObject} end\n         *        Ending coordinate, object with x/y props.\n         *\n         * @return {Object}\n         *         An object with the SVG path in Array form as accepted by the SVG\n         *         renderer, as well as an array of new obstacles making up this\n         *         path.\n         */\n        function straight(start, end) {\n            return {\n                path: [\n                    ['M', start.x, start.y],\n                    ['L', end.x, end.y]\n                ],\n                obstacles: [{ start: start, end: end }]\n            };\n        }\n        /**\n         * Find a path from a starting coordinate to an ending coordinate, using\n         * right angles only, and taking only starting/ending obstacle into\n         * consideration.\n         *\n         * @function Highcharts.Pathfinder.algorithms.simpleConnect\n         *\n         * @param {Highcharts.PositionObject} start\n         *        Starting coordinate, object with x/y props.\n         *\n         * @param {Highcharts.PositionObject} end\n         *        Ending coordinate, object with x/y props.\n         *\n         * @param {Object} options\n         *        Options for the algorithm:\n         *        - chartObstacles: Array of chart obstacles to avoid\n         *        - startDirectionX: Optional. True if starting in the X direction.\n         *          If not provided, the algorithm starts in the direction that is\n         *          the furthest between start/end.\n         *\n         * @return {Object}\n         *         An object with the SVG path in Array form as accepted by the SVG\n         *         renderer, as well as an array of new obstacles making up this\n         *         path.\n         */\n        const simpleConnect = function (start, end, options) {\n            const segments = [], chartObstacles = options.chartObstacles, startObstacleIx = findObstacleFromPoint(chartObstacles, start), endObstacleIx = findObstacleFromPoint(chartObstacles, end);\n            let endSegment, dir = pick(options.startDirectionX, abs(end.x - start.x) > abs(end.y - start.y)) ? 'x' : 'y', startObstacle, endObstacle, waypoint, useMax, endPoint;\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Return a clone of a point with a property set from a target object,\n             * optionally with an offset\n             * @private\n             */\n            function copyFromPoint(from, fromKey, to, toKey, offset) {\n                const point = {\n                    x: from.x,\n                    y: from.y\n                };\n                point[fromKey] = to[toKey || fromKey] + (offset || 0);\n                return point;\n            }\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Return waypoint outside obstacle.\n             * @private\n             */\n            function getMeOut(obstacle, point, direction) {\n                const useMax = abs(point[direction] - obstacle[direction + 'Min']) >\n                    abs(point[direction] - obstacle[direction + 'Max']);\n                return copyFromPoint(point, direction, obstacle, direction + (useMax ? 'Max' : 'Min'), useMax ? 1 : -1);\n            }\n            // Pull out end point\n            if (endObstacleIx > -1) {\n                endObstacle = chartObstacles[endObstacleIx];\n                waypoint = getMeOut(endObstacle, end, dir);\n                endSegment = {\n                    start: waypoint,\n                    end: end\n                };\n                endPoint = waypoint;\n            }\n            else {\n                endPoint = end;\n            }\n            // If an obstacle envelops the start point, add a segment to get out,\n            // and around it.\n            if (startObstacleIx > -1) {\n                startObstacle = chartObstacles[startObstacleIx];\n                waypoint = getMeOut(startObstacle, start, dir);\n                segments.push({\n                    start: start,\n                    end: waypoint\n                });\n                // If we are going back again, switch direction to get around start\n                // obstacle.\n                if (\n                // Going towards max from start:\n                waypoint[dir] >= start[dir] ===\n                    // Going towards min to end:\n                    waypoint[dir] >= endPoint[dir]) {\n                    dir = dir === 'y' ? 'x' : 'y';\n                    useMax = start[dir] < end[dir];\n                    segments.push({\n                        start: waypoint,\n                        end: copyFromPoint(waypoint, dir, startObstacle, dir + (useMax ? 'Max' : 'Min'), useMax ? 1 : -1)\n                    });\n                    // Switch direction again\n                    dir = dir === 'y' ? 'x' : 'y';\n                }\n            }\n            // We are around the start obstacle. Go towards the end in one\n            // direction.\n            const prevWaypoint = segments.length ?\n                segments[segments.length - 1].end :\n                start;\n            waypoint = copyFromPoint(prevWaypoint, dir, endPoint);\n            segments.push({\n                start: prevWaypoint,\n                end: waypoint\n            });\n            // Final run to end point in the other direction\n            dir = dir === 'y' ? 'x' : 'y';\n            const waypoint2 = copyFromPoint(waypoint, dir, endPoint);\n            segments.push({\n                start: waypoint,\n                end: waypoint2\n            });\n            // Finally add the endSegment\n            segments.push(endSegment);\n            const path = PathUtilities.applyRadius(pathFromSegments(segments), options.radius);\n            return {\n                path,\n                obstacles: segments\n            };\n        };\n        simpleConnect.requiresObstacles = true;\n        /**\n         * Find a path from a starting coordinate to an ending coordinate, taking\n         * obstacles into consideration. Might not always find the optimal path,\n         * but is fast, and usually good enough.\n         *\n         * @function Highcharts.Pathfinder.algorithms.fastAvoid\n         *\n         * @param {Highcharts.PositionObject} start\n         *        Starting coordinate, object with x/y props.\n         *\n         * @param {Highcharts.PositionObject} end\n         *        Ending coordinate, object with x/y props.\n         *\n         * @param {Object} options\n         *        Options for the algorithm.\n         *        - chartObstacles:  Array of chart obstacles to avoid\n         *        - lineObstacles:   Array of line obstacles to jump over\n         *        - obstacleMetrics: Object with metrics of chartObstacles cached\n         *        - hardBounds:      Hard boundaries to not cross\n         *        - obstacleOptions: Options for the obstacles, including margin\n         *        - startDirectionX: Optional. True if starting in the X direction.\n         *                           If not provided, the algorithm starts in the\n         *                           direction that is the furthest between\n         *                           start/end.\n         *\n         * @return {Object}\n         *         An object with the SVG path in Array form as accepted by the SVG\n         *         renderer, as well as an array of new obstacles making up this\n         *         path.\n         */\n        function fastAvoid(start, end, options) {\n            /*\n                Algorithm rules/description\n                - Find initial direction\n                - Determine soft/hard max for each direction.\n                - Move along initial direction until obstacle.\n                - Change direction.\n                - If hitting obstacle, first try to change length of previous line\n                    before changing direction again.\n\n                Soft min/max x = start/destination x +/- widest obstacle + margin\n                Soft min/max y = start/destination y +/- tallest obstacle + margin\n\n                @todo:\n                    - Make retrospective, try changing prev segment to reduce\n                        corners\n                    - Fix logic for breaking out of end-points - not always picking\n                        the best direction currently\n                    - When going around the end obstacle we should not always go the\n                        shortest route, rather pick the one closer to the end point\n            */\n            const dirIsX = pick(options.startDirectionX, abs(end.x - start.x) > abs(end.y - start.y)), dir = dirIsX ? 'x' : 'y', endSegments = [], \n            // Boundaries to stay within. If beyond soft boundary, prefer to\n            // change direction ASAP. If at hard max, always change immediately.\n            metrics = options.obstacleMetrics, softMinX = min(start.x, end.x) - metrics.maxWidth - 10, softMaxX = max(start.x, end.x) + metrics.maxWidth + 10, softMinY = min(start.y, end.y) - metrics.maxHeight - 10, softMaxY = max(start.y, end.y) + metrics.maxHeight + 10;\n            let segments, useMax, extractedEndPoint, forceObstacleBreak = false, // Used in clearPathTo to keep track of\n            // when to force break through an obstacle.\n            // Obstacles\n            chartObstacles = options.chartObstacles, endObstacleIx = findLastObstacleBefore(chartObstacles, softMaxX);\n            const startObstacleIx = findLastObstacleBefore(chartObstacles, softMinX);\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * How far can you go between two points before hitting an obstacle?\n             * Does not work for diagonal lines (because it doesn't have to).\n             * @private\n             */\n            function pivotPoint(fromPoint, toPoint, directionIsX) {\n                const searchDirection = fromPoint.x < toPoint.x ? 1 : -1;\n                let firstPoint, lastPoint, highestPoint, lowestPoint;\n                if (fromPoint.x < toPoint.x) {\n                    firstPoint = fromPoint;\n                    lastPoint = toPoint;\n                }\n                else {\n                    firstPoint = toPoint;\n                    lastPoint = fromPoint;\n                }\n                if (fromPoint.y < toPoint.y) {\n                    lowestPoint = fromPoint;\n                    highestPoint = toPoint;\n                }\n                else {\n                    lowestPoint = toPoint;\n                    highestPoint = fromPoint;\n                }\n                // Go through obstacle range in reverse if toPoint is before\n                // fromPoint in the X-dimension.\n                let i = searchDirection < 0 ?\n                    // Searching backwards, start at last obstacle before last point\n                    min(findLastObstacleBefore(chartObstacles, lastPoint.x), chartObstacles.length - 1) :\n                    // Forwards. Since we're not sorted by xMax, we have to look\n                    // at all obstacles.\n                    0;\n                // Go through obstacles in this X range\n                while (chartObstacles[i] && (searchDirection > 0 && chartObstacles[i].xMin <= lastPoint.x ||\n                    searchDirection < 0 && chartObstacles[i].xMax >= firstPoint.x)) {\n                    // If this obstacle is between from and to points in a straight\n                    // line, pivot at the intersection.\n                    if (chartObstacles[i].xMin <= lastPoint.x &&\n                        chartObstacles[i].xMax >= firstPoint.x &&\n                        chartObstacles[i].yMin <= highestPoint.y &&\n                        chartObstacles[i].yMax >= lowestPoint.y) {\n                        if (directionIsX) {\n                            return {\n                                y: fromPoint.y,\n                                x: fromPoint.x < toPoint.x ?\n                                    chartObstacles[i].xMin - 1 :\n                                    chartObstacles[i].xMax + 1,\n                                obstacle: chartObstacles[i]\n                            };\n                        }\n                        // Else ...\n                        return {\n                            x: fromPoint.x,\n                            y: fromPoint.y < toPoint.y ?\n                                chartObstacles[i].yMin - 1 :\n                                chartObstacles[i].yMax + 1,\n                            obstacle: chartObstacles[i]\n                        };\n                    }\n                    i += searchDirection;\n                }\n                return toPoint;\n            }\n            /**\n             * Decide in which direction to dodge or get out of an obstacle.\n             * Considers desired direction, which way is shortest, soft and hard\n             * bounds.\n             *\n             * (? Returns a string, either xMin, xMax, yMin or yMax.)\n             *\n             * @private\n             * @function\n             *\n             * @param {Object} obstacle\n             *        Obstacle to dodge/escape.\n             *\n             * @param {Object} fromPoint\n             *        Point with x/y props that's dodging/escaping.\n             *\n             * @param {Object} toPoint\n             *        Goal point.\n             *\n             * @param {boolean} dirIsX\n             *        Dodge in X dimension.\n             *\n             * @param {Object} bounds\n             *        Hard and soft boundaries.\n             *\n             * @return {boolean}\n             *         Use max or not.\n             */\n            function getDodgeDirection(obstacle, fromPoint, toPoint, dirIsX, bounds) {\n                const softBounds = bounds.soft, hardBounds = bounds.hard, dir = dirIsX ? 'x' : 'y', toPointMax = { x: fromPoint.x, y: fromPoint.y }, toPointMin = { x: fromPoint.x, y: fromPoint.y }, maxOutOfSoftBounds = obstacle[dir + 'Max'] >=\n                    softBounds[dir + 'Max'], minOutOfSoftBounds = obstacle[dir + 'Min'] <=\n                    softBounds[dir + 'Min'], maxOutOfHardBounds = obstacle[dir + 'Max'] >=\n                    hardBounds[dir + 'Max'], minOutOfHardBounds = obstacle[dir + 'Min'] <=\n                    hardBounds[dir + 'Min'], \n                // Find out if we should prefer one direction over the other if\n                // we can choose freely\n                minDistance = abs(obstacle[dir + 'Min'] - fromPoint[dir]), maxDistance = abs(obstacle[dir + 'Max'] - fromPoint[dir]);\n                let // If it's a small difference, pick the one leading towards dest\n                // point. Otherwise pick the shortest distance\n                useMax = abs(minDistance - maxDistance) < 10 ?\n                    fromPoint[dir] < toPoint[dir] :\n                    maxDistance < minDistance;\n                // Check if we hit any obstacles trying to go around in either\n                // direction.\n                toPointMin[dir] = obstacle[dir + 'Min'];\n                toPointMax[dir] = obstacle[dir + 'Max'];\n                const minPivot = pivotPoint(fromPoint, toPointMin, dirIsX)[dir] !==\n                    toPointMin[dir], maxPivot = pivotPoint(fromPoint, toPointMax, dirIsX)[dir] !==\n                    toPointMax[dir];\n                useMax = minPivot ?\n                    (maxPivot ? useMax : true) :\n                    (maxPivot ? false : useMax);\n                // `useMax` now contains our preferred choice, bounds not taken into\n                // account. If both or neither direction is out of bounds we want to\n                // use this.\n                // Deal with soft bounds\n                useMax = minOutOfSoftBounds ?\n                    (maxOutOfSoftBounds ? useMax : true) : // Out on min\n                    (maxOutOfSoftBounds ? false : useMax); // Not out on min\n                // Deal with hard bounds\n                useMax = minOutOfHardBounds ?\n                    (maxOutOfHardBounds ? useMax : true) : // Out on min\n                    (maxOutOfHardBounds ? false : useMax); // Not out on min\n                return useMax;\n            }\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Find a clear path between point.\n             * @private\n             */\n            function clearPathTo(fromPoint, toPoint, dirIsX) {\n                // Don't waste time if we've hit goal\n                if (fromPoint.x === toPoint.x && fromPoint.y === toPoint.y) {\n                    return [];\n                }\n                const dir = dirIsX ? 'x' : 'y', obstacleMargin = options.obstacleOptions.margin, bounds = {\n                    soft: {\n                        xMin: softMinX,\n                        xMax: softMaxX,\n                        yMin: softMinY,\n                        yMax: softMaxY\n                    },\n                    hard: options.hardBounds\n                };\n                let pivot, segments, waypoint, waypointUseMax, envelopingObstacle, secondEnvelopingObstacle, envelopWaypoint;\n                // If fromPoint is inside an obstacle we have a problem. Break out\n                // by just going to the outside of this obstacle. We prefer to go to\n                // the nearest edge in the chosen direction.\n                envelopingObstacle =\n                    findObstacleFromPoint(chartObstacles, fromPoint);\n                if (envelopingObstacle > -1) {\n                    envelopingObstacle = chartObstacles[envelopingObstacle];\n                    waypointUseMax = getDodgeDirection(envelopingObstacle, fromPoint, toPoint, dirIsX, bounds);\n                    // Cut obstacle to hard bounds to make sure we stay within\n                    limitObstacleToBounds(envelopingObstacle, options.hardBounds);\n                    envelopWaypoint = dirIsX ? {\n                        y: fromPoint.y,\n                        x: envelopingObstacle[waypointUseMax ? 'xMax' : 'xMin'] +\n                            (waypointUseMax ? 1 : -1)\n                    } : {\n                        x: fromPoint.x,\n                        y: envelopingObstacle[waypointUseMax ? 'yMax' : 'yMin'] +\n                            (waypointUseMax ? 1 : -1)\n                    };\n                    // If we crashed into another obstacle doing this, we put the\n                    // waypoint between them instead\n                    secondEnvelopingObstacle = findObstacleFromPoint(chartObstacles, envelopWaypoint);\n                    if (secondEnvelopingObstacle > -1) {\n                        secondEnvelopingObstacle = chartObstacles[secondEnvelopingObstacle];\n                        // Cut obstacle to hard bounds\n                        limitObstacleToBounds(secondEnvelopingObstacle, options.hardBounds);\n                        // Modify waypoint to lay between obstacles\n                        envelopWaypoint[dir] = waypointUseMax ? max(envelopingObstacle[dir + 'Max'] - obstacleMargin + 1, (secondEnvelopingObstacle[dir + 'Min'] +\n                            envelopingObstacle[dir + 'Max']) / 2) :\n                            min((envelopingObstacle[dir + 'Min'] + obstacleMargin - 1), ((secondEnvelopingObstacle[dir + 'Max'] +\n                                envelopingObstacle[dir + 'Min']) / 2));\n                        // We are not going anywhere. If this happens for the first\n                        // time, do nothing. Otherwise, try to go to the extreme of\n                        // the obstacle pair in the current direction.\n                        if (fromPoint.x === envelopWaypoint.x &&\n                            fromPoint.y === envelopWaypoint.y) {\n                            if (forceObstacleBreak) {\n                                envelopWaypoint[dir] = waypointUseMax ?\n                                    max(envelopingObstacle[dir + 'Max'], secondEnvelopingObstacle[dir + 'Max']) + 1 :\n                                    min(envelopingObstacle[dir + 'Min'], secondEnvelopingObstacle[dir + 'Min']) - 1;\n                            }\n                            // Toggle on if off, and the opposite\n                            forceObstacleBreak = !forceObstacleBreak;\n                        }\n                        else {\n                            // This point is not identical to previous.\n                            // Clear break trigger.\n                            forceObstacleBreak = false;\n                        }\n                    }\n                    segments = [{\n                            start: fromPoint,\n                            end: envelopWaypoint\n                        }];\n                }\n                else { // If not enveloping, use standard pivot calculation\n                    pivot = pivotPoint(fromPoint, {\n                        x: dirIsX ? toPoint.x : fromPoint.x,\n                        y: dirIsX ? fromPoint.y : toPoint.y\n                    }, dirIsX);\n                    segments = [{\n                            start: fromPoint,\n                            end: {\n                                x: pivot.x,\n                                y: pivot.y\n                            }\n                        }];\n                    // Pivot before goal, use a waypoint to dodge obstacle\n                    if (pivot[dirIsX ? 'x' : 'y'] !== toPoint[dirIsX ? 'x' : 'y']) {\n                        // Find direction of waypoint\n                        waypointUseMax = getDodgeDirection(pivot.obstacle, pivot, toPoint, !dirIsX, bounds);\n                        // Cut waypoint to hard bounds\n                        limitObstacleToBounds(pivot.obstacle, options.hardBounds);\n                        waypoint = {\n                            x: dirIsX ?\n                                pivot.x :\n                                pivot.obstacle[waypointUseMax ? 'xMax' : 'xMin'] +\n                                    (waypointUseMax ? 1 : -1),\n                            y: dirIsX ?\n                                pivot.obstacle[waypointUseMax ? 'yMax' : 'yMin'] +\n                                    (waypointUseMax ? 1 : -1) :\n                                pivot.y\n                        };\n                        // We're changing direction here, store that to make sure we\n                        // also change direction when adding the last segment array\n                        // after handling waypoint.\n                        dirIsX = !dirIsX;\n                        segments = segments.concat(clearPathTo({\n                            x: pivot.x,\n                            y: pivot.y\n                        }, waypoint, dirIsX));\n                    }\n                }\n                // Get segments for the other direction too\n                // Recursion is our friend\n                segments = segments.concat(clearPathTo(segments[segments.length - 1].end, toPoint, !dirIsX));\n                return segments;\n            }\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Extract point to outside of obstacle in whichever direction is\n             * closest. Returns new point outside obstacle.\n             * @private\n             */\n            function extractFromObstacle(obstacle, point, goalPoint) {\n                const dirIsX = min(obstacle.xMax - point.x, point.x - obstacle.xMin) <\n                    min(obstacle.yMax - point.y, point.y - obstacle.yMin), bounds = {\n                    soft: options.hardBounds,\n                    hard: options.hardBounds\n                }, useMax = getDodgeDirection(obstacle, point, goalPoint, dirIsX, bounds);\n                return dirIsX ? {\n                    y: point.y,\n                    x: obstacle[useMax ? 'xMax' : 'xMin'] + (useMax ? 1 : -1)\n                } : {\n                    x: point.x,\n                    y: obstacle[useMax ? 'yMax' : 'yMin'] + (useMax ? 1 : -1)\n                };\n            }\n            // Cut the obstacle array to soft bounds for optimization in large\n            // datasets.\n            chartObstacles =\n                chartObstacles.slice(startObstacleIx, endObstacleIx + 1);\n            // If an obstacle envelops the end point, move it out of there and add\n            // a little segment to where it was.\n            if ((endObstacleIx = findObstacleFromPoint(chartObstacles, end)) > -1) {\n                extractedEndPoint = extractFromObstacle(chartObstacles[endObstacleIx], end, start);\n                endSegments.push({\n                    end: end,\n                    start: extractedEndPoint\n                });\n                end = extractedEndPoint;\n            }\n            // If it's still inside one or more obstacles, get out of there by\n            // force-moving towards the start point.\n            while ((endObstacleIx = findObstacleFromPoint(chartObstacles, end)) > -1) {\n                useMax = end[dir] - start[dir] < 0;\n                extractedEndPoint = {\n                    x: end.x,\n                    y: end.y\n                };\n                extractedEndPoint[dir] = chartObstacles[endObstacleIx][useMax ? dir + 'Max' : dir + 'Min'] + (useMax ? 1 : -1);\n                endSegments.push({\n                    end: end,\n                    start: extractedEndPoint\n                });\n                end = extractedEndPoint;\n            }\n            // Find the path\n            segments = clearPathTo(start, end, dirIsX);\n            // Add the end-point segments\n            segments = segments.concat(endSegments.reverse());\n            return {\n                path: pathFromSegments(segments),\n                obstacles: segments\n            };\n        }\n        fastAvoid.requiresObstacles = true;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // Define the available pathfinding algorithms.\n        // Algorithms take up to 3 arguments: starting point, ending point, and an\n        // options object.\n        const algorithms = {\n            fastAvoid,\n            straight,\n            simpleConnect\n        };\n\n        return algorithms;\n    });\n    _registerModule(_modules, 'Gantt/ConnectorsDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Defaults\n         *\n         * */\n        /*\n         @todo:\n             - Document how to write your own algorithms\n             - Consider adding a Point.pathTo method that wraps creating a connection\n               and rendering it\n        */\n        const connectorsDefaults = {\n            /**\n             * The Pathfinder module allows you to define connections between any two\n             * points, represented as lines - optionally with markers for the start\n             * and/or end points. Multiple algorithms are available for calculating how\n             * the connecting lines are drawn.\n             *\n             * Connector functionality requires Highcharts Gantt to be loaded. In Gantt\n             * charts, the connectors are used to draw dependencies between tasks.\n             *\n             * @see [dependency](series.gantt.data.dependency)\n             *\n             * @sample gantt/pathfinder/demo\n             *         Pathfinder connections\n             *\n             * @declare      Highcharts.ConnectorsOptions\n             * @product      gantt\n             * @optionparent connectors\n             */\n            connectors: {\n                /**\n                 * Enable connectors for this chart. Requires Highcharts Gantt.\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     6.2.0\n                 * @apioption connectors.enabled\n                 */\n                /**\n                 * Set the default dash style for this chart's connecting lines.\n                 *\n                 * @type      {string}\n                 * @default   solid\n                 * @since     6.2.0\n                 * @apioption connectors.dashStyle\n                 */\n                /**\n                 * Set the default color for this chart's Pathfinder connecting lines.\n                 * Defaults to the color of the point being connected.\n                 *\n                 * @type      {Highcharts.ColorString}\n                 * @since     6.2.0\n                 * @apioption connectors.lineColor\n                 */\n                /**\n                 * Set the default pathfinder margin to use, in pixels. Some Pathfinder\n                 * algorithms attempt to avoid obstacles, such as other points in the\n                 * chart. These algorithms use this margin to determine how close lines\n                 * can be to an obstacle. The default is to compute this automatically\n                 * from the size of the obstacles in the chart.\n                 *\n                 * To draw connecting lines close to existing points, set this to a low\n                 * number. For more space around existing points, set this number\n                 * higher.\n                 *\n                 * @sample gantt/pathfinder/algorithm-margin\n                 *         Small algorithmMargin\n                 *\n                 * @type      {number}\n                 * @since     6.2.0\n                 * @apioption connectors.algorithmMargin\n                 */\n                /**\n                 * Set the default pathfinder algorithm to use for this chart. It is\n                 * possible to define your own algorithms by adding them to the\n                 * Highcharts.Pathfinder.prototype.algorithms object before the chart\n                 * has been created.\n                 *\n                 * The default algorithms are as follows:\n                 *\n                 * `straight`:      Draws a straight line between the connecting\n                 *                  points. Does not avoid other points when drawing.\n                 *\n                 * `simpleConnect`: Finds a path between the points using right angles\n                 *                  only. Takes only starting/ending points into\n                 *                  account, and will not avoid other points.\n                 *\n                 * `fastAvoid`:     Finds a path between the points using right angles\n                 *                  only. Will attempt to avoid other points, but its\n                 *                  focus is performance over accuracy. Works well with\n                 *                  less dense datasets.\n                 *\n                 * Default value: `straight` is used as default for most series types,\n                 * while `simpleConnect` is used as default for Gantt series, to show\n                 * dependencies between points.\n                 *\n                 * @sample gantt/pathfinder/demo\n                 *         Different types used\n                 *\n                 * @type    {Highcharts.PathfinderTypeValue}\n                 * @default undefined\n                 * @since   6.2.0\n                 */\n                type: 'straight',\n                /**\n                 * The corner radius for the connector line.\n                 *\n                 * @since 11.2.0\n                 */\n                radius: 0,\n                /**\n                 * Set the default pixel width for this chart's Pathfinder connecting\n                 * lines.\n                 *\n                 * @since 6.2.0\n                 */\n                lineWidth: 1,\n                /**\n                 * Marker options for this chart's Pathfinder connectors. Note that\n                 * this option is overridden by the `startMarker` and `endMarker`\n                 * options.\n                 *\n                 * @declare Highcharts.ConnectorsMarkerOptions\n                 * @since   6.2.0\n                 */\n                marker: {\n                    /**\n                     * Set the radius of the connector markers. The default is\n                     * automatically computed based on the algorithmMargin setting.\n                     *\n                     * Setting marker.width and marker.height will override this\n                     * setting.\n                     *\n                     * @type      {number}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.radius\n                     */\n                    /**\n                     * Set the width of the connector markers. If not supplied, this\n                     * is inferred from the marker radius.\n                     *\n                     * @type      {number}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.width\n                     */\n                    /**\n                     * Set the height of the connector markers. If not supplied, this\n                     * is inferred from the marker radius.\n                     *\n                     * @type      {number}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.height\n                     */\n                    /**\n                     * Set the color of the connector markers. By default this is the\n                     * same as the connector color.\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.color\n                     */\n                    /**\n                     * Set the line/border color of the connector markers. By default\n                     * this is the same as the marker color.\n                     *\n                     * @type      {Highcharts.ColorString}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.lineColor\n                     */\n                    /**\n                     * Enable markers for the connectors.\n                     */\n                    enabled: false,\n                    /**\n                     * Horizontal alignment of the markers relative to the points.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'center',\n                    /**\n                     * Vertical alignment of the markers relative to the points.\n                     *\n                     * @type {Highcharts.VerticalAlignValue}\n                     */\n                    verticalAlign: 'middle',\n                    /**\n                     * Whether or not to draw the markers inside the points.\n                     */\n                    inside: false,\n                    /**\n                     * Set the line/border width of the pathfinder markers.\n                     */\n                    lineWidth: 1\n                },\n                /**\n                 * Marker options specific to the start markers for this chart's\n                 * Pathfinder connectors. Overrides the generic marker options.\n                 *\n                 * @declare Highcharts.ConnectorsStartMarkerOptions\n                 * @extends connectors.marker\n                 * @since   6.2.0\n                 */\n                startMarker: {\n                    /**\n                     * Set the symbol of the connector start markers.\n                     */\n                    symbol: 'diamond'\n                },\n                /**\n                 * Marker options specific to the end markers for this chart's\n                 * Pathfinder connectors. Overrides the generic marker options.\n                 *\n                 * @declare Highcharts.ConnectorsEndMarkerOptions\n                 * @extends connectors.marker\n                 * @since   6.2.0\n                 */\n                endMarker: {\n                    /**\n                     * Set the symbol of the connector end markers.\n                     */\n                    symbol: 'arrow-filled'\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Override Pathfinder connector options for a series. Requires Highcharts Gantt\n         * to be loaded.\n         *\n         * @declare   Highcharts.SeriesConnectorsOptionsObject\n         * @extends   connectors\n         * @since     6.2.0\n         * @excluding enabled, algorithmMargin\n         * @product   gantt\n         * @apioption plotOptions.series.connectors\n         */\n        /**\n         * Connect to a point. This option can be either a string, referring to the ID\n         * of another point, or an object, or an array of either. If the option is an\n         * array, each element defines a connection.\n         *\n         * @sample gantt/pathfinder/demo\n         *         Different connection types\n         *\n         * @declare   Highcharts.XrangePointConnectorsOptionsObject\n         * @type      {string|Array<string|*>|*}\n         * @extends   plotOptions.series.connectors\n         * @since     6.2.0\n         * @excluding enabled\n         * @product   gantt\n         * @requires  highcharts-gantt\n         * @apioption series.xrange.data.connect\n         */\n        /**\n         * The ID of the point to connect to.\n         *\n         * @type      {string}\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.xrange.data.connect.to\n         */\n        ''; // Keeps doclets above in JS file\n\n        return connectorsDefaults;\n    });\n    _registerModule(_modules, 'Gantt/PathfinderComposition.js', [_modules['Gantt/ConnectorsDefaults.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (ConnectorsDefaults, D, H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { composed } = H;\n        const { defined, error, merge, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get point bounding box using plotX/plotY and shapeArgs. If using\n         * graphic.getBBox() directly, the bbox will be affected by animation.\n         *\n         * @private\n         * @function\n         *\n         * @param {Highcharts.Point} point\n         *        The point to get BB of.\n         *\n         * @return {Highcharts.Dictionary<number>|null}\n         *         Result xMax, xMin, yMax, yMin.\n         */\n        function getPointBB(point) {\n            const shapeArgs = point.shapeArgs;\n            // Prefer using shapeArgs (columns)\n            if (shapeArgs) {\n                return {\n                    xMin: shapeArgs.x || 0,\n                    xMax: (shapeArgs.x || 0) + (shapeArgs.width || 0),\n                    yMin: shapeArgs.y || 0,\n                    yMax: (shapeArgs.y || 0) + (shapeArgs.height || 0)\n                };\n            }\n            // Otherwise use plotX/plotY and bb\n            const bb = point.graphic && point.graphic.getBBox();\n            return bb ? {\n                xMin: point.plotX - bb.width / 2,\n                xMax: point.plotX + bb.width / 2,\n                yMin: point.plotY - bb.height / 2,\n                yMax: point.plotY + bb.height / 2\n            } : null;\n        }\n        /**\n         * Warn if using legacy options. Copy the options over. Note that this will\n         * still break if using the legacy options in chart.update, addSeries etc.\n         * @private\n         */\n        function warnLegacy(chart) {\n            if (chart.options.pathfinder ||\n                chart.series.reduce(function (acc, series) {\n                    if (series.options) {\n                        merge(true, (series.options.connectors = series.options.connectors ||\n                            {}), series.options.pathfinder);\n                    }\n                    return acc || series.options && series.options.pathfinder;\n                }, false)) {\n                merge(true, (chart.options.connectors = chart.options.connectors || {}), chart.options.pathfinder);\n                error('WARNING: Pathfinder options have been renamed. ' +\n                    'Use \"chart.connectors\" or \"series.connectors\" instead.');\n            }\n        }\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ConnectionComposition;\n        (function (ConnectionComposition) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            function compose(ChartClass, PathfinderClass, PointClass) {\n                if (pushUnique(composed, compose)) {\n                    const pointProto = PointClass.prototype;\n                    // Initialize Pathfinder for charts\n                    ChartClass.prototype.callbacks.push(function (chart) {\n                        const options = chart.options;\n                        if (options.connectors.enabled !== false) {\n                            warnLegacy(chart);\n                            this.pathfinder = new PathfinderClass(this);\n                            this.pathfinder.update(true); // First draw, defer render\n                        }\n                    });\n                    pointProto.getMarkerVector = pointGetMarkerVector;\n                    pointProto.getPathfinderAnchorPoint = pointGetPathfinderAnchorPoint;\n                    pointProto.getRadiansToVector = pointGetRadiansToVector;\n                    // Set default Pathfinder options\n                    setOptions(ConnectorsDefaults);\n                }\n            }\n            ConnectionComposition.compose = compose;\n            /**\n             * Get coordinates of anchor point for pathfinder connection.\n             *\n             * @private\n             * @function Highcharts.Point#getPathfinderAnchorPoint\n             *\n             * @param {Highcharts.ConnectorsMarkerOptions} markerOptions\n             *        Connection options for position on point.\n             *\n             * @return {Highcharts.PositionObject}\n             *         An object with x/y properties for the position. Coordinates are\n             *         in plot values, not relative to point.\n             */\n            function pointGetPathfinderAnchorPoint(markerOptions) {\n                const bb = getPointBB(this);\n                let x, y;\n                switch (markerOptions.align) { // eslint-disable-line default-case\n                    case 'right':\n                        x = 'xMax';\n                        break;\n                    case 'left':\n                        x = 'xMin';\n                }\n                switch (markerOptions.verticalAlign) { // eslint-disable-line default-case\n                    case 'top':\n                        y = 'yMin';\n                        break;\n                    case 'bottom':\n                        y = 'yMax';\n                }\n                return {\n                    x: x ? bb[x] : (bb.xMin + bb.xMax) / 2,\n                    y: y ? bb[y] : (bb.yMin + bb.yMax) / 2\n                };\n            }\n            /**\n             * Utility to get the angle from one point to another.\n             *\n             * @private\n             * @function Highcharts.Point#getRadiansToVector\n             *\n             * @param {Highcharts.PositionObject} v1\n             *        The first vector, as an object with x/y properties.\n             *\n             * @param {Highcharts.PositionObject} v2\n             *        The second vector, as an object with x/y properties.\n             *\n             * @return {number}\n             *         The angle in degrees\n             */\n            function pointGetRadiansToVector(v1, v2) {\n                let box;\n                if (!defined(v2)) {\n                    box = getPointBB(this);\n                    if (box) {\n                        v2 = {\n                            x: (box.xMin + box.xMax) / 2,\n                            y: (box.yMin + box.yMax) / 2\n                        };\n                    }\n                }\n                return Math.atan2(v2.y - v1.y, v1.x - v2.x);\n            }\n            /**\n             * Utility to get the position of the marker, based on the path angle and\n             * the marker's radius.\n             *\n             * @private\n             * @function Highcharts.Point#getMarkerVector\n             *\n             * @param {number} radians\n             *        The angle in radians from the point center to another vector.\n             *\n             * @param {number} markerRadius\n             *        The radius of the marker, to calculate the additional distance to\n             *        the center of the marker.\n             *\n             * @param {Object} anchor\n             *        The anchor point of the path and marker as an object with x/y\n             *        properties.\n             *\n             * @return {Object}\n             *         The marker vector as an object with x/y properties.\n             */\n            function pointGetMarkerVector(radians, markerRadius, anchor) {\n                const twoPI = Math.PI * 2.0, bb = getPointBB(this), rectWidth = bb.xMax - bb.xMin, rectHeight = bb.yMax - bb.yMin, rAtan = Math.atan2(rectHeight, rectWidth), rectHalfWidth = rectWidth / 2.0, rectHalfHeight = rectHeight / 2.0, rectHorizontalCenter = bb.xMin + rectHalfWidth, rectVerticalCenter = bb.yMin + rectHalfHeight, edgePoint = {\n                    x: rectHorizontalCenter,\n                    y: rectVerticalCenter\n                };\n                let theta = radians, tanTheta = 1, leftOrRightRegion = false, xFactor = 1, yFactor = 1;\n                while (theta < -Math.PI) {\n                    theta += twoPI;\n                }\n                while (theta > Math.PI) {\n                    theta -= twoPI;\n                }\n                tanTheta = Math.tan(theta);\n                if ((theta > -rAtan) && (theta <= rAtan)) {\n                    // Right side\n                    yFactor = -1;\n                    leftOrRightRegion = true;\n                }\n                else if (theta > rAtan && theta <= (Math.PI - rAtan)) {\n                    // Top side\n                    yFactor = -1;\n                }\n                else if (theta > (Math.PI - rAtan) || theta <= -(Math.PI - rAtan)) {\n                    // Left side\n                    xFactor = -1;\n                    leftOrRightRegion = true;\n                }\n                else {\n                    // Bottom side\n                    xFactor = -1;\n                }\n                // Correct the edgePoint according to the placement of the marker\n                if (leftOrRightRegion) {\n                    edgePoint.x += xFactor * (rectHalfWidth);\n                    edgePoint.y += yFactor * (rectHalfWidth) * tanTheta;\n                }\n                else {\n                    edgePoint.x += xFactor * (rectHeight / (2.0 * tanTheta));\n                    edgePoint.y += yFactor * (rectHalfHeight);\n                }\n                if (anchor.x !== rectHorizontalCenter) {\n                    edgePoint.x = anchor.x;\n                }\n                if (anchor.y !== rectVerticalCenter) {\n                    edgePoint.y = anchor.y;\n                }\n                return {\n                    x: edgePoint.x + (markerRadius * Math.cos(theta)),\n                    y: edgePoint.y - (markerRadius * Math.sin(theta))\n                };\n            }\n        })(ConnectionComposition || (ConnectionComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ConnectionComposition;\n    });\n    _registerModule(_modules, 'Gantt/Pathfinder.js', [_modules['Gantt/Connection.js'], _modules['Gantt/PathfinderAlgorithms.js'], _modules['Gantt/PathfinderComposition.js'], _modules['Core/Series/Point.js'], _modules['Core/Utilities.js']], function (Connection, PathfinderAlgorithms, PathfinderComposition, Point, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, defined, pick, splat } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const max = Math.max, min = Math.min;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get point bounding box using plotX/plotY and shapeArgs. If using\n         * graphic.getBBox() directly, the bbox will be affected by animation.\n         *\n         * @private\n         * @function\n         *\n         * @param {Highcharts.Point} point\n         *        The point to get BB of.\n         *\n         * @return {Highcharts.Dictionary<number>|null}\n         *         Result xMax, xMin, yMax, yMin.\n         */\n        function getPointBB(point) {\n            const shapeArgs = point.shapeArgs;\n            // Prefer using shapeArgs (columns)\n            if (shapeArgs) {\n                return {\n                    xMin: shapeArgs.x || 0,\n                    xMax: (shapeArgs.x || 0) + (shapeArgs.width || 0),\n                    yMin: shapeArgs.y || 0,\n                    yMax: (shapeArgs.y || 0) + (shapeArgs.height || 0)\n                };\n            }\n            // Otherwise use plotX/plotY and bb\n            const bb = point.graphic && point.graphic.getBBox();\n            return bb ? {\n                xMin: point.plotX - bb.width / 2,\n                xMax: point.plotX + bb.width / 2,\n                yMin: point.plotY - bb.height / 2,\n                yMax: point.plotY + bb.height / 2\n            } : null;\n        }\n        /**\n         * Compute smallest distance between two rectangles.\n         * @private\n         */\n        function calculateObstacleDistance(a, b, bbMargin) {\n            // Count the distance even if we are slightly off\n            const margin = pick(bbMargin, 10), yOverlap = a.yMax + margin > b.yMin - margin &&\n                a.yMin - margin < b.yMax + margin, xOverlap = a.xMax + margin > b.xMin - margin &&\n                a.xMin - margin < b.xMax + margin, xDistance = yOverlap ? (a.xMin > b.xMax ? a.xMin - b.xMax : b.xMin - a.xMax) : Infinity, yDistance = xOverlap ? (a.yMin > b.yMax ? a.yMin - b.yMax : b.yMin - a.yMax) : Infinity;\n            // If the rectangles collide, try recomputing with smaller margin.\n            // If they collide anyway, discard the obstacle.\n            if (xOverlap && yOverlap) {\n                return (margin ?\n                    calculateObstacleDistance(a, b, Math.floor(margin / 2)) :\n                    Infinity);\n            }\n            return min(xDistance, yDistance);\n        }\n        /**\n         * Calculate margin to place around obstacles for the pathfinder in pixels.\n         * Returns a minimum of 1 pixel margin.\n         *\n         * @private\n         * @function\n         *\n         * @param {Array<object>} obstacles\n         *        Obstacles to calculate margin from.\n         *\n         * @return {number}\n         *         The calculated margin in pixels. At least 1.\n         */\n        function calculateObstacleMargin(obstacles) {\n            const len = obstacles.length, distances = [];\n            let onstacleDistance;\n            // Go over all obstacles and compare them to the others.\n            for (let i = 0; i < len; ++i) {\n                // Compare to all obstacles ahead. We will already have compared this\n                // obstacle to the ones before.\n                for (let j = i + 1; j < len; ++j) {\n                    onstacleDistance =\n                        calculateObstacleDistance(obstacles[i], obstacles[j]);\n                    // TODO: Magic number 80\n                    if (onstacleDistance < 80) { // Ignore large distances\n                        distances.push(onstacleDistance);\n                    }\n                }\n            }\n            // Ensure we always have at least one value, even in very spaceous charts\n            distances.push(80);\n            return max(Math.floor(distances.sort(function (a, b) {\n                return (a - b);\n            })[\n            // Discard first 10% of the relevant distances, and then grab\n            // the smallest one.\n            Math.floor(distances.length / 10)] / 2 - 1 // Divide the distance by 2 and subtract 1.\n            ), 1 // 1 is the minimum margin\n            );\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Pathfinder class.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Pathfinder\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart to operate on.\n         */\n        class Pathfinder {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(ChartClass, PointClass) {\n                PathfinderComposition.compose(ChartClass, Pathfinder, PointClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize the Pathfinder object.\n             *\n             * @function Highcharts.Pathfinder#init\n             *\n             * @param {Highcharts.Chart} chart\n             *        The chart context.\n             */\n            init(chart) {\n                // Initialize pathfinder with chart context\n                this.chart = chart;\n                // Init connection reference list\n                this.connections = [];\n                // Recalculate paths/obstacles on chart redraw\n                addEvent(chart, 'redraw', function () {\n                    this.pathfinder.update();\n                });\n            }\n            /**\n             * Update Pathfinder connections from scratch.\n             *\n             * @function Highcharts.Pathfinder#update\n             *\n             * @param {boolean} [deferRender]\n             *        Whether or not to defer rendering of connections until\n             *        series.afterAnimate event has fired. Used on first render.\n             */\n            update(deferRender) {\n                const chart = this.chart, pathfinder = this, oldConnections = pathfinder.connections;\n                // Rebuild pathfinder connections from options\n                pathfinder.connections = [];\n                chart.series.forEach(function (series) {\n                    if (series.visible && !series.options.isInternal) {\n                        series.points.forEach(function (point) {\n                            const ganttPointOptions = point.options;\n                            // For Gantt series the connect could be\n                            // defined as a dependency\n                            if (ganttPointOptions && ganttPointOptions.dependency) {\n                                ganttPointOptions.connect = ganttPointOptions\n                                    .dependency;\n                            }\n                            const connects = (point.options?.connect &&\n                                splat(point.options.connect));\n                            let to;\n                            if (point.visible && point.isInside !== false && connects) {\n                                connects.forEach(function (connect) {\n                                    to = chart.get(typeof connect === 'string' ?\n                                        connect : connect.to);\n                                    if (to instanceof Point &&\n                                        to.series.visible &&\n                                        to.visible &&\n                                        to.isInside !== false) {\n                                        // Add new connection\n                                        pathfinder.connections.push(new Connection(point, // From\n                                        to, typeof connect === 'string' ?\n                                            {} :\n                                            connect));\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n                // Clear connections that should not be updated, and move old info over\n                // to new connections.\n                for (let j = 0, k, found, lenOld = oldConnections.length, lenNew = pathfinder.connections.length; j < lenOld; ++j) {\n                    found = false;\n                    const oldCon = oldConnections[j];\n                    for (k = 0; k < lenNew; ++k) {\n                        const newCon = pathfinder.connections[k];\n                        if ((oldCon.options && oldCon.options.type) ===\n                            (newCon.options && newCon.options.type) &&\n                            oldCon.fromPoint === newCon.fromPoint &&\n                            oldCon.toPoint === newCon.toPoint) {\n                            newCon.graphics = oldCon.graphics;\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        oldCon.destroy();\n                    }\n                }\n                // Clear obstacles to force recalculation. This must be done on every\n                // redraw in case positions have changed. Recalculation is handled in\n                // Connection.getPath on demand.\n                delete this.chartObstacles;\n                delete this.lineObstacles;\n                // Draw the pending connections\n                pathfinder.renderConnections(deferRender);\n            }\n            /**\n             * Draw the chart's connecting paths.\n             *\n             * @function Highcharts.Pathfinder#renderConnections\n             *\n             * @param {boolean} [deferRender]\n             *        Whether or not to defer render until series animation is finished.\n             *        Used on first render.\n             */\n            renderConnections(deferRender) {\n                if (deferRender) {\n                    // Render after series are done animating\n                    this.chart.series.forEach(function (series) {\n                        const render = function () {\n                            // Find pathfinder connections belonging to this series\n                            // that haven't rendered, and render them now.\n                            const pathfinder = series.chart.pathfinder, conns = pathfinder && pathfinder.connections || [];\n                            conns.forEach(function (connection) {\n                                if (connection.fromPoint &&\n                                    connection.fromPoint.series === series) {\n                                    connection.render();\n                                }\n                            });\n                            if (series.pathfinderRemoveRenderEvent) {\n                                series.pathfinderRemoveRenderEvent();\n                                delete series.pathfinderRemoveRenderEvent;\n                            }\n                        };\n                        if (series.options.animation === false) {\n                            render();\n                        }\n                        else {\n                            series.pathfinderRemoveRenderEvent = addEvent(series, 'afterAnimate', render);\n                        }\n                    });\n                }\n                else {\n                    // Go through connections and render them\n                    this.connections.forEach(function (connection) {\n                        connection.render();\n                    });\n                }\n            }\n            /**\n             * Get obstacles for the points in the chart. Does not include connecting\n             * lines from Pathfinder. Applies algorithmMargin to the obstacles.\n             *\n             * @function Highcharts.Pathfinder#getChartObstacles\n             *\n             * @param {Object} options\n             *        Options for the calculation. Currenlty only\n             *        options.algorithmMargin.\n             *\n             * @return {Array<object>}\n             *         An array of calculated obstacles. Each obstacle is defined as an\n             *         object with xMin, xMax, yMin and yMax properties.\n             */\n            getChartObstacles(options) {\n                const series = this.chart.series, margin = pick(options.algorithmMargin, 0);\n                let obstacles = [], calculatedMargin;\n                for (let i = 0, sLen = series.length; i < sLen; ++i) {\n                    if (series[i].visible && !series[i].options.isInternal) {\n                        for (let j = 0, pLen = series[i].points.length, bb, point; j < pLen; ++j) {\n                            point = series[i].points[j];\n                            if (point.visible) {\n                                bb = getPointBB(point);\n                                if (bb) {\n                                    obstacles.push({\n                                        xMin: bb.xMin - margin,\n                                        xMax: bb.xMax + margin,\n                                        yMin: bb.yMin - margin,\n                                        yMax: bb.yMax + margin\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n                // Sort obstacles by xMin for optimization\n                obstacles = obstacles.sort(function (a, b) {\n                    return a.xMin - b.xMin;\n                });\n                // Add auto-calculated margin if the option is not defined\n                if (!defined(options.algorithmMargin)) {\n                    calculatedMargin =\n                        options.algorithmMargin =\n                            calculateObstacleMargin(obstacles);\n                    obstacles.forEach(function (obstacle) {\n                        obstacle.xMin -= calculatedMargin;\n                        obstacle.xMax += calculatedMargin;\n                        obstacle.yMin -= calculatedMargin;\n                        obstacle.yMax += calculatedMargin;\n                    });\n                }\n                return obstacles;\n            }\n            /**\n             * Utility function to get metrics for obstacles:\n             * - Widest obstacle width\n             * - Tallest obstacle height\n             *\n             * @function Highcharts.Pathfinder#getObstacleMetrics\n             *\n             * @param {Array<object>} obstacles\n             *        An array of obstacles to inspect.\n             *\n             * @return {Object}\n             *         The calculated metrics, as an object with maxHeight and maxWidth\n             *         properties.\n             */\n            getObstacleMetrics(obstacles) {\n                let maxWidth = 0, maxHeight = 0, width, height, i = obstacles.length;\n                while (i--) {\n                    width = obstacles[i].xMax - obstacles[i].xMin;\n                    height = obstacles[i].yMax - obstacles[i].yMin;\n                    if (maxWidth < width) {\n                        maxWidth = width;\n                    }\n                    if (maxHeight < height) {\n                        maxHeight = height;\n                    }\n                }\n                return {\n                    maxHeight: maxHeight,\n                    maxWidth: maxWidth\n                };\n            }\n            /**\n             * Utility to get which direction to start the pathfinding algorithm\n             * (X vs Y), calculated from a set of marker options.\n             *\n             * @function Highcharts.Pathfinder#getAlgorithmStartDirection\n             *\n             * @param {Highcharts.ConnectorsMarkerOptions} markerOptions\n             *        Marker options to calculate from.\n             *\n             * @return {boolean}\n             *         Returns true for X, false for Y, and undefined for autocalculate.\n             */\n            getAlgorithmStartDirection(markerOptions) {\n                const xCenter = markerOptions.align !== 'left' &&\n                    markerOptions.align !== 'right', yCenter = markerOptions.verticalAlign !== 'top' &&\n                    markerOptions.verticalAlign !== 'bottom';\n                return xCenter ?\n                    (yCenter ? void 0 : false) : // When x is centered\n                    (yCenter ? true : void 0); // When x is off-center\n            }\n        }\n        /**\n         * @name Highcharts.Pathfinder#algorithms\n         * @type {Highcharts.Dictionary<Function>}\n         */\n        Pathfinder.prototype.algorithms = PathfinderAlgorithms;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The default pathfinder algorithm to use for a chart. It is possible to define\n         * your own algorithms by adding them to the\n         * `Highcharts.Pathfinder.prototype.algorithms`\n         * object before the chart has been created.\n         *\n         * The default algorithms are as follows:\n         *\n         * `straight`:      Draws a straight line between the connecting\n         *                  points. Does not avoid other points when drawing.\n         *\n         * `simpleConnect`: Finds a path between the points using right angles\n         *                  only. Takes only starting/ending points into\n         *                  account, and will not avoid other points.\n         *\n         * `fastAvoid`:     Finds a path between the points using right angles\n         *                  only. Will attempt to avoid other points, but its\n         *                  focus is performance over accuracy. Works well with\n         *                  less dense datasets.\n         *\n         * @typedef {\"fastAvoid\"|\"simpleConnect\"|\"straight\"|string} Highcharts.PathfinderTypeValue\n         */\n        ''; // Keeps doclets above in JS file\n\n        return Pathfinder;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Declarations\n         *\n         * */\n        /**\n         * Language object. The language object is global and it can't be set\n         * on each chart initialization. Instead, use `Highcharts.setOptions` to\n         * set it before any chart is initialized.\n         *\n         * ```js\n         * Highcharts.setOptions({\n         *     lang: {\n         *         months: [\n         *             'Janvier', 'FÃ©vrier', 'Mars', 'Avril',\n         *             'Mai', 'Juin', 'Juillet', 'AoÃ»t',\n         *             'Septembre', 'Octobre', 'Novembre', 'DÃ©cembre'\n         *         ],\n         *         weekdays: [\n         *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n         *             'Jeudi', 'Vendredi', 'Samedi'\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * The text for the label for the range selector buttons.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorZoom: 'Zoom',\n            /**\n             * The text for the label for the \"from\" input box in the range\n             * selector. Since v9.0, this string is empty as the label is not\n             * rendered by default.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorFrom: '',\n            /**\n             * The text for the label for the \"to\" input box in the range selector.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorTo: 'â†’'\n        };\n        /**\n         * The range selector is a tool for selecting ranges to display within\n         * the chart. It provides buttons to select preconfigured ranges in\n         * the chart, like 1 day, 1 week, 1 month etc. It also provides input\n         * boxes where min and max dates can be manually input.\n         *\n         * @product      highstock gantt\n         * @optionparent rangeSelector\n         */\n        const rangeSelector = {\n            /**\n             * Whether to enable all buttons from the start. By default buttons are\n             * only enabled if the corresponding time range exists on the X axis,\n             * but enabling all buttons allows for dynamically loading different\n             * time ranges.\n             *\n             * @sample {highstock} stock/rangeselector/allbuttonsenabled-true/\n             *         All buttons enabled\n             *\n             * @since     2.0.3\n             */\n            allButtonsEnabled: false,\n            /**\n             * An array of configuration objects for the buttons.\n             *\n             * Defaults to:\n             * ```js\n             * buttons: [{\n             *     type: 'month',\n             *     count: 1,\n             *     text: '1m',\n             *     title: 'View 1 month'\n             * }, {\n             *     type: 'month',\n             *     count: 3,\n             *     text: '3m',\n             *     title: 'View 3 months'\n             * }, {\n             *     type: 'month',\n             *     count: 6,\n             *     text: '6m',\n             *     title: 'View 6 months'\n             * }, {\n             *     type: 'ytd',\n             *     text: 'YTD',\n             *     title: 'View year to date'\n             * }, {\n             *     type: 'year',\n             *     count: 1,\n             *     text: '1y',\n             *     title: 'View 1 year'\n             * }, {\n             *     type: 'all',\n             *     text: 'All',\n             *     title: 'View all'\n             * }]\n             * ```\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by buttons\n             *\n             * @type      {Array<*>}\n             */\n            buttons: void 0,\n            /**\n             * How many units of the defined type the button should span. If `type`\n             * is \"month\" and `count` is 3, the button spans three months.\n             *\n             * @type      {number}\n             * @default   1\n             * @apioption rangeSelector.buttons.count\n             */\n            /**\n             * Fires when clicking on the rangeSelector button. One parameter,\n             * event, is passed to the function, containing common event\n             * information.\n             *\n             * ```js\n             * click: function(e) {\n             *   console.log(this);\n             * }\n             * ```\n             *\n             * Return false to stop default button's click action.\n             *\n             * @sample {highstock} stock/rangeselector/button-click/\n             *         Click event on the button\n             *\n             * @type      {Highcharts.RangeSelectorClickCallbackFunction}\n             * @apioption rangeSelector.buttons.events.click\n             */\n            /**\n             * Additional range (in milliseconds) added to the end of the calculated\n             * time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMax\n             */\n            /**\n             * Additional range (in milliseconds) added to the start of the\n             * calculated time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMin\n             */\n            /**\n             * When buttons apply dataGrouping on a series, by default zooming\n             * in/out will deselect buttons and unset dataGrouping. Enable this\n             * option to keep buttons selected when extremes change.\n             *\n             * @sample {highstock} stock/rangeselector/preserve-datagrouping/\n             *         Different preserveDataGrouping settings\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     6.1.2\n             * @apioption rangeSelector.buttons.preserveDataGrouping\n             */\n            /**\n             * A custom data grouping object for each button.\n             *\n             * @see [series.dataGrouping](#plotOptions.series.dataGrouping)\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by range selector buttons\n             *\n             * @type      {*}\n             * @extends   plotOptions.series.dataGrouping\n             * @apioption rangeSelector.buttons.dataGrouping\n             */\n            /**\n             * The text for the button itself.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.text\n             */\n            /**\n             * Explanation for the button, shown as a tooltip on hover, and used by\n             * assistive technology.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.title\n             */\n            /**\n             * Defined the time span for the button. Can be one of `millisecond`,\n             * `second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\n             * and `all`.\n             *\n             * @type       {Highcharts.RangeSelectorButtonTypeValue}\n             * @apioption  rangeSelector.buttons.type\n             */\n            /**\n             * The space in pixels between the buttons in the range selector.\n             */\n            buttonSpacing: 5,\n            /**\n             * Whether to collapse the range selector buttons into a dropdown when\n             * there is not enough room to show everything in a single row, instead\n             * of dividing the range selector into multiple rows.\n             * Can be one of the following:\n             *  - `always`: Always collapse\n             *  - `responsive`: Only collapse when there is not enough room\n             *  - `never`: Never collapse\n             *\n             * @sample {highstock} stock/rangeselector/dropdown/\n             *         Dropdown option\n             *\n             * @validvalue [\"always\", \"responsive\", \"never\"]\n             * @since 9.0.0\n             */\n            dropdown: 'responsive',\n            /**\n             * Enable or disable the range selector. Default to `true` for stock\n             * charts, using the `stockChart` factory.\n             *\n             * @sample {highstock} stock/rangeselector/enabled/\n             *         Disable the range selector\n             *\n             * @type {boolean|undefined}\n             * @default {highstock} true\n             */\n            enabled: void 0,\n            /**\n             * The vertical alignment of the rangeselector box. Allowed properties\n             * are `top`, `middle`, `bottom`.\n             *\n             * @sample {highstock} stock/rangeselector/vertical-align-middle/\n             *         Middle\n             * @sample {highstock} stock/rangeselector/vertical-align-bottom/\n             *         Bottom\n             *\n             * @type  {Highcharts.VerticalAlignValue}\n             * @since 6.0.0\n             */\n            verticalAlign: 'top',\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * CSS styles for the text label.\n             *\n             * In styled mode, the buttons are styled by the\n             * `.highcharts-range-selector-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.SVGAttributes}\n             */\n            buttonTheme: {\n                /** @ignore */\n                width: 28,\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                zIndex: 7 // #484, #852\n            },\n            /**\n             * When the rangeselector is floating, the plot area does not reserve\n             * space for it. This opens for positioning anywhere on the chart.\n             *\n             * @sample {highstock} stock/rangeselector/floating/\n             *         Placing the range selector between the plot area and the\n             *         navigator\n             *\n             * @since 6.0.0\n             */\n            floating: false,\n            /**\n             * The x offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            x: 0,\n            /**\n             * The y offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            y: 0,\n            /**\n             * Deprecated. The height of the range selector. Currently it is\n             * calculated dynamically.\n             *\n             * @deprecated\n             * @type  {number|undefined}\n             * @since 2.1.9\n             */\n            height: void 0,\n            /**\n             * The border color of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     1.3.7\n             */\n            inputBoxBorderColor: 'none',\n            /**\n             * The pixel height of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @since     1.3.7\n             */\n            inputBoxHeight: 17,\n            /**\n             * The pixel width of the date input boxes. When `undefined`, the width\n             * is fitted to the rendered content.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type   {number|undefined}\n             * @since  1.3.7\n             */\n            inputBoxWidth: void 0,\n            /**\n             * The date format in the input boxes when not selected for editing.\n             * Defaults to `%e %b %Y`.\n             *\n             * This is used to determine which type of input to show,\n             * `datetime-local`, `date` or `time` and falling back to `text` when\n             * the browser does not support the input type or the format contains\n             * milliseconds.\n             *\n             * @sample {highstock} stock/rangeselector/input-type/\n             *         Input types\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputDateFormat: '%e %b %Y',\n            /**\n             * A custom callback function to parse values entered in the input boxes\n             * and return a valid JavaScript time as milliseconds since 1970.\n             * The first argument passed is a value to parse,\n             * second is a boolean indicating use of the UTC time.\n             *\n             * This will only get called for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             * @type      {Highcharts.RangeSelectorParseCallbackFunction}\n             * @since     1.3.3\n             */\n            inputDateParser: void 0,\n            /**\n             * The date format in the input boxes when they are selected for\n             * editing. This must be a format that is recognized by JavaScript\n             * Date.parse.\n             *\n             * This will only be used for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputEditDateFormat: '%Y-%m-%d',\n            /**\n             * Enable or disable the date input boxes.\n             */\n            inputEnabled: true,\n            /**\n             * Positioning for the input boxes. Allowed properties are `align`,\n             *  `x` and `y`.\n             *\n             * @since 1.2.4\n             */\n            inputPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'right',\n                /**\n                 * X offset of the input row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the input row.\n                 */\n                y: 0\n            },\n            /**\n             * The space in pixels between the labels and the date input boxes in\n             * the range selector.\n             *\n             * @since 9.0.0\n             */\n            inputSpacing: 5,\n            /**\n             * The index of the button to appear pre-selected. If the selected range\n             * exceeds the total data range and the 'all' option is available,\n             * the 'all' option, showing the full range, is automatically selected.\n             *\n             * @type      {number}\n             */\n            selected: void 0,\n            /**\n             * Positioning for the button row.\n             *\n             * @since 1.2.4\n             */\n            buttonPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'left',\n                /**\n                 * X offset of the button row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the button row.\n                 */\n                y: 0\n            },\n            /**\n             * CSS for the HTML inputs in the range selector.\n             *\n             * In styled mode, the inputs are styled by the\n             * `.highcharts-range-input text` rule in SVG mode, and\n             * `input.highcharts-range-selector` when active.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.CSSObject}\n             * @apioption rangeSelector.inputStyle\n             */\n            inputStyle: {\n                /** @ignore */\n                color: \"#334eff\" /* Palette.highlightColor80 */,\n                /** @ignore */\n                cursor: 'pointer',\n                /** @ignore */\n                fontSize: '0.8em'\n            },\n            /**\n             * CSS styles for the labels - the Zoom, From and To texts.\n             *\n             * In styled mode, the labels are styled by the\n             * `.highcharts-range-label` class.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.CSSObject}\n             */\n            labelStyle: {\n                /** @ignore */\n                color: \"#666666\" /* Palette.neutralColor60 */,\n                /** @ignore */\n                fontSize: '0.8em'\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorDefaults = {\n            lang,\n            rangeSelector\n        };\n\n        return RangeSelectorDefaults;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Core/Utilities.js']], function (D, H, RangeSelectorDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { composed } = H;\n        const { addEvent, defined, extend, find, isNumber, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const chartDestroyEvents = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let RangeSelectorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the axis min value based on the range option and the current max. For\n         * stock charts this is extended via the {@link RangeSelector} so that if the\n         * selected range is a multiple of months or years, it is compensated for\n         * various month lengths.\n         *\n         * @private\n         * @function Highcharts.Axis#minFromRange\n         * @return {number|undefined}\n         *         The new minimum value.\n         */\n        function axisMinFromRange() {\n            const rangeOptions = this.range, type = rangeOptions.type, max = this.max, time = this.chart.time, \n            // Get the true range from a start date\n            getTrueRange = function (base, count) {\n                const timeName = type === 'year' ?\n                    'FullYear' : 'Month';\n                const date = new time.Date(base);\n                const basePeriod = time.get(timeName, date);\n                time.set(timeName, date, basePeriod + count);\n                if (basePeriod === time.get(timeName, date)) {\n                    time.set('Date', date, 0); // #6537\n                }\n                return date.getTime() - base;\n            };\n            let min, range;\n            if (isNumber(rangeOptions)) {\n                min = max - rangeOptions;\n                range = rangeOptions;\n            }\n            else if (rangeOptions) {\n                min = max + getTrueRange(max, -(rangeOptions.count || 1));\n                // Let the fixedRange reflect initial settings (#5930)\n                if (this.chart) {\n                    this.chart.fixedRange = max - min;\n                }\n            }\n            const dataMin = pick(this.dataMin, Number.MIN_VALUE);\n            if (!isNumber(min)) {\n                min = dataMin;\n            }\n            if (min <= dataMin) {\n                min = dataMin;\n                if (typeof range === 'undefined') { // #4501\n                    range = getTrueRange(min, rangeOptions.count);\n                }\n                this.newMax = Math.min(min + range, pick(this.dataMax, Number.MAX_VALUE));\n            }\n            if (!isNumber(max)) {\n                min = void 0;\n            }\n            else if (!isNumber(rangeOptions) &&\n                rangeOptions &&\n                rangeOptions._offsetMin) {\n                min += rangeOptions._offsetMin;\n            }\n            return min;\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, RangeSelectorClass) {\n            RangeSelectorConstructor = RangeSelectorClass;\n            if (pushUnique(composed, compose)) {\n                const chartProto = ChartClass.prototype;\n                AxisClass.prototype.minFromRange = axisMinFromRange;\n                addEvent(ChartClass, 'afterGetContainer', onChartAfterGetContainer);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'destroy', onChartDestroy);\n                addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                addEvent(ChartClass, 'render', onChartRender);\n                addEvent(ChartClass, 'update', onChartUpdate);\n                chartProto.callbacks.push(onChartCallback);\n                extend(defaultOptions, { rangeSelector: RangeSelectorDefaults.rangeSelector });\n                extend(defaultOptions.lang, RangeSelectorDefaults.lang);\n            }\n        }\n        /**\n         * Initialize rangeselector for stock charts\n         * @private\n         */\n        function onChartAfterGetContainer() {\n            if (this.options.rangeSelector &&\n                this.options.rangeSelector.enabled) {\n                this.rangeSelector = new RangeSelectorConstructor(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            const chart = this, axes = chart.axes, rangeSelector = chart.rangeSelector;\n            if (rangeSelector) {\n                if (isNumber(rangeSelector.deferredYTDClick)) {\n                    rangeSelector.clickButton(rangeSelector.deferredYTDClick);\n                    delete rangeSelector.deferredYTDClick;\n                }\n                axes.forEach((axis) => {\n                    axis.updateNames();\n                    axis.setScale();\n                });\n                chart.getAxisMargins();\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            let extremes, legend, alignTo, verticalAlign;\n            const rangeSelector = chart.rangeSelector, redraw = () => {\n                if (rangeSelector) {\n                    extremes = chart.xAxis[0].getExtremes();\n                    legend = chart.legend;\n                    verticalAlign = (rangeSelector &&\n                        rangeSelector.options.verticalAlign);\n                    if (isNumber(extremes.min)) {\n                        rangeSelector.render(extremes.min, extremes.max);\n                    }\n                    // Re-align the legend so that it's below the rangeselector\n                    if (legend.display &&\n                        verticalAlign === 'top' &&\n                        verticalAlign === legend.options.verticalAlign) {\n                        // Create a new alignment box for the legend.\n                        alignTo = merge(chart.spacingBox);\n                        if (legend.options.layout === 'vertical') {\n                            alignTo.y = chart.plotTop;\n                        }\n                        else {\n                            alignTo.y += rangeSelector.getHeight();\n                        }\n                        legend.group.placed = false; // Don't animate the alignment.\n                        legend.align(alignTo);\n                    }\n                }\n            };\n            if (rangeSelector) {\n                const events = find(chartDestroyEvents, (e) => e[0] === chart);\n                if (!events) {\n                    chartDestroyEvents.push([chart, [\n                            // redraw the scroller on setExtremes\n                            addEvent(chart.xAxis[0], 'afterSetExtremes', function (e) {\n                                if (rangeSelector) {\n                                    rangeSelector.render(e.min, e.max);\n                                }\n                            }),\n                            // redraw the scroller chart resize\n                            addEvent(chart, 'redraw', redraw)\n                        ]]);\n                }\n                // do it now\n                redraw();\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            for (let i = 0, iEnd = chartDestroyEvents.length; i < iEnd; ++i) {\n                const events = chartDestroyEvents[i];\n                if (events[0] === this) {\n                    events[1].forEach((unbind) => unbind());\n                    chartDestroyEvents.splice(i, 1);\n                    return;\n                }\n            }\n        }\n        function onChartGetMargins() {\n            const rangeSelector = this.rangeSelector;\n            if (rangeSelector) {\n                const rangeSelectorHeight = rangeSelector.getHeight();\n                if (this.extraTopMargin) {\n                    this.plotTop += rangeSelectorHeight;\n                }\n                if (this.extraBottomMargin) {\n                    this.marginBottom += rangeSelectorHeight;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            const chart = this, rangeSelector = chart.rangeSelector;\n            if (rangeSelector && !rangeSelector.options.floating) {\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.extraBottomMargin = true;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.extraTopMargin = true;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartUpdate(e) {\n            const chart = this, options = e.options, optionsRangeSelector = options.rangeSelector, extraBottomMarginWas = this.extraBottomMargin, extraTopMarginWas = this.extraTopMargin;\n            let rangeSelector = chart.rangeSelector;\n            if (optionsRangeSelector &&\n                optionsRangeSelector.enabled &&\n                !defined(rangeSelector) &&\n                this.options.rangeSelector) {\n                this.options.rangeSelector.enabled = true;\n                this.rangeSelector = rangeSelector = new RangeSelectorConstructor(this);\n            }\n            this.extraBottomMargin = false;\n            this.extraTopMargin = false;\n            if (rangeSelector) {\n                onChartCallback(this);\n                const verticalAlign = (optionsRangeSelector &&\n                    optionsRangeSelector.verticalAlign) || (rangeSelector.options && rangeSelector.options.verticalAlign);\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n                if (this.extraBottomMargin !== extraBottomMarginWas ||\n                    this.extraTopMargin !== extraTopMarginWas) {\n                    this.isDirtyBox = true;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorComposition = {\n            compose\n        };\n\n        return RangeSelectorComposition;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelector.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorComposition.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (Axis, D, H, RangeSelectorComposition, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, createElement, css, defined, destroyObjectProperties, discardElement, extend, fireEvent, isNumber, merge, objectEach, pad, pick, pInt, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the preferred input type based on a date format string.\n         *\n         * @private\n         * @function preferredInputType\n         */\n        function preferredInputType(format) {\n            const ms = format.indexOf('%L') !== -1;\n            if (ms) {\n                return 'text';\n            }\n            const date = ['a', 'A', 'd', 'e', 'w', 'b', 'B', 'm', 'o', 'y', 'Y']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            const time = ['H', 'k', 'I', 'l', 'M', 'S']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            if (date && time) {\n                return 'datetime-local';\n            }\n            if (date) {\n                return 'date';\n            }\n            if (time) {\n                return 'time';\n            }\n            return 'text';\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The range selector.\n         *\n         * @private\n         * @class\n         * @name Highcharts.RangeSelector\n         * @param {Highcharts.Chart} chart\n         */\n        class RangeSelector {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass) {\n                RangeSelectorComposition.compose(AxisClass, ChartClass, RangeSelector);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.buttonOptions = RangeSelector.prototype.defaultButtons;\n                this.initialButtonGroupWidth = 0;\n                this.chart = chart;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * The method to run when one of the buttons in the range selectors is\n             * clicked\n             *\n             * @private\n             * @function Highcharts.RangeSelector#clickButton\n             * @param {number} i\n             *        The index of the button\n             * @param {boolean} [redraw]\n             */\n            clickButton(i, redraw) {\n                const rangeSelector = this, chart = rangeSelector.chart, rangeOptions = rangeSelector.buttonOptions[i], baseAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {}, type = rangeOptions.type, dataGrouping = rangeOptions.dataGrouping;\n                let dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, newMin, newMax = baseAxis && Math.round(Math.min(baseAxis.max, pick(dataMax, baseAxis.max))), // #1568\n                baseXAxisOptions, range = rangeOptions._range, rangeMin, minSetting, rangeSetting, ctx, ytdExtremes, addOffsetMin = true;\n                // chart has no data, base series is removed\n                if (dataMin === null || dataMax === null) {\n                    return;\n                }\n                // Set the fixed range before range is altered\n                chart.fixedRange = range;\n                rangeSelector.setSelected(i);\n                // Apply dataGrouping associated to button\n                if (dataGrouping) {\n                    this.forcedDataGrouping = true;\n                    Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);\n                    this.frozenStates = rangeOptions.preserveDataGrouping;\n                }\n                // Apply range\n                if (type === 'month' || type === 'year') {\n                    if (!baseAxis) {\n                        // This is set to the user options and picked up later when the\n                        // axis is instantiated so that we know the min and max.\n                        range = rangeOptions;\n                    }\n                    else {\n                        ctx = {\n                            range: rangeOptions,\n                            max: newMax,\n                            chart: chart,\n                            dataMin: dataMin,\n                            dataMax: dataMax\n                        };\n                        newMin = baseAxis.minFromRange.call(ctx);\n                        if (isNumber(ctx.newMax)) {\n                            newMax = ctx.newMax;\n                        }\n                        // #15799: offsetMin is added in minFromRange so that it works\n                        // with pre-selected buttons as well\n                        addOffsetMin = false;\n                    }\n                    // Fixed times like minutes, hours, days\n                }\n                else if (range) {\n                    newMin = Math.max(newMax - range, dataMin);\n                    newMax = Math.min(newMin + range, dataMax);\n                    addOffsetMin = false;\n                }\n                else if (type === 'ytd') {\n                    // On user clicks on the buttons, or a delayed action running from\n                    // the beforeRender event (below), the baseAxis is defined.\n                    if (baseAxis) {\n                        // When \"ytd\" is the pre-selected button for the initial view,\n                        // its calculation is delayed and rerun in the beforeRender\n                        // event (below). When the series are initialized, but before\n                        // the chart is rendered, we have access to the xData array\n                        // (#942).\n                        if (typeof dataMax === 'undefined' ||\n                            typeof dataMin === 'undefined') {\n                            dataMin = Number.MAX_VALUE;\n                            dataMax = Number.MIN_VALUE;\n                            chart.series.forEach((series) => {\n                                // reassign it to the last item\n                                const xData = series.xData;\n                                if (xData) {\n                                    dataMin = Math.min(xData[0], dataMin);\n                                    dataMax = Math.max(xData[xData.length - 1], dataMax);\n                                }\n                            });\n                            redraw = false;\n                        }\n                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC);\n                        newMin = rangeMin = ytdExtremes.min;\n                        newMax = ytdExtremes.max;\n                        // \"ytd\" is pre-selected. We don't yet have access to processed\n                        // point and extremes data (things like pointStart and pointInterval\n                        // are missing), so we delay the process (#942)\n                    }\n                    else {\n                        rangeSelector.deferredYTDClick = i;\n                        return;\n                    }\n                }\n                else if (type === 'all' && baseAxis) {\n                    // If the navigator exist and the axis range is declared reset that\n                    // range and from now on only use the range set by a user, #14742.\n                    if (chart.navigator && chart.navigator.baseSeries[0]) {\n                        chart.navigator.baseSeries[0].xAxis.options.range = void 0;\n                    }\n                    newMin = dataMin;\n                    newMax = dataMax;\n                }\n                if (addOffsetMin && rangeOptions._offsetMin && defined(newMin)) {\n                    newMin += rangeOptions._offsetMin;\n                }\n                if (rangeOptions._offsetMax && defined(newMax)) {\n                    newMax += rangeOptions._offsetMax;\n                }\n                if (this.dropdown) {\n                    this.dropdown.selectedIndex = i + 1;\n                }\n                // Update the chart\n                if (!baseAxis) {\n                    // Axis not yet instanciated. Temporarily set min and range\n                    // options and remove them on chart load (#4317).\n                    baseXAxisOptions = splat(chart.options.xAxis)[0];\n                    rangeSetting = baseXAxisOptions.range;\n                    baseXAxisOptions.range = range;\n                    minSetting = baseXAxisOptions.min;\n                    baseXAxisOptions.min = rangeMin;\n                    addEvent(chart, 'load', function resetMinAndRange() {\n                        baseXAxisOptions.range = rangeSetting;\n                        baseXAxisOptions.min = minSetting;\n                    });\n                }\n                else {\n                    // Existing axis object. Set extremes after render time.\n                    baseAxis.setExtremes(newMin, newMax, pick(redraw, true), void 0, // auto animation\n                    {\n                        trigger: 'rangeSelectorButton',\n                        rangeSelectorButton: rangeOptions\n                    });\n                }\n                fireEvent(this, 'afterBtnClick');\n            }\n            /**\n             * Set the selected option. This method only sets the internal flag, it\n             * doesn't update the buttons or the actual zoomed range.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setSelected\n             * @param {number} [selected]\n             */\n            setSelected(selected) {\n                this.selected = this.options.selected = selected;\n            }\n            /**\n             * Initialize the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#init\n             * @param {Highcharts.Chart} chart\n             */\n            init(chart) {\n                const rangeSelector = this, options = chart.options.rangeSelector, buttonOptions = (options.buttons || rangeSelector.defaultButtons.slice()), selectedOption = options.selected, blurInputs = function () {\n                    const minInput = rangeSelector.minInput, maxInput = rangeSelector.maxInput;\n                    // #3274 in some case blur is not defined\n                    if (minInput && !!minInput.blur) {\n                        fireEvent(minInput, 'blur');\n                    }\n                    if (maxInput && !!maxInput.blur) {\n                        fireEvent(maxInput, 'blur');\n                    }\n                };\n                rangeSelector.chart = chart;\n                rangeSelector.options = options;\n                rangeSelector.buttons = [];\n                rangeSelector.buttonOptions = buttonOptions;\n                this.eventsToUnbind = [];\n                this.eventsToUnbind.push(addEvent(chart.container, 'mousedown', blurInputs));\n                this.eventsToUnbind.push(addEvent(chart, 'resize', blurInputs));\n                // Extend the buttonOptions with actual range\n                buttonOptions.forEach(rangeSelector.computeButtonRange);\n                // zoomed range based on a pre-selected button index\n                if (typeof selectedOption !== 'undefined' &&\n                    buttonOptions[selectedOption]) {\n                    this.clickButton(selectedOption, false);\n                }\n                this.eventsToUnbind.push(addEvent(chart, 'load', function () {\n                    // If a data grouping is applied to the current button, release it\n                    // when extremes change\n                    if (chart.xAxis && chart.xAxis[0]) {\n                        addEvent(chart.xAxis[0], 'setExtremes', function (e) {\n                            if (this.max - this.min !==\n                                chart.fixedRange &&\n                                e.trigger !== 'rangeSelectorButton' &&\n                                e.trigger !== 'updatedData' &&\n                                rangeSelector.forcedDataGrouping &&\n                                !rangeSelector.frozenStates) {\n                                this.setDataGrouping(false, false);\n                            }\n                        });\n                    }\n                }));\n            }\n            /**\n             * Dynamically update the range selector buttons after a new range has been\n             * set\n             *\n             * @private\n             * @function Highcharts.RangeSelector#updateButtonStates\n             */\n            updateButtonStates() {\n                const rangeSelector = this, chart = this.chart, dropdown = this.dropdown, baseAxis = chart.xAxis[0], actualRange = Math.round(baseAxis.max - baseAxis.min), hasNoData = !baseAxis.hasVisibleSeries, day = 24 * 36e5, // A single day in milliseconds\n                unionExtremes = (chart.scroller &&\n                    chart.scroller.getUnionExtremes()) || baseAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC), ytdMin = ytdExtremes.min, ytdMax = ytdExtremes.max, selected = rangeSelector.selected, allButtonsEnabled = rangeSelector.options.allButtonsEnabled, buttons = rangeSelector.buttons;\n                let selectedExists = isNumber(selected), isSelectedTooGreat = false;\n                rangeSelector.buttonOptions.forEach((rangeOptions, i) => {\n                    const range = rangeOptions._range, type = rangeOptions.type, count = rangeOptions.count || 1, button = buttons[i], offsetRange = rangeOptions._offsetMax -\n                        rangeOptions._offsetMin, isSelected = i === selected, \n                    // Disable buttons where the range exceeds what is allowed in\n                    // the current view\n                    isTooGreatRange = range >\n                        dataMax - dataMin, \n                    // Disable buttons where the range is smaller than the minimum\n                    // range\n                    isTooSmallRange = range < baseAxis.minRange;\n                    let state = 0, \n                    // Do not select the YTD button if not explicitly told so\n                    isYTDButNotSelected = false, \n                    // Disable the All button if we're already showing all\n                    isAllButAlreadyShowingAll = false, isSameRange = range === actualRange;\n                    if (isSelected && isTooGreatRange) {\n                        isSelectedTooGreat = true;\n                    }\n                    // Months and years have a variable range so we check the extremes\n                    if ((type === 'month' || type === 'year') &&\n                        (actualRange + 36e5 >=\n                            { month: 28, year: 365 }[type] * day * count - offsetRange) &&\n                        (actualRange - 36e5 <=\n                            { month: 31, year: 366 }[type] * day * count + offsetRange)) {\n                        isSameRange = true;\n                    }\n                    else if (type === 'ytd') {\n                        isSameRange = (ytdMax - ytdMin + offsetRange) === actualRange;\n                        isYTDButNotSelected = !isSelected;\n                    }\n                    else if (type === 'all') {\n                        isSameRange = (baseAxis.max - baseAxis.min >=\n                            dataMax - dataMin);\n                        isAllButAlreadyShowingAll = (!isSelected &&\n                            selectedExists &&\n                            isSameRange);\n                    }\n                    // The new zoom area happens to match the range for a button - mark\n                    // it selected. This happens when scrolling across an ordinal gap.\n                    // It can be seen in the intraday demos when selecting 1h and scroll\n                    // across the night gap.\n                    const disable = (!allButtonsEnabled &&\n                        !(isSelectedTooGreat && type === 'all') &&\n                        (isTooGreatRange ||\n                            isTooSmallRange ||\n                            isAllButAlreadyShowingAll ||\n                            hasNoData));\n                    const select = ((isSelectedTooGreat && type === 'all') ||\n                        (isSelected && isSameRange) ||\n                        (isSameRange && !selectedExists && !isYTDButNotSelected) ||\n                        (isSelected && rangeSelector.frozenStates));\n                    if (disable) {\n                        state = 3;\n                    }\n                    else if (select) {\n                        selectedExists = true; // Only one button can be selected\n                        state = 2;\n                    }\n                    // If state has changed, update the button\n                    if (button.state !== state) {\n                        button.setState(state);\n                        if (dropdown) {\n                            dropdown.options[i + 1].disabled = disable;\n                            if (state === 2) {\n                                dropdown.selectedIndex = i + 1;\n                            }\n                        }\n                        // Reset (#9209)\n                        if (state === 0 && selected === i) {\n                            rangeSelector.setSelected();\n                        }\n                        else if ((state === 2 && !defined(selected)) ||\n                            isSelectedTooGreat) {\n                            rangeSelector.setSelected(i);\n                        }\n                    }\n                });\n            }\n            /**\n             * Compute and cache the range for an individual button\n             *\n             * @private\n             * @function Highcharts.RangeSelector#computeButtonRange\n             * @param {Highcharts.RangeSelectorButtonsOptions} rangeOptions\n             */\n            computeButtonRange(rangeOptions) {\n                const type = rangeOptions.type, count = rangeOptions.count || 1, \n                // these time intervals have a fixed number of milliseconds, as\n                // opposed to month, ytd and year\n                fixedTimes = {\n                    millisecond: 1,\n                    second: 1000,\n                    minute: 60 * 1000,\n                    hour: 3600 * 1000,\n                    day: 24 * 3600 * 1000,\n                    week: 7 * 24 * 3600 * 1000\n                };\n                // Store the range on the button object\n                if (fixedTimes[type]) {\n                    rangeOptions._range = fixedTimes[type] * count;\n                }\n                else if (type === 'month' || type === 'year') {\n                    rangeOptions._range = {\n                        month: 30,\n                        year: 365\n                    }[type] * 24 * 36e5 * count;\n                }\n                rangeOptions._offsetMin = pick(rangeOptions.offsetMin, 0);\n                rangeOptions._offsetMax = pick(rangeOptions.offsetMax, 0);\n                rangeOptions._range +=\n                    rangeOptions._offsetMax - rangeOptions._offsetMin;\n            }\n            /**\n             * Get the unix timestamp of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getInputValue\n             */\n            getInputValue(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                const options = this.chart.options\n                    .rangeSelector;\n                const time = this.chart.time;\n                if (input) {\n                    return ((input.type === 'text' && options.inputDateParser) ||\n                        this.defaultInputDateParser)(input.value, time.useUTC, time);\n                }\n                return 0;\n            }\n            /**\n             * Set the internal and displayed value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputValue\n             */\n            setInputValue(name, inputTime) {\n                const options = this.options, time = this.chart.time, input = name === 'min' ? this.minInput : this.maxInput, dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                if (input) {\n                    const hcTimeAttr = input.getAttribute('data-hc-time');\n                    let updatedTime = defined(hcTimeAttr) ? Number(hcTimeAttr) : void 0;\n                    if (defined(inputTime)) {\n                        const previousTime = updatedTime;\n                        if (defined(previousTime)) {\n                            input.setAttribute('data-hc-time-previous', previousTime);\n                        }\n                        input.setAttribute('data-hc-time', inputTime);\n                        updatedTime = inputTime;\n                    }\n                    input.value = time.dateFormat((this.inputTypeFormats[input.type] ||\n                        options.inputEditDateFormat), updatedTime);\n                    if (dateBox) {\n                        dateBox.attr({\n                            text: time.dateFormat(options.inputDateFormat, updatedTime)\n                        });\n                    }\n                }\n            }\n            /**\n             * Set the min and max value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputExtremes\n             */\n            setInputExtremes(name, min, max) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    const format = this.inputTypeFormats[input.type];\n                    const time = this.chart.time;\n                    if (format) {\n                        const newMin = time.dateFormat(format, min);\n                        if (input.min !== newMin) {\n                            input.min = newMin;\n                        }\n                        const newMax = time.dateFormat(format, max);\n                        if (input.max !== newMax) {\n                            input.max = newMax;\n                        }\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#showInput\n             * @param {string} name\n             */\n            showInput(name) {\n                const dateBox = name === 'min' ? this.minDateBox : this.maxDateBox, input = name === 'min' ? this.minInput : this.maxInput;\n                if (input && dateBox && this.inputGroup) {\n                    const isTextInput = input.type === 'text', { translateX = 0, translateY = 0 } = this.inputGroup, { x = 0, width = 0, height = 0 } = dateBox, { inputBoxWidth } = this.options;\n                    css(input, {\n                        width: isTextInput ?\n                            ((width + (inputBoxWidth ? -2 : 20)) + 'px') :\n                            'auto',\n                        height: (height - 2) + 'px',\n                        border: '2px solid silver'\n                    });\n                    if (isTextInput && inputBoxWidth) {\n                        css(input, {\n                            left: (translateX + x) + 'px',\n                            top: translateY + 'px'\n                        });\n                        // Inputs of types date, time or datetime-local should be centered\n                        // on top of the dateBox\n                    }\n                    else {\n                        css(input, {\n                            left: Math.min(Math.round(x +\n                                translateX -\n                                (input.offsetWidth - width) / 2), this.chart.chartWidth - input.offsetWidth) + 'px',\n                            top: (translateY - (input.offsetHeight - height) / 2) + 'px'\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideInput\n             * @param {string} name\n             */\n            hideInput(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    css(input, {\n                        top: '-9999em',\n                        border: 0,\n                        width: '1px',\n                        height: '1px'\n                    });\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#defaultInputDateParser\n             */\n            defaultInputDateParser(inputDate, useUTC, time) {\n                const hasTimezone = (str) => str.length > 6 &&\n                    (str.lastIndexOf('-') === str.length - 6 ||\n                        str.lastIndexOf('+') === str.length - 6);\n                let input = inputDate.split('/').join('-').split(' ').join('T');\n                if (input.indexOf('T') === -1) {\n                    input += 'T00:00';\n                }\n                if (useUTC) {\n                    input += 'Z';\n                }\n                else if (H.isSafari && !hasTimezone(input)) {\n                    const offset = new Date(input).getTimezoneOffset() / 60;\n                    input += offset <= 0 ? `+${pad(-offset)}:00` : `-${pad(offset)}:00`;\n                }\n                let date = Date.parse(input);\n                // If the value isn't parsed directly to a value by the\n                // browser's Date.parse method, try\n                // parsing it a different way\n                if (!isNumber(date)) {\n                    const parts = inputDate.split('-');\n                    date = Date.UTC(pInt(parts[0]), pInt(parts[1]) - 1, pInt(parts[2]));\n                }\n                if (time && useUTC && isNumber(date)) {\n                    date += time.getTimezoneOffset(date);\n                }\n                return date;\n            }\n            /**\n             * Draw either the 'from' or the 'to' HTML input box of the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#drawInput\n             */\n            drawInput(name) {\n                const { chart, div, inputGroup } = this;\n                const rangeSelector = this, chartStyle = chart.renderer.style || {}, renderer = chart.renderer, options = chart.options.rangeSelector, lang = defaultOptions.lang, isMin = name === 'min';\n                /**\n                 * @private\n                 */\n                function updateExtremes() {\n                    const { maxInput, minInput } = rangeSelector, chartAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chartAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax;\n                    let value = rangeSelector.getInputValue(name);\n                    if (value !== Number(input.getAttribute('data-hc-time-previous')) &&\n                        isNumber(value)) {\n                        input.setAttribute('data-hc-time-previous', value);\n                        // Validate the extremes. If it goes beyound the data min or\n                        // max, use the actual data extreme (#2438).\n                        if (isMin && maxInput && isNumber(dataMin)) {\n                            if (value > Number(maxInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value < dataMin) {\n                                value = dataMin;\n                            }\n                        }\n                        else if (minInput && isNumber(dataMax)) {\n                            if (value < Number(minInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value > dataMax) {\n                                value = dataMax;\n                            }\n                        }\n                        // Set the extremes\n                        if (typeof value !== 'undefined') { // @todo typof undefined\n                            chartAxis.setExtremes(isMin ? value : chartAxis.min, isMin ? chartAxis.max : value, void 0, void 0, { trigger: 'rangeSelectorInput' });\n                        }\n                    }\n                }\n                // Create the text label\n                const text = lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'] || '';\n                const label = renderer\n                    .label(text, 0)\n                    .addClass('highcharts-range-label')\n                    .attr({\n                    padding: text ? 2 : 0,\n                    height: text ? options.inputBoxHeight : 0\n                })\n                    .add(inputGroup);\n                // Create an SVG label that shows updated date ranges and and records\n                // click events that bring in the HTML input.\n                const dateBox = renderer\n                    .label('', 0)\n                    .addClass('highcharts-range-input')\n                    .attr({\n                    padding: 2,\n                    width: options.inputBoxWidth,\n                    height: options.inputBoxHeight,\n                    'text-align': 'center'\n                })\n                    .on('click', function () {\n                    // If it is already focused, the onfocus event doesn't fire\n                    // (#3713)\n                    rangeSelector.showInput(name);\n                    rangeSelector[name + 'Input'].focus();\n                });\n                if (!chart.styledMode) {\n                    dateBox.attr({\n                        stroke: options.inputBoxBorderColor,\n                        'stroke-width': 1\n                    });\n                }\n                dateBox.add(inputGroup);\n                // Create the HTML input element. This is rendered as 1x1 pixel then set\n                // to the right size when focused.\n                const input = createElement('input', {\n                    name: name,\n                    className: 'highcharts-range-selector'\n                }, void 0, div);\n                // #14788: Setting input.type to an unsupported type throws in IE, so\n                // we need to use setAttribute instead\n                input.setAttribute('type', preferredInputType(options.inputDateFormat || '%e %b %Y'));\n                if (!chart.styledMode) {\n                    // Styles\n                    label.css(merge(chartStyle, options.labelStyle));\n                    dateBox.css(merge({\n                        color: \"#333333\" /* Palette.neutralColor80 */\n                    }, chartStyle, options.inputStyle));\n                    css(input, extend({\n                        position: 'absolute',\n                        border: 0,\n                        boxShadow: '0 0 15px rgba(0,0,0,0.3)',\n                        width: '1px',\n                        height: '1px',\n                        padding: 0,\n                        textAlign: 'center',\n                        fontSize: chartStyle.fontSize,\n                        fontFamily: chartStyle.fontFamily,\n                        top: '-9999em' // #4798\n                    }, options.inputStyle));\n                }\n                // Blow up the input box\n                input.onfocus = () => {\n                    rangeSelector.showInput(name);\n                };\n                // Hide away the input box\n                input.onblur = () => {\n                    // update extermes only when inputs are active\n                    if (input === H.doc.activeElement) { // Only when focused\n                        // Update also when no `change` event is triggered, like when\n                        // clicking inside the SVG (#4710)\n                        updateExtremes();\n                    }\n                    // #10404 - move hide and blur outside focus\n                    rangeSelector.hideInput(name);\n                    rangeSelector.setInputValue(name);\n                    input.blur(); // #4606\n                };\n                let keyDown = false;\n                // handle changes in the input boxes\n                input.onchange = () => {\n                    // Update extremes and blur input when clicking date input calendar\n                    if (!keyDown) {\n                        updateExtremes();\n                        rangeSelector.hideInput(name);\n                        input.blur();\n                    }\n                };\n                input.onkeypress = (event) => {\n                    // IE does not fire onchange on enter\n                    if (event.keyCode === 13) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeydown = (event) => {\n                    keyDown = true;\n                    // Arrow keys\n                    if (event.keyCode === 38 || event.keyCode === 40) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeyup = () => {\n                    keyDown = false;\n                };\n                return { dateBox, input, label };\n            }\n            /**\n             * Get the position of the range selector buttons and inputs. This can be\n             * overridden from outside for custom positioning.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getPosition\n             */\n            getPosition() {\n                const chart = this.chart, options = chart.options.rangeSelector, top = options.verticalAlign === 'top' ?\n                    chart.plotTop - chart.axisOffset[0] :\n                    0; // set offset only for varticalAlign top\n                return {\n                    buttonTop: top + options.buttonPosition.y,\n                    inputTop: top + options.inputPosition.y - 10\n                };\n            }\n            /**\n             * Get the extremes of YTD. Will choose dataMax if its value is lower than\n             * the current timestamp. Will choose dataMin if its value is higher than\n             * the timestamp for the start of current year.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getYTDExtremes\n             * @return {*}\n             * Returns min and max for the YTD\n             */\n            getYTDExtremes(dataMax, dataMin, useUTC) {\n                const time = this.chart.time, now = new time.Date(dataMax), year = time.get('FullYear', now), startOfYear = useUTC ?\n                    time.Date.UTC(year, 0, 1) : // eslint-disable-line new-cap\n                    +new time.Date(year, 0, 1), min = Math.max(dataMin, startOfYear), ts = now.getTime();\n                return {\n                    max: Math.min(dataMax || ts, ts),\n                    min\n                };\n            }\n            /**\n             * Render the range selector including the buttons and the inputs. The first\n             * time render is called, the elements are created and positioned. On\n             * subsequent calls, they are moved and updated.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#render\n             * @param {number} [min]\n             *        X axis minimum\n             * @param {number} [max]\n             *        X axis maximum\n             */\n            render(min, max) {\n                const chart = this.chart, renderer = chart.renderer, container = chart.container, chartOptions = chart.options, options = chartOptions.rangeSelector, \n                // Place inputs above the container\n                inputsZIndex = pick(chartOptions.chart.style &&\n                    chartOptions.chart.style.zIndex, 0) + 1, inputEnabled = options.inputEnabled, rendered = this.rendered;\n                if (options.enabled === false) {\n                    return;\n                }\n                // create the elements\n                if (!rendered) {\n                    this.group = renderer.g('range-selector-group')\n                        .attr({\n                        zIndex: 7\n                    })\n                        .add();\n                    this.div = createElement('div', void 0, {\n                        position: 'relative',\n                        height: 0,\n                        zIndex: inputsZIndex\n                    });\n                    if (this.buttonOptions.length) {\n                        this.renderButtons();\n                    }\n                    // First create a wrapper outside the container in order to make\n                    // the inputs work and make export correct\n                    if (container.parentNode) {\n                        container.parentNode.insertBefore(this.div, container);\n                    }\n                    if (inputEnabled) {\n                        // Create the group to keep the inputs\n                        this.inputGroup = renderer.g('input-group').add(this.group);\n                        const minElems = this.drawInput('min');\n                        this.minDateBox = minElems.dateBox;\n                        this.minLabel = minElems.label;\n                        this.minInput = minElems.input;\n                        const maxElems = this.drawInput('max');\n                        this.maxDateBox = maxElems.dateBox;\n                        this.maxLabel = maxElems.label;\n                        this.maxInput = maxElems.input;\n                    }\n                }\n                if (inputEnabled) {\n                    // Set or reset the input values\n                    this.setInputValue('min', min);\n                    this.setInputValue('max', max);\n                    const unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chart.xAxis[0] || {};\n                    if (defined(unionExtremes.dataMin) &&\n                        defined(unionExtremes.dataMax)) {\n                        const minRange = chart.xAxis[0].minRange || 0;\n                        this.setInputExtremes('min', unionExtremes.dataMin, Math.min(unionExtremes.dataMax, this.getInputValue('max')) - minRange);\n                        this.setInputExtremes('max', Math.max(unionExtremes.dataMin, this.getInputValue('min')) + minRange, unionExtremes.dataMax);\n                    }\n                    // Reflow\n                    if (this.inputGroup) {\n                        let x = 0;\n                        [\n                            this.minLabel,\n                            this.minDateBox,\n                            this.maxLabel,\n                            this.maxDateBox\n                        ].forEach((label) => {\n                            if (label) {\n                                const { width } = label.getBBox();\n                                if (width) {\n                                    label.attr({ x });\n                                    x += width + options.inputSpacing;\n                                }\n                            }\n                        });\n                    }\n                }\n                this.alignElements();\n                this.rendered = true;\n            }\n            /**\n             * Render the range buttons. This only runs the first time, later the\n             * positioning is laid out in alignElements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#renderButtons\n             */\n            renderButtons() {\n                const { buttons, chart, options } = this;\n                const lang = defaultOptions.lang;\n                const renderer = chart.renderer;\n                const buttonTheme = merge(options.buttonTheme);\n                const states = buttonTheme && buttonTheme.states;\n                // Prevent the button from resetting the width when the button state\n                // changes since we need more control over the width when collapsing\n                // the buttons\n                const width = buttonTheme.width || 28;\n                delete buttonTheme.width;\n                delete buttonTheme.states;\n                this.buttonGroup = renderer.g('range-selector-buttons').add(this.group);\n                const dropdown = this.dropdown = createElement('select', void 0, {\n                    position: 'absolute',\n                    width: '1px',\n                    height: '1px',\n                    padding: 0,\n                    border: 0,\n                    top: '-9999em',\n                    cursor: 'pointer',\n                    opacity: 0.0001\n                }, this.div);\n                // Prevent page zoom on iPhone\n                addEvent(dropdown, 'touchstart', () => {\n                    dropdown.style.fontSize = '16px';\n                });\n                // Forward events from select to button\n                [\n                    [H.isMS ? 'mouseover' : 'mouseenter'],\n                    [H.isMS ? 'mouseout' : 'mouseleave'],\n                    ['change', 'click']\n                ].forEach(([from, to]) => {\n                    addEvent(dropdown, from, () => {\n                        const button = buttons[this.currentButtonIndex()];\n                        if (button) {\n                            fireEvent(button.element, to || from);\n                        }\n                    });\n                });\n                this.zoomText = renderer\n                    .label((lang && lang.rangeSelectorZoom) || '', 0)\n                    .attr({\n                    padding: options.buttonTheme.padding,\n                    height: options.buttonTheme.height,\n                    paddingLeft: 0,\n                    paddingRight: 0\n                })\n                    .add(this.buttonGroup);\n                if (!this.chart.styledMode) {\n                    this.zoomText.css(options.labelStyle);\n                    buttonTheme['stroke-width'] = pick(buttonTheme['stroke-width'], 0);\n                }\n                createElement('option', {\n                    textContent: this.zoomText.textStr,\n                    disabled: true\n                }, void 0, dropdown);\n                this.buttonOptions.forEach((rangeOptions, i) => {\n                    createElement('option', {\n                        textContent: rangeOptions.title || rangeOptions.text\n                    }, void 0, dropdown);\n                    buttons[i] = renderer\n                        .button(rangeOptions.text, 0, 0, (e) => {\n                        // extract events from button object and call\n                        const buttonEvents = (rangeOptions.events && rangeOptions.events.click);\n                        let callDefaultEvent;\n                        if (buttonEvents) {\n                            callDefaultEvent =\n                                buttonEvents.call(rangeOptions, e);\n                        }\n                        if (callDefaultEvent !== false) {\n                            this.clickButton(i);\n                        }\n                        this.isActive = true;\n                    }, buttonTheme, states && states.hover, states && states.select, states && states.disabled)\n                        .attr({\n                        'text-align': 'center',\n                        width\n                    })\n                        .add(this.buttonGroup);\n                    if (rangeOptions.title) {\n                        buttons[i].attr('title', rangeOptions.title);\n                    }\n                });\n            }\n            /**\n             * Align the elements horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignElements\n             */\n            alignElements() {\n                const { buttonGroup, buttons, chart, group, inputGroup, options, zoomText } = this;\n                const chartOptions = chart.options;\n                const navButtonOptions = (chartOptions.exporting &&\n                    chartOptions.exporting.enabled !== false &&\n                    chartOptions.navigation &&\n                    chartOptions.navigation.buttonOptions);\n                const { buttonPosition, inputPosition, verticalAlign } = options;\n                // Get the X offset required to avoid overlapping with the exporting\n                // button. This is is used both by the buttonGroup and the inputGroup.\n                const getXOffsetForExportButton = (group, position) => {\n                    if (navButtonOptions &&\n                        this.titleCollision(chart) &&\n                        verticalAlign === 'top' &&\n                        position.align === 'right' && ((position.y -\n                        group.getBBox().height - 12) <\n                        ((navButtonOptions.y || 0) +\n                            (navButtonOptions.height || 0) +\n                            chart.spacing[0]))) {\n                        return -40;\n                    }\n                    return 0;\n                };\n                let plotLeft = chart.plotLeft;\n                if (group && buttonPosition && inputPosition) {\n                    let translateX = buttonPosition.x - chart.spacing[3];\n                    if (buttonGroup) {\n                        this.positionButtons();\n                        if (!this.initialButtonGroupWidth) {\n                            let width = 0;\n                            if (zoomText) {\n                                width += zoomText.getBBox().width + 5;\n                            }\n                            buttons.forEach((button, i) => {\n                                width += button.width || 0;\n                                if (i !== buttons.length - 1) {\n                                    width += options.buttonSpacing;\n                                }\n                            });\n                            this.initialButtonGroupWidth = width;\n                        }\n                        plotLeft -= chart.spacing[3];\n                        this.updateButtonStates();\n                        // Detect collision between button group and exporting\n                        const xOffsetForExportButton = getXOffsetForExportButton(buttonGroup, buttonPosition);\n                        this.alignButtonGroup(xOffsetForExportButton);\n                        // Skip animation\n                        group.placed = buttonGroup.placed = chart.hasLoaded;\n                    }\n                    let xOffsetForExportButton = 0;\n                    if (inputGroup) {\n                        // Detect collision between the input group and exporting button\n                        xOffsetForExportButton = getXOffsetForExportButton(inputGroup, inputPosition);\n                        if (inputPosition.align === 'left') {\n                            translateX = plotLeft;\n                        }\n                        else if (inputPosition.align === 'right') {\n                            translateX = -Math.max(chart.axisOffset[1], -xOffsetForExportButton);\n                        }\n                        // Update the alignment to the updated spacing box\n                        inputGroup.align({\n                            y: inputPosition.y,\n                            width: inputGroup.getBBox().width,\n                            align: inputPosition.align,\n                            // fix wrong getBBox() value on right align\n                            x: inputPosition.x + translateX - 2\n                        }, true, chart.spacingBox);\n                        // Skip animation\n                        inputGroup.placed = chart.hasLoaded;\n                    }\n                    this.handleCollision(xOffsetForExportButton);\n                    // Vertical align\n                    group.align({\n                        verticalAlign\n                    }, true, chart.spacingBox);\n                    const alignTranslateY = group.alignAttr.translateY;\n                    // Set position\n                    let groupHeight = group.getBBox().height + 20; // # 20 padding\n                    let translateY = 0;\n                    // Calculate bottom position\n                    if (verticalAlign === 'bottom') {\n                        const legendOptions = chart.legend && chart.legend.options;\n                        const legendHeight = (legendOptions &&\n                            legendOptions.verticalAlign === 'bottom' &&\n                            legendOptions.enabled &&\n                            !legendOptions.floating ?\n                            (chart.legend.legendHeight +\n                                pick(legendOptions.margin, 10)) :\n                            0);\n                        groupHeight = groupHeight + legendHeight - 20;\n                        translateY = (alignTranslateY -\n                            groupHeight -\n                            (options.floating ? 0 : options.y) -\n                            (chart.titleOffset ? chart.titleOffset[2] : 0) -\n                            10 // 10 spacing\n                        );\n                    }\n                    if (verticalAlign === 'top') {\n                        if (options.floating) {\n                            translateY = 0;\n                        }\n                        if (chart.titleOffset && chart.titleOffset[0]) {\n                            translateY = chart.titleOffset[0];\n                        }\n                        translateY += ((chart.margin[0] - chart.spacing[0]) || 0);\n                    }\n                    else if (verticalAlign === 'middle') {\n                        if (inputPosition.y === buttonPosition.y) {\n                            translateY = alignTranslateY;\n                        }\n                        else if (inputPosition.y || buttonPosition.y) {\n                            if (inputPosition.y < 0 ||\n                                buttonPosition.y < 0) {\n                                translateY -= Math.min(inputPosition.y, buttonPosition.y);\n                            }\n                            else {\n                                translateY = alignTranslateY - groupHeight;\n                            }\n                        }\n                    }\n                    group.translate(options.x, options.y + Math.floor(translateY));\n                    // Translate HTML inputs\n                    const { minInput, maxInput, dropdown } = this;\n                    if (options.inputEnabled && minInput && maxInput) {\n                        minInput.style.marginTop = group.translateY + 'px';\n                        maxInput.style.marginTop = group.translateY + 'px';\n                    }\n                    if (dropdown) {\n                        dropdown.style.marginTop = group.translateY + 'px';\n                    }\n                }\n            }\n            /**\n             * Align the button group horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignButtonGroup\n             * @param {number} xOffsetForExportButton\n             * @param {number} [width]\n             */\n            alignButtonGroup(xOffsetForExportButton, width) {\n                const { chart, options, buttonGroup, buttons } = this;\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft - chart.spacing[3];\n                let translateX = buttonPosition.x - chart.spacing[3];\n                if (buttonPosition.align === 'right') {\n                    translateX += xOffsetForExportButton - plotLeft; // #13014\n                }\n                else if (buttonPosition.align === 'center') {\n                    translateX -= plotLeft / 2;\n                }\n                if (buttonGroup) {\n                    // Align button group\n                    buttonGroup.align({\n                        y: buttonPosition.y,\n                        width: pick(width, this.initialButtonGroupWidth),\n                        align: buttonPosition.align,\n                        x: translateX\n                    }, true, chart.spacingBox);\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#positionButtons\n             */\n            positionButtons() {\n                const { buttons, chart, options, zoomText } = this;\n                const verb = chart.hasLoaded ? 'animate' : 'attr';\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft;\n                let buttonLeft = plotLeft;\n                if (zoomText && zoomText.visibility !== 'hidden') {\n                    // #8769, allow dynamically updating margins\n                    zoomText[verb]({\n                        x: pick(plotLeft + buttonPosition.x, plotLeft)\n                    });\n                    // Button start position\n                    buttonLeft += buttonPosition.x +\n                        zoomText.getBBox().width + 5;\n                }\n                for (let i = 0, iEnd = this.buttonOptions.length; i < iEnd; ++i) {\n                    if (buttons[i].visibility !== 'hidden') {\n                        buttons[i][verb]({ x: buttonLeft });\n                        // Increase the button position for the next button\n                        buttonLeft += (buttons[i].width || 0) + options.buttonSpacing;\n                    }\n                    else {\n                        buttons[i][verb]({ x: plotLeft });\n                    }\n                }\n            }\n            /**\n             * Handle collision between the button group and the input group\n             *\n             * @private\n             * @function Highcharts.RangeSelector#handleCollision\n             *\n             * @param  {number} xOffsetForExportButton\n             *                  The X offset of the group required to make room for the\n             *                  exporting button\n             */\n            handleCollision(xOffsetForExportButton) {\n                const { chart, buttonGroup, inputGroup } = this;\n                const { buttonPosition, dropdown, inputPosition } = this.options;\n                const maxButtonWidth = () => {\n                    let buttonWidth = 0;\n                    this.buttons.forEach((button) => {\n                        const bBox = button.getBBox();\n                        if (bBox.width > buttonWidth) {\n                            buttonWidth = bBox.width;\n                        }\n                    });\n                    return buttonWidth;\n                };\n                const groupsOverlap = (buttonGroupWidth) => {\n                    if (inputGroup && buttonGroup) {\n                        const inputGroupX = (inputGroup.alignAttr.translateX +\n                            inputGroup.alignOptions.x -\n                            xOffsetForExportButton +\n                            // getBBox for detecing left margin\n                            inputGroup.getBBox().x +\n                            // 2px padding to not overlap input and label\n                            2);\n                        const inputGroupWidth = inputGroup.alignOptions.width;\n                        const buttonGroupX = buttonGroup.alignAttr.translateX +\n                            buttonGroup.getBBox().x;\n                        return (buttonGroupX + buttonGroupWidth > inputGroupX) &&\n                            (inputGroupX + inputGroupWidth > buttonGroupX) &&\n                            (buttonPosition.y <\n                                (inputPosition.y +\n                                    inputGroup.getBBox().height));\n                    }\n                    return false;\n                };\n                const moveInputsDown = () => {\n                    if (inputGroup && buttonGroup) {\n                        inputGroup.attr({\n                            translateX: inputGroup.alignAttr.translateX + (chart.axisOffset[1] >= -xOffsetForExportButton ?\n                                0 :\n                                -xOffsetForExportButton),\n                            translateY: inputGroup.alignAttr.translateY +\n                                buttonGroup.getBBox().height + 10\n                        });\n                    }\n                };\n                if (buttonGroup) {\n                    if (dropdown === 'always') {\n                        this.collapseButtons(xOffsetForExportButton);\n                        if (groupsOverlap(maxButtonWidth())) {\n                            // Move the inputs down if there is still a collision\n                            // after collapsing the buttons\n                            moveInputsDown();\n                        }\n                        return;\n                    }\n                    if (dropdown === 'never') {\n                        this.expandButtons();\n                    }\n                }\n                // Detect collision\n                if (inputGroup && buttonGroup) {\n                    if ((inputPosition.align === buttonPosition.align) ||\n                        // 20 is minimal spacing between elements\n                        groupsOverlap(this.initialButtonGroupWidth + 20)) {\n                        if (dropdown === 'responsive') {\n                            this.collapseButtons(xOffsetForExportButton);\n                            if (groupsOverlap(maxButtonWidth())) {\n                                moveInputsDown();\n                            }\n                        }\n                        else {\n                            moveInputsDown();\n                        }\n                    }\n                    else if (dropdown === 'responsive') {\n                        this.expandButtons();\n                    }\n                }\n                else if (buttonGroup && dropdown === 'responsive') {\n                    if (this.initialButtonGroupWidth > chart.plotWidth) {\n                        this.collapseButtons(xOffsetForExportButton);\n                    }\n                    else {\n                        this.expandButtons();\n                    }\n                }\n            }\n            /**\n             * Collapse the buttons and put the select element on top.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#collapseButtons\n             * @param {number} xOffsetForExportButton\n             */\n            collapseButtons(xOffsetForExportButton) {\n                const { buttons, buttonOptions, chart, dropdown, options, zoomText } = this;\n                // If the buttons are already collapsed do nothing.\n                if (this.isCollapsed === true) {\n                    return;\n                }\n                this.isCollapsed = true;\n                const userButtonTheme = (chart.userOptions.rangeSelector &&\n                    chart.userOptions.rangeSelector.buttonTheme) || {};\n                const getAttribs = (text) => ({\n                    text: text ? `${text} â–¾` : 'â–¾',\n                    width: 'auto',\n                    paddingLeft: pick(options.buttonTheme.paddingLeft, userButtonTheme.padding, 8),\n                    paddingRight: pick(options.buttonTheme.paddingRight, userButtonTheme.padding, 8)\n                });\n                if (zoomText) {\n                    zoomText.hide();\n                }\n                let hasActiveButton = false;\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    if (button.state !== 2) {\n                        button.hide();\n                    }\n                    else {\n                        button.show();\n                        button.attr(getAttribs(rangeOptions.text));\n                        hasActiveButton = true;\n                    }\n                });\n                if (!hasActiveButton) {\n                    if (dropdown) {\n                        dropdown.selectedIndex = 0;\n                    }\n                    buttons[0].show();\n                    buttons[0].attr(getAttribs(this.zoomText && this.zoomText.textStr));\n                }\n                const { align } = options.buttonPosition;\n                this.positionButtons();\n                if (align === 'right' || align === 'center') {\n                    this.alignButtonGroup(xOffsetForExportButton, buttons[this.currentButtonIndex()].getBBox().width);\n                }\n                this.showDropdown();\n            }\n            /**\n             * Show all the buttons and hide the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#expandButtons\n             */\n            expandButtons() {\n                const { buttons, buttonOptions, options, zoomText } = this;\n                this.hideDropdown();\n                // If buttons are already not collapsed, do nothing.\n                if (this.isCollapsed === false) {\n                    return;\n                }\n                this.isCollapsed = false;\n                if (zoomText) {\n                    zoomText.show();\n                }\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    button.show();\n                    button.attr({\n                        text: rangeOptions.text,\n                        width: options.buttonTheme.width || 28,\n                        paddingLeft: pick(options.buttonTheme.paddingLeft, 'unset'),\n                        paddingRight: pick(options.buttonTheme.paddingRight, 'unset')\n                    });\n                    if (button.state < 2) {\n                        button.setState(0);\n                    }\n                });\n                this.positionButtons();\n            }\n            /**\n             * Get the index of the visible button when the buttons are collapsed.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#currentButtonIndex\n             */\n            currentButtonIndex() {\n                const { dropdown } = this;\n                if (dropdown && dropdown.selectedIndex > 0) {\n                    return dropdown.selectedIndex - 1;\n                }\n                return 0;\n            }\n            /**\n             * Position the select element on top of the button.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#showDropdown\n             */\n            showDropdown() {\n                const { buttonGroup, buttons, chart, dropdown } = this;\n                if (buttonGroup && dropdown) {\n                    const { translateX = 0, translateY = 0 } = buttonGroup, bBox = buttons[this.currentButtonIndex()].getBBox();\n                    css(dropdown, {\n                        left: (chart.plotLeft + translateX) + 'px',\n                        top: (translateY + 0.5) + 'px',\n                        width: bBox.width + 'px',\n                        height: bBox.height + 'px'\n                    });\n                    this.hasVisibleDropdown = true;\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideDropdown\n             */\n            hideDropdown() {\n                const { dropdown } = this;\n                if (dropdown) {\n                    css(dropdown, {\n                        top: '-9999em',\n                        width: '1px',\n                        height: '1px'\n                    });\n                    this.hasVisibleDropdown = false;\n                }\n            }\n            /**\n             * Extracts height of range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getHeight\n             * @return {number}\n             * Returns rangeSelector height\n             */\n            getHeight() {\n                const rangeSelector = this, options = rangeSelector.options, rangeSelectorGroup = rangeSelector.group, inputPosition = options.inputPosition, buttonPosition = options.buttonPosition, yPosition = options.y, buttonPositionY = buttonPosition.y, inputPositionY = inputPosition.y;\n                let rangeSelectorHeight = 0;\n                if (options.height) {\n                    return options.height;\n                }\n                // Align the elements before we read the height in case we're switching\n                // between wrapped and non-wrapped layout\n                this.alignElements();\n                rangeSelectorHeight = rangeSelectorGroup ?\n                    // 13px to keep back compatibility\n                    (rangeSelectorGroup.getBBox(true).height) + 13 +\n                        yPosition :\n                    0;\n                const minPosition = Math.min(inputPositionY, buttonPositionY);\n                if ((inputPositionY < 0 && buttonPositionY < 0) ||\n                    (inputPositionY > 0 && buttonPositionY > 0)) {\n                    rangeSelectorHeight += Math.abs(minPosition);\n                }\n                return rangeSelectorHeight;\n            }\n            /**\n             * Detect collision with title or subtitle\n             *\n             * @private\n             * @function Highcharts.RangeSelector#titleCollision\n             * @return {boolean}\n             * Returns collision status\n             */\n            titleCollision(chart) {\n                return !(chart.options.title.text ||\n                    chart.options.subtitle.text);\n            }\n            /**\n             * Update the range selector with new options\n             *\n             * @private\n             * @function Highcharts.RangeSelector#update\n             * @param {Highcharts.RangeSelectorOptions} options\n             */\n            update(options) {\n                const chart = this.chart;\n                merge(true, chart.options.rangeSelector, options);\n                this.destroy();\n                this.init(chart);\n                this.render();\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#destroy\n             */\n            destroy() {\n                const rSelector = this, minInput = rSelector.minInput, maxInput = rSelector.maxInput;\n                if (rSelector.eventsToUnbind) {\n                    rSelector.eventsToUnbind.forEach((unbind) => unbind());\n                    rSelector.eventsToUnbind = void 0;\n                }\n                // Destroy elements in collections\n                destroyObjectProperties(rSelector.buttons);\n                // Clear input element events\n                if (minInput) {\n                    minInput.onfocus = minInput.onblur = minInput.onchange = null;\n                }\n                if (maxInput) {\n                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;\n                }\n                // Destroy HTML and SVG elements\n                objectEach(rSelector, function (val, key) {\n                    if (val && key !== 'chart') {\n                        if (val instanceof SVGElement) {\n                            // SVGElement\n                            val.destroy();\n                        }\n                        else if (val instanceof window.HTMLElement) {\n                            // HTML element\n                            discardElement(val);\n                        }\n                    }\n                    if (val !== RangeSelector.prototype[key]) {\n                        rSelector[key] = null;\n                    }\n                }, this);\n            }\n        }\n        extend(RangeSelector.prototype, {\n            /**\n             * The default buttons for pre-selecting time frames.\n             * @private\n             */\n            defaultButtons: [{\n                    type: 'month',\n                    count: 1,\n                    text: '1m',\n                    title: 'View 1 month'\n                }, {\n                    type: 'month',\n                    count: 3,\n                    text: '3m',\n                    title: 'View 3 months'\n                }, {\n                    type: 'month',\n                    count: 6,\n                    text: '6m',\n                    title: 'View 6 months'\n                }, {\n                    type: 'ytd',\n                    text: 'YTD',\n                    title: 'View year to date'\n                }, {\n                    type: 'year',\n                    count: 1,\n                    text: '1y',\n                    title: 'View 1 year'\n                }, {\n                    type: 'all',\n                    text: 'All',\n                    title: 'View all'\n                }],\n            /**\n             * The date formats to use when setting min, max and value on date inputs.\n             * @private\n             */\n            inputTypeFormats: {\n                'datetime-local': '%Y-%m-%dT%H:%M:%S',\n                'date': '%Y-%m-%d',\n                'time': '%H:%M:%S'\n            }\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Define the time span for the button\n         *\n         * @typedef {\"all\"|\"day\"|\"hour\"|\"millisecond\"|\"minute\"|\"month\"|\"second\"|\"week\"|\"year\"|\"ytd\"} Highcharts.RangeSelectorButtonTypeValue\n         */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.RangeSelectorClickCallbackFunction\n         *\n         * @param {global.Event} e\n         *        Event arguments.\n         *\n         * @param {boolean|undefined}\n         *        Return false to cancel the default button event.\n         */\n        /**\n         * Callback function to parse values entered in the input boxes and return a\n         * valid JavaScript time as milliseconds since 1970.\n         *\n         * @callback Highcharts.RangeSelectorParseCallbackFunction\n         *\n         * @param {string} value\n         *        Input value to parse.\n         *\n         * @return {number}\n         *         Parsed JavaScript time value.\n         */\n        (''); // keeps doclets above in JS file\n\n        return RangeSelector;\n    });\n    _registerModule(_modules, 'Extensions/StaticScale.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2016-2024 Torstein Honsi, Lars Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, defined, isNumber, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /** @private */\n        function compose(AxisClass, ChartClass) {\n            if (pushUnique(composed, compose)) {\n                const chartProto = ChartClass.prototype;\n                addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                chartProto.adjustHeight = chartAdjustHeight;\n                addEvent(ChartClass, 'render', chartProto.adjustHeight);\n            }\n        }\n        /** @private */\n        function onAxisAfterSetOptions() {\n            const chartOptions = this.chart.options.chart;\n            if (!this.horiz &&\n                isNumber(this.options.staticScale) &&\n                (!chartOptions.height ||\n                    (chartOptions.scrollablePlotArea &&\n                        chartOptions.scrollablePlotArea.minHeight))) {\n                this.staticScale = this.options.staticScale;\n            }\n        }\n        /** @private */\n        function chartAdjustHeight() {\n            const chart = this;\n            if (chart.redrawTrigger !== 'adjustHeight') {\n                for (const axis of (chart.axes || [])) {\n                    const chart = axis.chart, animate = !!chart.initiatedScale &&\n                        chart.options.animation, staticScale = axis.options.staticScale;\n                    if (axis.staticScale && defined(axis.min)) {\n                        let height = pick(axis.brokenAxis && axis.brokenAxis.unitLength, axis.max + axis.tickInterval - axis.min) * staticScale;\n                        // Minimum height is 1 x staticScale.\n                        height = Math.max(height, staticScale);\n                        let diff = height - chart.plotHeight;\n                        if (!chart.scrollablePixelsY && Math.abs(diff) >= 1) {\n                            chart.plotHeight = height;\n                            chart.redrawTrigger = 'adjustHeight';\n                            chart.setSize(void 0, chart.chartHeight + diff, animate);\n                        }\n                        // Make sure clip rects have the right height before initial\n                        // animation.\n                        axis.series.forEach(function (series) {\n                            const clipRect = series.sharedClipKey &&\n                                chart.sharedClips[series.sharedClipKey];\n                            if (clipRect) {\n                                clipRect.attr(chart.inverted ? {\n                                    width: chart.plotHeight\n                                } : {\n                                    height: chart.plotHeight\n                                });\n                            }\n                        });\n                    }\n                }\n                this.initiatedScale = true;\n            }\n            this.redrawTrigger = null;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const StaticScale = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * For vertical axes only. Setting the static scale ensures that each tick unit\n         * is translated into a fixed pixel height. For example, setting the static\n         * scale to 24 results in each Y axis category taking up 24 pixels, and the\n         * height of the chart adjusts. Adding or removing items will make the chart\n         * resize.\n         *\n         * @sample gantt/xrange-series/demo/\n         *         X-range series with static scale\n         *\n         * @type      {number}\n         * @default   50\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption yAxis.staticScale\n         */\n        ''; // keeps doclets above in JS file\n\n        return StaticScale;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangeSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { correctFloat, isNumber, isObject } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The X-range series displays ranges on the X axis, typically time\n         * intervals with a start and end date.\n         *\n         * @sample {highcharts} highcharts/demo/x-range/\n         *         X-range\n         * @sample {highcharts} highcharts/css/x-range/\n         *         Styled mode X-range\n         * @sample {highcharts} highcharts/chart/inverted-xrange/\n         *         Inverted X-range\n         *\n         * @extends      plotOptions.column\n         * @since        6.0.0\n         * @product      highcharts highstock gantt\n         * @excluding    boostThreshold, crisp, cropThreshold, depth, edgeColor,\n         *               edgeWidth, findNearestPointBy, getExtremesFromAll,\n         *               negativeColor, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, softThreshold,\n         *               stacking, threshold, data, dataSorting, boostBlending\n         * @requires     modules/xrange\n         * @optionparent plotOptions.xrange\n         */\n        const XRangeSeriesDefaults = {\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. The partial fill object can be set either on\n             * series or point level.\n             *\n             * @sample {highcharts} highcharts/demo/x-range\n             *         X-range with partial fill\n             *\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill\n             */\n            /**\n             * The fill color to be used for partial fills. Defaults to a darker\n             * shade of the point color.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill.fill\n             */\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. See [completed](series.gantt.data.completed).\n             *\n             * @sample gantt/demo/progress-indicator\n             *         Gantt with progress indicator\n             *\n             * @product   gantt\n             * @apioption plotOptions.gantt.partialFill\n             */\n            /**\n             * In an X-range series, this option makes all points of the same Y-axis\n             * category the same color.\n             */\n            colorByPoint: true,\n            dataLabels: {\n                formatter: function () {\n                    let point = this.point, amount = point.partialFill;\n                    if (isObject(amount)) {\n                        amount = amount.amount;\n                    }\n                    if (isNumber(amount) && amount > 0) {\n                        return correctFloat(amount * 100) + '%';\n                    }\n                },\n                inside: true,\n                verticalAlign: 'middle',\n                style: {\n                    whiteSpace: 'nowrap'\n                }\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size: 0.8em\">{point.x} - {point.x2}</span><br/>',\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.yCategory}</b><br/>'\n            },\n            borderRadius: 3,\n            pointRange: 0\n        };\n        /* *\n         *\n         *  Export Default\n         *\n         * */\n        /* *\n         *\n         * API Options\n         *\n         * */\n        /**\n         * An `xrange` series. If the [type](#series.xrange.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.xrange\n         * @excluding boostThreshold, crisp, cropThreshold, depth, edgeColor, edgeWidth,\n         *            findNearestPointBy, getExtremesFromAll, negativeColor,\n         *            pointInterval, pointIntervalUnit, pointPlacement, pointRange,\n         *            pointStart, softThreshold, stacking, threshold, dataSorting,\n         *            boostBlending\n         * @product   highcharts highstock gantt\n         * @requires  modules/xrange\n         * @apioption series.xrange\n         */\n        /**\n         * An array of data points for the series. For the `xrange` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The objects are point configuration\n         *    objects as seen below.\n         *    ```js\n         *    data: [{\n         *        x: Date.UTC(2017, 0, 1),\n         *        x2: Date.UTC(2017, 0, 3),\n         *        name: \"Test\",\n         *        y: 0,\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: Date.UTC(2017, 0, 4),\n         *        x2: Date.UTC(2017, 0, 5),\n         *        name: \"Deploy\",\n         *        y: 1,\n         *        color: \"#FF0000\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @declare   Highcharts.XrangePointOptionsObject\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data\n         */\n        /**\n         * The starting X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x\n         */\n        /**\n         * The ending X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x2\n         */\n        /**\n         * The Y value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.y\n         */\n        /**\n         * A partial fill for each point, typically used to visualize how much of\n         * a task is performed. The partial fill object can be set either on series\n         * or point level.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range with partial fill\n         *\n         * @declare   Highcharts.XrangePointPartialFillOptionsObject\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill\n         */\n        /**\n         * The amount of the X-range point to be filled. Values can be 0-1 and are\n         * converted to percentages in the default data label formatter.\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.amount\n         */\n        /**\n         * The fill color to be used for partial fills. Defaults to a darker shade\n         * of the point color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.fill\n         */\n        (''); // adds doclets above to transpiled file\n\n        return XRangeSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        const { extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class XRangePoint extends ColumnPoint {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Return color of a point based on its category.\n             *\n             * @private\n             * @function getColorByCategory\n             *\n             * @param {object} series\n             *        The series which the point belongs to.\n             *\n             * @param {object} point\n             *        The point to calculate its color for.\n             *\n             * @return {object}\n             *         Returns an object containing the properties color and colorIndex.\n             */\n            static getColorByCategory(series, point) {\n                const colors = series.options.colors || series.chart.options.colors, colorCount = colors ?\n                    colors.length :\n                    series.chart.options.chart.colorCount, colorIndex = point.y % colorCount, color = colors && colors[colorIndex];\n                return {\n                    colorIndex: colorIndex,\n                    color: color\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            resolveColor() {\n                const series = this.series;\n                if (series.options.colorByPoint && !this.options.color) {\n                    const colorByPoint = XRangePoint.getColorByCategory(series, this);\n                    if (!series.chart.styledMode) {\n                        this.color = colorByPoint.color;\n                    }\n                    if (!this.options.colorIndex) {\n                        this.colorIndex = colorByPoint.colorIndex;\n                    }\n                }\n                else if (!this.color) {\n                    this.color = series.color;\n                }\n            }\n            /**\n             * Extend init to have y default to 0.\n             *\n             * @private\n             */\n            constructor(series, options) {\n                super(series, options);\n                if (!this.y) {\n                    this.y = 0;\n                }\n            }\n            /**\n             * @private\n             */\n            setState() {\n                super.setState.apply(this, arguments);\n                this.series.drawPoint(this, this.series.getAnimationVerb());\n            }\n            /**\n             * Add x2 and yCategory to the available properties for tooltip formats.\n             *\n             * @private\n             */\n            getLabelConfig() {\n                const cfg = super.getLabelConfig.call(this), yCats = this.series.yAxis.categories;\n                cfg.x2 = this.x2;\n                cfg.yCategory = this.yCategory = yCats && yCats[this.y];\n                // Use 'category' as 'key' to ensure tooltip datetime formatting.\n                // Use 'name' only when 'category' is undefined.\n                cfg.key = this.category || this.name;\n                return cfg;\n            }\n            /**\n             * @private\n             */\n            isValid() {\n                return typeof this.x === 'number' &&\n                    typeof this.x2 === 'number';\n            }\n        }\n        extend(XRangePoint.prototype, {\n            ttBelow: false,\n            tooltipDateKeys: ['x', 'x2']\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * The ending X value of the range point.\n         * @name Highcharts.Point#x2\n         * @type {number|undefined}\n         * @requires modules/xrange\n         */\n        /**\n         * Extend applyOptions so that `colorByPoint` for x-range means that one\n         * color is applied per Y axis category.\n         *\n         * @private\n         * @function Highcharts.Point#applyOptions\n         *\n         * @return {Highcharts.Series}\n         */\n        /**\n         * @interface Highcharts.PointOptionsObject in parts/Point.ts\n         */ /**\n        * The ending X value of the range point.\n        * @name Highcharts.PointOptionsObject#x2\n        * @type {number|undefined}\n        * @requires modules/xrange\n        */\n        (''); // keeps doclets above in JS file\n\n        return XRangePoint;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangeSeries.js', [_modules['Core/Globals.js'], _modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Series/XRange/XRangeSeriesDefaults.js'], _modules['Series/XRange/XRangePoint.js']], function (H, Color, SeriesRegistry, U, XRangeSeriesDefaults, XRangePoint) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed, noop } = H;\n        const { parse: color } = Color;\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, clamp, defined, extend, find, isNumber, isObject, merge, pick, pushUnique, relativeLength } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Max x2 should be considered in xAxis extremes\n         * @private\n         */\n        function onAxisAfterGetSeriesExtremes() {\n            let dataMax, modMax;\n            if (this.isXAxis) {\n                dataMax = pick(this.dataMax, -Number.MAX_VALUE);\n                for (const series of this.series) {\n                    if (series.x2Data) {\n                        for (const val of series.x2Data) {\n                            if (val && val > dataMax) {\n                                dataMax = val;\n                                modMax = true;\n                            }\n                        }\n                    }\n                }\n                if (modMax) {\n                    this.dataMax = dataMax;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.xrange\n         *\n         * @augments Highcharts.Series\n         */\n        class XRangeSeries extends ColumnSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                if (pushUnique(composed, this.compose)) {\n                    addEvent(AxisClass, 'afterGetSeriesExtremes', onAxisAfterGetSeriesExtremes);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            init() {\n                super.init.apply(this, arguments);\n                this.options.stacking = void 0; // #13161\n            }\n            /**\n             * Borrow the column series metrics, but with swapped axes. This gives\n             * free access to features like groupPadding, grouping, pointWidth etc.\n             * @private\n             */\n            getColumnMetrics() {\n                const swapAxes = () => {\n                    for (const series of this.chart.series) {\n                        const xAxis = series.xAxis;\n                        series.xAxis = series.yAxis;\n                        series.yAxis = xAxis;\n                    }\n                };\n                swapAxes();\n                const metrics = super.getColumnMetrics();\n                swapAxes();\n                return metrics;\n            }\n            /**\n             * Override cropData to show a point where x or x2 is outside visible range,\n             * but one of them is inside.\n             * @private\n             */\n            cropData(xData, yData, min, max) {\n                // Replace xData with x2Data to find the appropriate cropStart\n                const crop = super.cropData(this.x2Data, yData, min, max);\n                // Re-insert the cropped xData\n                crop.xData = xData.slice(crop.start, crop.end);\n                return crop;\n            }\n            /**\n             * Finds the index of an existing point that matches the given point\n             * options.\n             *\n             * @private\n             *\n             * @param {Highcharts.XRangePointOptions} options\n             *        The options of the point.\n             *\n             * @return {number|undefined}\n             *         Returns index of a matching point, or undefined if no match is\n             *         found.\n             */\n            findPointIndex(options) {\n                const { cropStart, points } = this;\n                const { id } = options;\n                let pointIndex;\n                if (id) {\n                    const point = find(points, (point) => point.id === id);\n                    pointIndex = point ? point.index : void 0;\n                }\n                if (typeof pointIndex === 'undefined') {\n                    const point = find(points, (point) => (point.x === options.x &&\n                        point.x2 === options.x2 &&\n                        !point.touched));\n                    pointIndex = point ? point.index : void 0;\n                }\n                // Reduce pointIndex if data is cropped\n                if (this.cropped &&\n                    isNumber(pointIndex) &&\n                    isNumber(cropStart) &&\n                    pointIndex >= cropStart) {\n                    pointIndex -= cropStart;\n                }\n                return pointIndex;\n            }\n            alignDataLabel(point) {\n                const oldPlotX = point.plotX;\n                point.plotX = pick(point.dlBox && point.dlBox.centerX, point.plotX);\n                if (point.dataLabel && point.shapeArgs?.width) {\n                    point.dataLabel.css({\n                        width: `${point.shapeArgs.width}px`\n                    });\n                }\n                super.alignDataLabel.apply(this, arguments);\n                point.plotX = oldPlotX;\n            }\n            /**\n             * @private\n             */\n            translatePoint(point) {\n                const xAxis = this.xAxis, yAxis = this.yAxis, metrics = this.columnMetrics, options = this.options, minPointLength = options.minPointLength || 0, oldColWidth = (point.shapeArgs && point.shapeArgs.width || 0) / 2, seriesXOffset = this.pointXOffset = metrics.offset, posX = pick(point.x2, point.x + (point.len || 0)), borderRadius = options.borderRadius, plotTop = this.chart.plotTop, plotLeft = this.chart.plotLeft;\n                let plotX = point.plotX, plotX2 = xAxis.translate(posX, 0, 0, 0, 1);\n                const length = Math.abs(plotX2 - plotX), inverted = this.chart.inverted, borderWidth = pick(options.borderWidth, 1), crisper = borderWidth % 2 / 2;\n                let widthDifference, partialFill, yOffset = metrics.offset, pointHeight = Math.round(metrics.width), dlLeft, dlRight, dlWidth, clipRectWidth;\n                if (minPointLength) {\n                    widthDifference = minPointLength - length;\n                    if (widthDifference < 0) {\n                        widthDifference = 0;\n                    }\n                    plotX -= widthDifference / 2;\n                    plotX2 += widthDifference / 2;\n                }\n                plotX = Math.max(plotX, -10);\n                plotX2 = clamp(plotX2, -10, xAxis.len + 10);\n                // Handle individual pointWidth\n                if (defined(point.options.pointWidth)) {\n                    yOffset -= ((Math.ceil(point.options.pointWidth) - pointHeight) / 2);\n                    pointHeight = Math.ceil(point.options.pointWidth);\n                }\n                // Apply pointPlacement to the Y axis\n                if (options.pointPlacement &&\n                    isNumber(point.plotY) &&\n                    yAxis.categories) {\n                    point.plotY = yAxis.translate(point.y, 0, 1, 0, 1, options.pointPlacement);\n                }\n                const x = Math.floor(Math.min(plotX, plotX2)) + crisper, x2 = Math.floor(Math.max(plotX, plotX2)) + crisper, width = x2 - x;\n                const r = Math.min(relativeLength((typeof borderRadius === 'object' ?\n                    borderRadius.radius :\n                    borderRadius || 0), pointHeight), Math.min(width, pointHeight) / 2);\n                const shapeArgs = {\n                    x,\n                    y: Math.floor(point.plotY + yOffset) + crisper,\n                    width,\n                    height: pointHeight,\n                    r\n                };\n                point.shapeArgs = shapeArgs;\n                // Move tooltip to default position\n                if (!inverted) {\n                    point.tooltipPos[0] -= oldColWidth +\n                        seriesXOffset -\n                        shapeArgs.width / 2;\n                }\n                else {\n                    point.tooltipPos[1] += seriesXOffset +\n                        oldColWidth;\n                }\n                // Align data labels inside the shape and inside the plot area\n                dlLeft = shapeArgs.x;\n                dlRight = dlLeft + shapeArgs.width;\n                if (dlLeft < 0 || dlRight > xAxis.len) {\n                    dlLeft = clamp(dlLeft, 0, xAxis.len);\n                    dlRight = clamp(dlRight, 0, xAxis.len);\n                    dlWidth = dlRight - dlLeft;\n                    point.dlBox = merge(shapeArgs, {\n                        x: dlLeft,\n                        width: dlRight - dlLeft,\n                        centerX: dlWidth ? dlWidth / 2 : null\n                    });\n                }\n                else {\n                    point.dlBox = null;\n                }\n                // Tooltip position\n                const tooltipPos = point.tooltipPos;\n                const xIndex = !inverted ? 0 : 1;\n                const yIndex = !inverted ? 1 : 0;\n                const tooltipYOffset = (this.columnMetrics ?\n                    this.columnMetrics.offset :\n                    -metrics.width / 2);\n                // Centering tooltip position (#14147)\n                if (inverted) {\n                    tooltipPos[xIndex] += shapeArgs.width / 2;\n                }\n                else {\n                    tooltipPos[xIndex] = clamp(tooltipPos[xIndex] +\n                        (xAxis.reversed ? -1 : 0) * shapeArgs.width, xAxis.left - plotLeft, xAxis.left + xAxis.len - plotLeft - 1);\n                }\n                tooltipPos[yIndex] = clamp(tooltipPos[yIndex] + ((inverted ? -1 : 1) * tooltipYOffset), yAxis.top - plotTop, yAxis.top + yAxis.len - plotTop - 1);\n                // Add a partShapeArgs to the point, based on the shapeArgs property\n                partialFill = point.partialFill;\n                if (partialFill) {\n                    // Get the partial fill amount\n                    if (isObject(partialFill)) {\n                        partialFill = partialFill.amount;\n                    }\n                    // If it was not a number, assume 0\n                    if (!isNumber(partialFill)) {\n                        partialFill = 0;\n                    }\n                    point.partShapeArgs = merge(shapeArgs);\n                    clipRectWidth = Math.max(Math.round(length * partialFill + point.plotX -\n                        plotX), 0);\n                    point.clipRectArgs = {\n                        x: xAxis.reversed ? // #10717\n                            shapeArgs.x + length - clipRectWidth :\n                            shapeArgs.x,\n                        y: shapeArgs.y,\n                        width: clipRectWidth,\n                        height: shapeArgs.height\n                    };\n                }\n            }\n            /**\n             * @private\n             */\n            translate() {\n                super.translate.apply(this, arguments);\n                for (const point of this.points) {\n                    this.translatePoint(point);\n                }\n            }\n            /**\n             * Draws a single point in the series. Needed for partial fill.\n             *\n             * This override turns point.graphic into a group containing the\n             * original graphic and an overlay displaying the partial fill.\n             *\n             * @private\n             *\n             * @param {Highcharts.Point} point\n             *        An instance of Point in the series.\n             *\n             * @param {\"animate\"|\"attr\"} verb\n             *        'animate' (animates changes) or 'attr' (sets options)\n             */\n            drawPoint(point, verb) {\n                const seriesOpts = this.options, renderer = this.chart.renderer, type = point.shapeType, shapeArgs = point.shapeArgs, partShapeArgs = point.partShapeArgs, clipRectArgs = point.clipRectArgs, pointState = point.state, stateOpts = (seriesOpts.states[pointState || 'normal'] ||\n                    {}), pointStateVerb = typeof pointState === 'undefined' ?\n                    'attr' : verb, pointAttr = this.pointAttribs(point, pointState), animation = pick(this.chart.options.chart.animation, stateOpts.animation);\n                let graphic = point.graphic, pfOptions = point.partialFill;\n                if (!point.isNull && point.visible !== false) {\n                    // Original graphic\n                    if (graphic) { // update\n                        graphic.rect[verb](shapeArgs);\n                    }\n                    else {\n                        point.graphic = graphic = renderer.g('point')\n                            .addClass(point.getClassName())\n                            .add(point.group || this.group);\n                        graphic.rect = renderer[type](merge(shapeArgs))\n                            .addClass(point.getClassName())\n                            .addClass('highcharts-partfill-original')\n                            .add(graphic);\n                    }\n                    // Partial fill graphic\n                    if (partShapeArgs) {\n                        if (graphic.partRect) {\n                            graphic.partRect[verb](merge(partShapeArgs));\n                            graphic.partialClipRect[verb](merge(clipRectArgs));\n                        }\n                        else {\n                            graphic.partialClipRect = renderer.clipRect(clipRectArgs.x, clipRectArgs.y, clipRectArgs.width, clipRectArgs.height);\n                            graphic.partRect =\n                                renderer[type](partShapeArgs)\n                                    .addClass('highcharts-partfill-overlay')\n                                    .add(graphic)\n                                    .clip(graphic.partialClipRect);\n                        }\n                    }\n                    // Presentational\n                    if (!this.chart.styledMode) {\n                        graphic\n                            .rect[verb](pointAttr, animation)\n                            .shadow(seriesOpts.shadow);\n                        if (partShapeArgs) {\n                            // Ensure pfOptions is an object\n                            if (!isObject(pfOptions)) {\n                                pfOptions = {};\n                            }\n                            if (isObject(seriesOpts.partialFill)) {\n                                pfOptions = merge(seriesOpts.partialFill, pfOptions);\n                            }\n                            const fill = (pfOptions.fill ||\n                                color(pointAttr.fill).brighten(-0.3).get() ||\n                                color(point.color || this.color)\n                                    .brighten(-0.3).get());\n                            pointAttr.fill = fill;\n                            graphic\n                                .partRect[pointStateVerb](pointAttr, animation)\n                                .shadow(seriesOpts.shadow);\n                        }\n                    }\n                }\n                else if (graphic) {\n                    point.graphic = graphic.destroy(); // #1269\n                }\n            }\n            /**\n             * @private\n             */\n            drawPoints() {\n                const verb = this.getAnimationVerb();\n                // Draw the columns\n                for (const point of this.points) {\n                    this.drawPoint(point, verb);\n                }\n            }\n            /**\n             * Returns \"animate\", or \"attr\" if the number of points is above the\n             * animation limit.\n             *\n             * @private\n             */\n            getAnimationVerb() {\n                return (this.chart.pointCount < (this.options.animationLimit || 250) ?\n                    'animate' :\n                    'attr');\n            }\n            /**\n             * @private\n             */\n            isPointInside(point) {\n                const shapeArgs = point.shapeArgs, plotX = point.plotX, plotY = point.plotY;\n                if (!shapeArgs) {\n                    return super.isPointInside.apply(this, arguments);\n                }\n                const isInside = typeof plotX !== 'undefined' &&\n                    typeof plotY !== 'undefined' &&\n                    plotY >= 0 &&\n                    plotY <= this.yAxis.len &&\n                    (shapeArgs.x || 0) + (shapeArgs.width || 0) >= 0 &&\n                    plotX <= this.xAxis.len;\n                return isInside;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        XRangeSeries.defaultOptions = merge(ColumnSeries.defaultOptions, XRangeSeriesDefaults);\n        extend(XRangeSeries.prototype, {\n            pointClass: XRangePoint,\n            pointArrayMap: ['x2', 'y'],\n            getExtremesFromAll: true,\n            parallelArrays: ['x', 'x2', 'y'],\n            requireSorting: false,\n            type: 'xrange',\n            animate: SeriesRegistry.series.prototype.animate,\n            autoIncrement: noop,\n            buildKDTree: noop\n        });\n        SeriesRegistry.registerSeriesType('xrange', XRangeSeries);\n        /* *\n         *\n         * Default Export\n         *\n         * */\n\n        return XRangeSeries;\n    });\n    _registerModule(_modules, 'Series/Gantt/GanttPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { xrange: { prototype: { pointClass: XRangePoint } } } = SeriesRegistry.seriesTypes;\n        const { pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class GanttPoint extends XRangePoint {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static setGanttPointAliases(options) {\n                /**\n                 * Add a value to options if the value exists.\n                 * @private\n                 */\n                function addIfExists(prop, val) {\n                    if (typeof val !== 'undefined') {\n                        options[prop] = val;\n                    }\n                }\n                addIfExists('x', pick(options.start, options.x));\n                addIfExists('x2', pick(options.end, options.x2));\n                addIfExists('partialFill', pick(options.completed, options.partialFill));\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies the options containing the x and y data and possible some\n             * extra properties. This is called on point init or from point.update.\n             *\n             * @private\n             * @function Highcharts.Point#applyOptions\n             *\n             * @param {Object} options\n             *        The point options\n             *\n             * @param {number} x\n             *        The x value\n             *\n             * @return {Highcharts.Point}\n             *         The Point instance\n             */\n            applyOptions(options, x) {\n                const ganttPoint = super.applyOptions(options, x);\n                GanttPoint.setGanttPointAliases(ganttPoint);\n                return ganttPoint;\n            }\n            isValid() {\n                return ((typeof this.start === 'number' ||\n                    typeof this.x === 'number') &&\n                    (typeof this.end === 'number' ||\n                        typeof this.x2 === 'number' ||\n                        this.milestone));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttPoint;\n    });\n    _registerModule(_modules, 'Series/Gantt/GanttSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `gantt` series. If the [type](#series.gantt.type) option is not specified,\n         * it is inherited from [chart.type](#chart.type).\n         *\n         * @extends      plotOptions.xrange\n         * @product      gantt\n         * @requires     highcharts-gantt\n         * @optionparent plotOptions.gantt\n         */\n        const GanttSeriesDefaults = {\n            // options - default options merged with parent\n            grouping: false,\n            dataLabels: {\n                enabled: true\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size: 0.8em\">{series.name}</span><br/>',\n                pointFormat: null,\n                pointFormatter: function () {\n                    const point = this, series = point.series, xAxis = series.xAxis, formats = series.tooltipOptions.dateTimeLabelFormats, startOfWeek = xAxis.options.startOfWeek, ttOptions = series.tooltipOptions, milestone = point.options.milestone;\n                    let format = ttOptions.xDateFormat, retVal = '<b>' + (point.name || point.yCategory) + '</b>';\n                    if (ttOptions.pointFormat) {\n                        return point.tooltipFormatter(ttOptions.pointFormat);\n                    }\n                    if (!format && isNumber(point.start)) {\n                        format = series.chart.time.getDateFormat(xAxis.closestPointRange, point.start, startOfWeek, formats || {});\n                    }\n                    const start = series.chart.time.dateFormat(format, point.start), end = series.chart.time.dateFormat(format, point.end);\n                    retVal += '<br/>';\n                    if (!milestone) {\n                        retVal += 'Start: ' + start + '<br/>';\n                        retVal += 'End: ' + end + '<br/>';\n                    }\n                    else {\n                        retVal += start + '<br/>';\n                    }\n                    return retVal;\n                }\n            },\n            connectors: {\n                type: 'simpleConnect',\n                /**\n                 * @declare Highcharts.ConnectorsAnimationOptionsObject\n                 */\n                animation: {\n                    reversed: true // Dependencies go from child to parent\n                },\n                radius: 0,\n                startMarker: {\n                    enabled: true,\n                    symbol: 'arrow-filled',\n                    radius: 4,\n                    fill: '#fa0',\n                    align: 'left'\n                },\n                endMarker: {\n                    enabled: false,\n                    align: 'right'\n                }\n            }\n        };\n        /**\n         * A `gantt` series.\n         *\n         * @extends   series,plotOptions.gantt\n         * @excluding boostThreshold, dashStyle, findNearestPointBy,\n         *            getExtremesFromAll, marker, negativeColor, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointStart\n         * @product   gantt\n         * @requires  highcharts-gantt\n         * @apioption series.gantt\n         */\n        /**\n         * Data for a Gantt series.\n         *\n         * @declare   Highcharts.GanttPointOptionsObject\n         * @type      {Array<*>}\n         * @extends   series.xrange.data\n         * @excluding className, connect, dataLabels, events,\n         *            partialFill, selected, x, x2\n         * @product   gantt\n         * @apioption series.gantt.data\n         */\n        /**\n         * Whether the grid node belonging to this point should start as collapsed. Used\n         * in axes of type treegrid.\n         *\n         * @sample {gantt} gantt/treegrid-axis/collapsed/\n         *         Start as collapsed\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   gantt\n         * @apioption series.gantt.data.collapsed\n         */\n        /**\n         * The start time of a task.\n         *\n         * @type      {number}\n         * @product   gantt\n         * @apioption series.gantt.data.start\n         */\n        /**\n         * The end time of a task.\n         *\n         * @type      {number}\n         * @product   gantt\n         * @apioption series.gantt.data.end\n         */\n        /**\n         * The Y value of a task.\n         *\n         * @type      {number}\n         * @product   gantt\n         * @apioption series.gantt.data.y\n         */\n        /**\n         * The name of a task. If a `treegrid` y-axis is used (default in Gantt charts),\n         * this will be picked up automatically, and used to calculate the y-value.\n         *\n         * @type      {string}\n         * @product   gantt\n         * @apioption series.gantt.data.name\n         */\n        /**\n         * Progress indicator, how much of the task completed. If it is a number, the\n         * `fill` will be applied automatically.\n         *\n         * @sample {gantt} gantt/demo/progress-indicator\n         *         Progress indicator\n         *\n         * @type      {number|*}\n         * @extends   series.xrange.data.partialFill\n         * @product   gantt\n         * @apioption series.gantt.data.completed\n         */\n        /**\n         * The amount of the progress indicator, ranging from 0 (not started) to 1\n         * (finished).\n         *\n         * @type      {number}\n         * @default   0\n         * @apioption series.gantt.data.completed.amount\n         */\n        /**\n         * The fill of the progress indicator. Defaults to a darkened variety of the\n         * main color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption series.gantt.data.completed.fill\n         */\n        /**\n         * The ID of the point (task) that this point depends on in Gantt charts.\n         * Aliases [connect](series.xrange.data.connect). Can also be an object,\n         * specifying further connecting [options](series.gantt.connectors) between the\n         * points. Multiple connections can be specified by providing an array.\n         *\n         * @sample gantt/demo/project-management\n         *         Dependencies\n         * @sample gantt/pathfinder/demo\n         *         Different connection types\n         *\n         * @type      {string|Array<string|*>|*}\n         * @extends   series.xrange.data.connect\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.gantt.data.dependency\n         */\n        /**\n         * Whether this point is a milestone. If so, only the `start` option is handled,\n         * while `end` is ignored.\n         *\n         * @sample gantt/gantt/milestones\n         *         Milestones\n         *\n         * @type      {boolean}\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.gantt.data.milestone\n         */\n        /**\n         * The ID of the parent point (task) of this point in Gantt charts.\n         *\n         * @sample gantt/demo/subtasks\n         *         Gantt chart with subtasks\n         *\n         * @type      {string}\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.gantt.data.parent\n         */\n        /**\n         * @excluding afterAnimate\n         * @apioption series.gantt.events\n         */\n        ''; // detachs doclets above\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttSeriesDefaults;\n    });\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Globals.js'], _modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (H, StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, find, fireEvent, isArray, isNumber, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (pushUnique(composed, compose)) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                const axis = this;\n                if (axis.brokenAxis?.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                const axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis?.hasBreaks) {\n                    const tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (let i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                const { isDirty, options: { connectNulls }, points, xAxis, yAxis } = this;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    let i = points.length;\n                    while (i--) {\n                        const point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        const nullGap = point.y === null && connectNulls === false;\n                        const isPointInBreak = (!nullGap && (xAxis?.brokenAxis?.isInAnyBreak(point.x, true) ||\n                            yAxis?.brokenAxis?.isInAnyBreak(point.y, true)));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                const series = this, points = series.points;\n                let breaks, threshold, y;\n                if (axis?.brokenAxis?.hasBreaks) {\n                    const brokenAxis = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis?.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        const breaksOutOfRange = axis?.options?.breaks?.filter(function (brk) {\n                            let isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (let i = 0; i < breaks.length; i++) {\n                                const otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    let eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point, brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange?.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point, brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                const currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping?.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                let gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // extension for ordinal breaks\n                    let current, next;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            const xRange = (current.x + next.x) / 2;\n                            points.splice(// insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                static isInBreak(brk, val) {\n                    const repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    let ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                }\n                /**\n                 * @private\n                 */\n                static lin2Val(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                }\n                /**\n                 * @private\n                 */\n                static val2Lin(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                }\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                findBreakAt(x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                }\n                /**\n                 * @private\n                 */\n                isInAnyBreak(val, testKeep) {\n                    const brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    let i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                }\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than usin Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                setBreaks(breaks, redraw) {\n                    const brokenAxis = this;\n                    const axis = brokenAxis.axis;\n                    const hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = (this.options.breaks || []);\n                                let axisBreak;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT = [], breakArray = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                let length = 0, inBrk, repeat, min = axis.userMin || axis.min, max = axis.userMax || axis.max, start, i;\n                                // Min & max check (#4247)\n                                breaks.forEach(function (brk) {\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        if (Additions.isInBreak(brk, min)) {\n                                            min += ((brk.to % repeat) -\n                                                (min % repeat));\n                                        }\n                                        if (Additions.isInBreak(brk, max)) {\n                                            max -= ((max % repeat) -\n                                                (brk.from % repeat));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks.forEach(function (brk) {\n                                    start = brk.from;\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        while (start - repeat > min) {\n                                            start -= repeat;\n                                        }\n                                        while (start < min) {\n                                            start += repeat;\n                                        }\n                                        for (i = start; i < max; i += repeat) {\n                                            breakArrayT.push({\n                                                value: i,\n                                                move: 'in'\n                                            });\n                                            breakArrayT.push({\n                                                value: i + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk = 0;\n                                start = min;\n                                breakArrayT.forEach(function (brk) {\n                                    inBrk += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk === 1 && brk.move === 'in') {\n                                        start = brk.value;\n                                    }\n                                    if (inBrk === 0 && isNumber(start)) {\n                                        breakArray.push({\n                                            from: start,\n                                            to: brk.value,\n                                            len: brk.value - start - (brk.size || 0)\n                                        });\n                                        length += (brk.value -\n                                            start -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are substracted.\n                                if (isNumber(min) &&\n                                    isNumber(max) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max - min - length +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min;\n                                    axis.max = max;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                }\n            }\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'Core/Axis/GridAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Axis, H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed, dateFormats } = H;\n        const { addEvent, defined, erase, find, isArray, isNumber, merge, pick, pushUnique, timeUnits, wrap } = U;\n        /* *\n         *\n         *  Enums\n         *\n         * */\n        /**\n         * Enum for which side the axis is on. Maps to axis.side.\n         * @private\n         */\n        var GridAxisSide;\n        (function (GridAxisSide) {\n            GridAxisSide[GridAxisSide[\"top\"] = 0] = \"top\";\n            GridAxisSide[GridAxisSide[\"right\"] = 1] = \"right\";\n            GridAxisSide[GridAxisSide[\"bottom\"] = 2] = \"bottom\";\n            GridAxisSide[GridAxisSide[\"left\"] = 3] = \"left\";\n        })(GridAxisSide || (GridAxisSide = {}));\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function argsToArray(args) {\n            return Array.prototype.slice.call(args, 1);\n        }\n        /**\n         * @private\n         */\n        function isObject(x) {\n            // Always use strict mode\n            return U.isObject(x, true);\n        }\n        /**\n         * @private\n         */\n        function applyGridOptions(axis) {\n            const options = axis.options;\n            // Center-align by default\n            /*\n            if (!options.labels) {\n                options.labels = {};\n            }\n            */\n            options.labels.align = pick(options.labels.align, 'center');\n            // @todo: Check against tickLabelPlacement between/on etc\n            /* Prevents adding the last tick label if the axis is not a category\n               axis.\n               Since numeric labels are normally placed at starts and ends of a\n               range of value, and this module makes the label point at the value,\n               an \"extra\" label would appear. */\n            if (!axis.categories) {\n                options.showLastLabel = false;\n            }\n            // Prevents rotation of labels when squished, as rotating them would not\n            // help.\n            axis.labelRotation = 0;\n            options.labels.rotation = 0;\n            // Allow putting ticks closer than their data points.\n            options.minTickInterval = 1;\n        }\n        /**\n         * Extends axis class with grid support.\n         * @private\n         */\n        function compose(AxisClass, ChartClass, TickClass) {\n            if (pushUnique(composed, compose)) {\n                AxisClass.keepProps.push('grid');\n                AxisClass.prototype.getMaxLabelDimensions = getMaxLabelDimensions;\n                wrap(AxisClass.prototype, 'unsquish', wrapUnsquish);\n                wrap(AxisClass.prototype, 'getOffset', wrapGetOffset);\n                // Add event handlers\n                addEvent(AxisClass, 'init', onInit);\n                addEvent(AxisClass, 'afterGetTitlePosition', onAfterGetTitlePosition);\n                addEvent(AxisClass, 'afterInit', onAfterInit);\n                addEvent(AxisClass, 'afterRender', onAfterRender);\n                addEvent(AxisClass, 'afterSetAxisTranslation', onAfterSetAxisTranslation);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions2);\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                addEvent(AxisClass, 'afterTickSize', onAfterTickSize);\n                addEvent(AxisClass, 'trimTicks', onTrimTicks);\n                addEvent(AxisClass, 'destroy', onDestroy);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                addEvent(TickClass, 'labelFormat', onTickLabelFormat);\n            }\n            return AxisClass;\n        }\n        /**\n         * Get the largest label width and height.\n         *\n         * @private\n         * @function Highcharts.Axis#getMaxLabelDimensions\n         *\n         * @param {Highcharts.Dictionary<Highcharts.Tick>} ticks\n         * All the ticks on one axis.\n         *\n         * @param {Array<number|string>} tickPositions\n         * All the tick positions on one axis.\n         *\n         * @return {Highcharts.SizeObject}\n         * Object containing the properties height and width.\n         *\n         * @todo Move this to the generic axis implementation, as it is used there.\n         */\n        function getMaxLabelDimensions(ticks, tickPositions) {\n            const dimensions = {\n                width: 0,\n                height: 0\n            };\n            tickPositions.forEach(function (pos) {\n                const tick = ticks[pos];\n                let labelHeight = 0, labelWidth = 0, label;\n                if (isObject(tick)) {\n                    label = isObject(tick.label) ? tick.label : {};\n                    // Find width and height of label\n                    labelHeight = label.getBBox ? label.getBBox().height : 0;\n                    if (label.textStr && !isNumber(label.textPxLength)) {\n                        label.textPxLength = label.getBBox().width;\n                    }\n                    labelWidth = isNumber(label.textPxLength) ?\n                        // Math.round ensures crisp lines\n                        Math.round(label.textPxLength) :\n                        0;\n                    if (label.textStr) {\n                        // Set the tickWidth same as the label width after ellipsis\n                        // applied #10281\n                        labelWidth = Math.round(label.getBBox().width);\n                    }\n                    // Update the result if width and/or height are larger\n                    dimensions.height = Math.max(labelHeight, dimensions.height);\n                    dimensions.width = Math.max(labelWidth, dimensions.width);\n                }\n            });\n            // For tree grid, add indentation\n            if (this.options.type === 'treegrid' &&\n                this.treeGrid &&\n                this.treeGrid.mapOfPosToGridNode) {\n                const treeDepth = this.treeGrid.mapOfPosToGridNode[-1].height || 0;\n                dimensions.width += (this.options.labels.indentation *\n                    (treeDepth - 1));\n            }\n            return dimensions;\n        }\n        /**\n         * Handle columns and getOffset.\n         * @private\n         */\n        function wrapGetOffset(proceed) {\n            const { grid } = this, \n            // On the left side we handle the columns first because the offset is\n            // calculated from the plot area and out\n            columnsFirst = this.side === 3;\n            if (!columnsFirst) {\n                proceed.apply(this);\n            }\n            if (!grid?.isColumn) {\n                let columns = grid?.columns || [];\n                if (columnsFirst) {\n                    columns = columns.slice().reverse();\n                }\n                columns\n                    .forEach((column) => {\n                    column.getOffset();\n                });\n            }\n            if (columnsFirst) {\n                proceed.apply(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterGetTitlePosition(e) {\n            const axis = this;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                // compute anchor points for each of the title align options\n                const { axisTitle, height: axisHeight, horiz, left: axisLeft, offset, opposite, options, top: axisTop, width: axisWidth } = axis;\n                const tickSize = axis.tickSize();\n                const titleWidth = axisTitle && axisTitle.getBBox().width;\n                const xOption = options.title.x;\n                const yOption = options.title.y;\n                const titleMargin = pick(options.title.margin, horiz ? 5 : 10);\n                const titleFontSize = axisTitle ? axis.chart.renderer.fontMetrics(axisTitle).f : 0;\n                const crispCorr = tickSize ? tickSize[0] / 2 : 0;\n                // TODO account for alignment\n                // the position in the perpendicular direction of the axis\n                const offAxis = ((horiz ? axisTop + axisHeight : axisLeft) +\n                    (horiz ? 1 : -1) * // horizontal axis reverses the margin\n                        (opposite ? -1 : 1) * // so does opposite axes\n                        crispCorr +\n                    (axis.side === GridAxisSide.bottom ? titleFontSize : 0));\n                e.titlePosition.x = horiz ?\n                    axisLeft - (titleWidth || 0) / 2 - titleMargin + xOption :\n                    offAxis + (opposite ? axisWidth : 0) + offset + xOption;\n                e.titlePosition.y = horiz ?\n                    (offAxis -\n                        (opposite ? axisHeight : 0) +\n                        (opposite ? titleFontSize : -titleFontSize) / 2 +\n                        offset +\n                        yOption) :\n                    axisTop - titleMargin + yOption;\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterInit() {\n            const axis = this;\n            const { chart, options: { grid: gridOptions = {} }, userOptions } = axis;\n            if (gridOptions.enabled) {\n                applyGridOptions(axis);\n            }\n            if (gridOptions.columns) {\n                const columns = axis.grid.columns = [];\n                let columnIndex = axis.grid.columnIndex = 0;\n                // Handle columns, each column is a grid axis\n                while (++columnIndex < gridOptions.columns.length) {\n                    const columnOptions = merge(userOptions, gridOptions.columns[columnIndex], {\n                        isInternal: true,\n                        linkedTo: 0,\n                        // Disable by default the scrollbar on the grid axis\n                        scrollbar: {\n                            enabled: false\n                        }\n                    }, \n                    // Avoid recursion\n                    {\n                        grid: {\n                            columns: void 0\n                        }\n                    });\n                    const column = new Axis(axis.chart, columnOptions, 'yAxis');\n                    column.grid.isColumn = true;\n                    column.grid.columnIndex = columnIndex;\n                    // Remove column axis from chart axes array, and place it\n                    // in the columns array.\n                    erase(chart.axes, column);\n                    erase(chart[axis.coll] || [], column);\n                    columns.push(column);\n                }\n            }\n        }\n        /**\n         * Draw an extra line on the far side of the outermost axis,\n         * creating floor/roof/wall of a grid. And some padding.\n         * ```\n         * Make this:\n         *             (axis.min) __________________________ (axis.max)\n         *                           |    |    |    |    |\n         * Into this:\n         *             (axis.min) __________________________ (axis.max)\n         *                        ___|____|____|____|____|__\n         * ```\n         * @private\n         */\n        function onAfterRender() {\n            const axis = this, { axisTitle, grid, options } = axis, gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                const min = axis.min || 0, max = axis.max || 0, firstTick = axis.ticks[axis.tickPositions[0]];\n                // Adjust the title max width to the column width (#19657)\n                if (axisTitle &&\n                    !axis.chart.styledMode &&\n                    firstTick?.slotWidth &&\n                    !axis.options.title.style.width) {\n                    axisTitle.css({ width: `${firstTick.slotWidth}px` });\n                }\n                // @todo acutual label padding (top, bottom, left, right)\n                axis.maxLabelDimensions = axis.getMaxLabelDimensions(axis.ticks, axis.tickPositions);\n                // Remove right wall before rendering if updating\n                if (axis.rightWall) {\n                    axis.rightWall.destroy();\n                }\n                /*\n                Draw an extra axis line on outer axes\n                            >\n                Make this:    |______|______|______|___\n\n                            > _________________________\n                Into this:    |______|______|______|__|\n                                                        */\n                if (axis.grid && axis.grid.isOuterAxis() && axis.axisLine) {\n                    const lineWidth = options.lineWidth;\n                    if (lineWidth) {\n                        const linePath = axis.getLinePath(lineWidth), startPoint = linePath[0], endPoint = linePath[1], \n                        // Negate distance if top or left axis\n                        // Subtract 1px to draw the line at the end of the tick\n                        tickLength = (axis.tickSize('tick') || [1])[0], distance = (tickLength - 1) * ((axis.side === GridAxisSide.top ||\n                            axis.side === GridAxisSide.left) ? -1 : 1);\n                        // If axis is horizontal, reposition line path vertically\n                        if (startPoint[0] === 'M' && endPoint[0] === 'L') {\n                            if (axis.horiz) {\n                                startPoint[2] += distance;\n                                endPoint[2] += distance;\n                            }\n                            else {\n                                startPoint[1] += distance;\n                                endPoint[1] += distance;\n                            }\n                        }\n                        // If it doesn't exist, add an upper and lower border\n                        // for the vertical grid axis.\n                        if (!axis.horiz && axis.chart.marginRight) {\n                            const upperBorderStartPoint = startPoint, upperBorderEndPoint = [\n                                'L',\n                                axis.left,\n                                startPoint[2] || 0\n                            ], upperBorderPath = [\n                                upperBorderStartPoint,\n                                upperBorderEndPoint\n                            ], lowerBorderEndPoint = [\n                                'L',\n                                axis.chart.chartWidth - axis.chart.marginRight,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderStartPoint = [\n                                'M',\n                                endPoint[1] || 0,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderPath = [\n                                lowerBorderStartPoint,\n                                lowerBorderEndPoint\n                            ];\n                            if (!axis.grid.upperBorder && min % 1 !== 0) {\n                                axis.grid.upperBorder = axis.grid.renderBorder(upperBorderPath);\n                            }\n                            if (axis.grid.upperBorder) {\n                                axis.grid.upperBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.upperBorder.animate({\n                                    d: upperBorderPath\n                                });\n                            }\n                            if (!axis.grid.lowerBorder && max % 1 !== 0) {\n                                axis.grid.lowerBorder = axis.grid.renderBorder(lowerBorderPath);\n                            }\n                            if (axis.grid.lowerBorder) {\n                                axis.grid.lowerBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.lowerBorder.animate({\n                                    d: lowerBorderPath\n                                });\n                            }\n                        }\n                        // Render an extra line parallel to the existing axes, to\n                        // close the grid.\n                        if (!axis.grid.axisLineExtra) {\n                            axis.grid.axisLineExtra = axis.grid.renderBorder(linePath);\n                        }\n                        else {\n                            axis.grid.axisLineExtra.attr({\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth\n                            });\n                            axis.grid.axisLineExtra.animate({\n                                d: linePath\n                            });\n                        }\n                        // show or hide the line depending on options.showEmpty\n                        axis.axisLine[axis.showAxis ? 'show' : 'hide']();\n                    }\n                }\n                (grid && grid.columns || []).forEach((column) => column.render());\n                // Manipulate the tick mark visibility\n                // based on the axis.max- allows smooth scrolling.\n                if (!axis.horiz &&\n                    axis.chart.hasRendered &&\n                    (axis.scrollbar ||\n                        (axis.linkedParent && axis.linkedParent.scrollbar)) &&\n                    axis.tickPositions.length) {\n                    const tickmarkOffset = axis.tickmarkOffset, lastTick = axis.tickPositions[axis.tickPositions.length - 1], firstTick = axis.tickPositions[0];\n                    let label, tickMark;\n                    while ((label = axis.hiddenLabels.pop()) && label.element) {\n                        label.show(); // #15453\n                    }\n                    while ((tickMark = axis.hiddenMarks.pop()) &&\n                        tickMark.element) {\n                        tickMark.show(); // #16439\n                    }\n                    // Hide/show first tick label.\n                    label = axis.ticks[firstTick].label;\n                    if (label) {\n                        if (min - firstTick > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    // Hide/show last tick mark/label.\n                    label = axis.ticks[lastTick].label;\n                    if (label) {\n                        if (lastTick - max > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    const mark = axis.ticks[lastTick].mark;\n                    if (mark &&\n                        lastTick - max < tickmarkOffset &&\n                        lastTick - max > 0 && axis.ticks[lastTick].isLast) {\n                        axis.hiddenMarks.push(mark.hide());\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetAxisTranslation() {\n            const axis = this;\n            const tickInfo = axis.tickPositions && axis.tickPositions.info;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            const userLabels = axis.userOptions.labels || {};\n            // Fire this only for the Gantt type chart, #14868.\n            if (gridOptions.enabled) {\n                if (axis.horiz) {\n                    axis.series.forEach((series) => {\n                        series.options.pointRange = 0;\n                    });\n                    // Lower level time ticks, like hours or minutes, represent\n                    // points in time and not ranges. These should be aligned\n                    // left in the grid cell by default. The same applies to\n                    // years of higher order.\n                    if (tickInfo &&\n                        options.dateTimeLabelFormats &&\n                        options.labels &&\n                        !defined(userLabels.align) &&\n                        (options.dateTimeLabelFormats[tickInfo.unitName]\n                            .range === false ||\n                            tickInfo.count > 1 // years\n                        )) {\n                        options.labels.align = 'left';\n                        if (!defined(userLabels.x)) {\n                            options.labels.x = 3;\n                        }\n                    }\n                }\n                else {\n                    // Don't trim ticks which not in min/max range but\n                    // they are still in the min/max plus tickInterval.\n                    if (this.options.type !== 'treegrid' &&\n                        axis.grid &&\n                        axis.grid.columns) {\n                        this.minPointOffset = this.tickInterval;\n                    }\n                }\n            }\n        }\n        /**\n         * Creates a left and right wall on horizontal axes:\n         * - Places leftmost tick at the start of the axis, to create a left\n         *   wall\n         * - Ensures that the rightmost tick is at the end of the axis, to\n         *   create a right wall.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = this.options, userOptions = e.userOptions, gridOptions = ((options && isObject(options.grid)) ? options.grid : {});\n            let gridAxisOptions;\n            if (gridOptions.enabled === true) {\n                // Merge the user options into default grid axis options so\n                // that when a user option is set, it takes presedence.\n                gridAxisOptions = merge(true, {\n                    className: ('highcharts-grid-axis ' + (userOptions.className || '')),\n                    dateTimeLabelFormats: {\n                        hour: {\n                            list: ['%H:%M', '%H']\n                        },\n                        day: {\n                            list: ['%A, %e. %B', '%a, %e. %b', '%E']\n                        },\n                        week: {\n                            list: ['Week %W', 'W%W']\n                        },\n                        month: {\n                            list: ['%B', '%b', '%o']\n                        }\n                    },\n                    grid: {\n                        borderWidth: 1\n                    },\n                    labels: {\n                        padding: 2,\n                        style: {\n                            fontSize: '0.9em'\n                        }\n                    },\n                    margin: 0,\n                    title: {\n                        text: null,\n                        reserveSpace: false,\n                        rotation: 0,\n                        style: {\n                            textOverflow: 'ellipsis'\n                        }\n                    },\n                    // In a grid axis, only allow one unit of certain types,\n                    // for example we shouln't have one grid cell spanning\n                    // two days.\n                    units: [[\n                            'millisecond',\n                            [1, 10, 100]\n                        ], [\n                            'second',\n                            [1, 10]\n                        ], [\n                            'minute',\n                            [1, 5, 15]\n                        ], [\n                            'hour',\n                            [1, 6]\n                        ], [\n                            'day',\n                            [1]\n                        ], [\n                            'week',\n                            [1]\n                        ], [\n                            'month',\n                            [1]\n                        ], [\n                            'year',\n                            null\n                        ]]\n                }, userOptions);\n                // X-axis specific options\n                if (this.coll === 'xAxis') {\n                    // For linked axes, tickPixelInterval is used only if\n                    // the tickPositioner below doesn't run or returns\n                    // undefined (like multiple years)\n                    if (defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPixelInterval)) {\n                        gridAxisOptions.tickPixelInterval = 350;\n                    }\n                    // For the secondary grid axis, use the primary axis'\n                    // tick intervals and return ticks one level higher.\n                    if (\n                    // Check for tick pixel interval in options\n                    !defined(userOptions.tickPixelInterval) &&\n                        // Only for linked axes\n                        defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPositioner) &&\n                        !defined(userOptions.tickInterval) &&\n                        !defined(userOptions.units)) {\n                        gridAxisOptions.tickPositioner = function (min, max) {\n                            const parentInfo = (this.linkedParent &&\n                                this.linkedParent.tickPositions &&\n                                this.linkedParent.tickPositions.info);\n                            if (parentInfo) {\n                                const units = (gridAxisOptions.units || []);\n                                let unitIdx, count = 1, unitName = 'year';\n                                for (let i = 0; i < units.length; i++) {\n                                    const unit = units[i];\n                                    if (unit && unit[0] === parentInfo.unitName) {\n                                        unitIdx = i;\n                                        break;\n                                    }\n                                }\n                                // Get the first allowed count on the next unit.\n                                const unit = (isNumber(unitIdx) && units[unitIdx + 1]);\n                                if (unit) {\n                                    unitName = unit[0] || 'year';\n                                    const counts = unit[1];\n                                    count = counts && counts[0] || 1;\n                                    // In case the base X axis shows years, make the\n                                    // secondary axis show ten times the years (#11427)\n                                }\n                                else if (parentInfo.unitName === 'year') {\n                                    // unitName is 'year'\n                                    count = parentInfo.count * 10;\n                                }\n                                const unitRange = timeUnits[unitName];\n                                this.tickInterval = unitRange * count;\n                                return this.chart.time.getTimeTicks({ unitRange, count, unitName }, min, max, this.options.startOfWeek);\n                            }\n                        };\n                    }\n                }\n                // Now merge the combined options into the axis options\n                merge(true, this.options, gridAxisOptions);\n                if (this.horiz) {\n                    /*               _________________________\n                    Make this:    ___|_____|_____|_____|__|\n                                    ^                     ^\n                                    _________________________\n                    Into this:    |_____|_____|_____|_____|\n                                        ^                 ^    */\n                    options.minPadding = pick(userOptions.minPadding, 0);\n                    options.maxPadding = pick(userOptions.maxPadding, 0);\n                }\n                // If borderWidth is set, then use its value for tick and\n                // line width.\n                if (isNumber(options.grid.borderWidth)) {\n                    options.tickWidth = options.lineWidth =\n                        gridOptions.borderWidth;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetOptions2(e) {\n            const axis = this;\n            const userOptions = e.userOptions;\n            const gridOptions = userOptions && userOptions.grid || {};\n            const columns = gridOptions.columns;\n            // Add column options to the parent axis. Children has their column options\n            // set on init in onGridAxisAfterInit.\n            if (gridOptions.enabled && columns) {\n                merge(true, axis.options, columns[0]);\n            }\n        }\n        /**\n         * Handle columns and setScale.\n         * @private\n         */\n        function onAfterSetScale() {\n            const axis = this;\n            (axis.grid.columns || []).forEach((column) => column.setScale());\n        }\n        /**\n         * Draw vertical axis ticks extra long to create cell floors and roofs.\n         * Overrides the tickLength for vertical axes.\n         * @private\n         */\n        function onAfterTickSize(e) {\n            const { horiz, maxLabelDimensions, options: { grid: gridOptions = {} } } = this;\n            if (gridOptions.enabled && maxLabelDimensions) {\n                const labelPadding = this.options.labels.distance * 2;\n                const distance = horiz ?\n                    (gridOptions.cellHeight ||\n                        labelPadding + maxLabelDimensions.height) :\n                    labelPadding + maxLabelDimensions.width;\n                if (isArray(e.tickSize)) {\n                    e.tickSize[0] = distance;\n                }\n                else {\n                    e.tickSize = [distance, 0];\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            this.axes.forEach((axis) => {\n                (axis.grid && axis.grid.columns || []).forEach((column) => {\n                    column.setAxisSize();\n                    column.setAxisTranslation();\n                });\n            });\n        }\n        /**\n         * @private\n         */\n        function onDestroy(e) {\n            const { grid } = this;\n            (grid.columns || []).forEach((column) => column.destroy(e.keepEvents));\n            grid.columns = void 0;\n        }\n        /**\n         * Wraps axis init to draw cell walls on vertical axes.\n         * @private\n         */\n        function onInit(e) {\n            const axis = this;\n            const userOptions = e.userOptions || {};\n            const gridOptions = userOptions.grid || {};\n            if (gridOptions.enabled && defined(gridOptions.borderColor)) {\n                userOptions.tickColor = userOptions.lineColor = (gridOptions.borderColor);\n            }\n            if (!axis.grid) {\n                axis.grid = new GridAxisAdditions(axis);\n            }\n            axis.hiddenLabels = [];\n            axis.hiddenMarks = [];\n        }\n        /**\n         * Center tick labels in cells.\n         * @private\n         */\n        function onTickAfterGetLabelPosition(e) {\n            const tick = this, label = tick.label, axis = tick.axis, reversed = axis.reversed, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, labelOpts = axis.options.labels, align = labelOpts.align, \n            // verticalAlign is currently not supported for axis.labels.\n            verticalAlign = 'middle', // labelOpts.verticalAlign,\n            side = GridAxisSide[axis.side], tickmarkOffset = e.tickmarkOffset, tickPositions = axis.tickPositions, tickPos = tick.pos - tickmarkOffset, nextTickPos = (isNumber(tickPositions[e.index + 1]) ?\n                tickPositions[e.index + 1] - tickmarkOffset :\n                (axis.max || 0) + tickmarkOffset), tickSize = axis.tickSize('tick'), tickWidth = tickSize ? tickSize[0] : 0, crispCorr = tickSize ? tickSize[1] / 2 : 0;\n            // Only center tick labels in grid axes\n            if (gridOptions.enabled === true) {\n                let bottom, top, left, right;\n                // Calculate top and bottom positions of the cell.\n                if (side === 'top') {\n                    bottom = axis.top + axis.offset;\n                    top = bottom - tickWidth;\n                }\n                else if (side === 'bottom') {\n                    top = chart.chartHeight - axis.bottom + axis.offset;\n                    bottom = top + tickWidth;\n                }\n                else {\n                    bottom = axis.top + axis.len - (axis.translate(reversed ? nextTickPos : tickPos) || 0);\n                    top = axis.top + axis.len - (axis.translate(reversed ? tickPos : nextTickPos) || 0);\n                }\n                // Calculate left and right positions of the cell.\n                if (side === 'right') {\n                    left = chart.chartWidth - axis.right + axis.offset;\n                    right = left + tickWidth;\n                }\n                else if (side === 'left') {\n                    right = axis.left + axis.offset;\n                    left = right - tickWidth;\n                }\n                else {\n                    left = Math.round(axis.left + (axis.translate(reversed ? nextTickPos : tickPos) || 0)) - crispCorr;\n                    right = Math.min(// #15742\n                    Math.round(axis.left + (axis.translate(reversed ? tickPos : nextTickPos) || 0)) - crispCorr, axis.left + axis.len);\n                }\n                tick.slotWidth = right - left;\n                // Calculate the positioning of the label based on\n                // alignment.\n                e.pos.x = (align === 'left' ?\n                    left :\n                    align === 'right' ?\n                        right :\n                        left + ((right - left) / 2) // default to center\n                );\n                e.pos.y = (verticalAlign === 'top' ?\n                    top :\n                    verticalAlign === 'bottom' ?\n                        bottom :\n                        top + ((bottom - top) / 2) // default to middle\n                );\n                if (label) {\n                    const lblMetrics = chart.renderer.fontMetrics(label), labelHeight = label.getBBox().height;\n                    // Adjustment to y position to align the label correctly.\n                    // Would be better to have a setter or similar for this.\n                    if (!labelOpts.useHTML) {\n                        const lines = Math.round(labelHeight / lblMetrics.h);\n                        e.pos.y += (\n                        // Center the label\n                        // TODO: why does this actually center the label?\n                        ((lblMetrics.b - (lblMetrics.h - lblMetrics.f)) / 2) +\n                            // Adjust for height of additional lines.\n                            -(((lines - 1) * lblMetrics.h) / 2));\n                    }\n                    else {\n                        e.pos.y += (\n                        // Readjust yCorr in htmlUpdateTransform\n                        lblMetrics.b +\n                            // Adjust for height of html label\n                            -(labelHeight / 2));\n                    }\n                }\n                e.pos.x += (axis.horiz && labelOpts.x) || 0;\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickLabelFormat(ctx) {\n            const { axis, value } = ctx;\n            if (axis.options.grid &&\n                axis.options.grid.enabled) {\n                const tickPos = axis.tickPositions;\n                const series = (axis.linkedParent || axis).series[0];\n                const isFirst = value === tickPos[0];\n                const isLast = value === tickPos[tickPos.length - 1];\n                const point = series && find(series.options.data, function (p) {\n                    return p[axis.isXAxis ? 'x' : 'y'] === value;\n                });\n                let pointCopy;\n                if (point && series.is('gantt')) {\n                    // For the Gantt set point aliases to the pointCopy\n                    // to do not change the original point\n                    pointCopy = merge(point);\n                    H.seriesTypes.gantt.prototype.pointClass\n                        .setGanttPointAliases(pointCopy);\n                }\n                // Make additional properties available for the\n                // formatter\n                ctx.isFirst = isFirst;\n                ctx.isLast = isLast;\n                ctx.point = pointCopy;\n            }\n        }\n        /**\n         * Makes tick labels which are usually ignored in a linked axis\n         * displayed if they are within range of linkedParent.min.\n         * ```\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Make this:             |   |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Into this:             | 1 |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         * ```\n         * @private\n         * @todo Does this function do what the drawing says? Seems to affect\n         *       ticks and not the labels directly?\n         */\n        function onTrimTicks() {\n            const axis = this, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, categoryAxis = axis.categories, tickPositions = axis.tickPositions, firstPos = tickPositions[0], secondPos = tickPositions[1], lastPos = tickPositions[tickPositions.length - 1], beforeLastPos = tickPositions[tickPositions.length - 2], linkedMin = axis.linkedParent && axis.linkedParent.min, linkedMax = axis.linkedParent && axis.linkedParent.max, min = linkedMin || axis.min, max = linkedMax || axis.max, tickInterval = axis.tickInterval, startLessThanMin = ( // #19845\n            isNumber(min) &&\n                min >= firstPos + tickInterval &&\n                min < secondPos), endMoreThanMin = (isNumber(min) &&\n                firstPos < min &&\n                firstPos + tickInterval > min), startLessThanMax = (isNumber(max) &&\n                lastPos > max &&\n                lastPos - tickInterval < max), endMoreThanMax = (isNumber(max) &&\n                max <= lastPos - tickInterval &&\n                max > beforeLastPos);\n            if (gridOptions.enabled === true &&\n                !categoryAxis &&\n                (axis.isXAxis || axis.isLinked)) {\n                if ((endMoreThanMin || startLessThanMin) && !options.startOnTick) {\n                    tickPositions[0] = min;\n                }\n                if ((startLessThanMax || endMoreThanMax) && !options.endOnTick) {\n                    tickPositions[tickPositions.length - 1] = max;\n                }\n            }\n        }\n        /**\n         * Avoid altering tickInterval when reserving space.\n         * @private\n         */\n        function wrapUnsquish(proceed) {\n            const axis = this;\n            const { options: { grid: gridOptions = {} } } = axis;\n            if (gridOptions.enabled === true && axis.categories) {\n                return axis.tickInterval;\n            }\n            return proceed.apply(axis, argsToArray(arguments));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Additions for grid axes.\n         * @private\n         * @class\n         */\n        class GridAxisAdditions {\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Checks if an axis is the outer axis in its dimension. Since\n             * axes are placed outwards in order, the axis with the highest\n             * index is the outermost axis.\n             *\n             * Example: If there are multiple x-axes at the top of the chart,\n             * this function returns true if the axis supplied is the last\n             * of the x-axes.\n             *\n             * @private\n             *\n             * @return {boolean}\n             * True if the axis is the outermost axis in its dimension; false if\n             * not.\n             */\n            isOuterAxis() {\n                const axis = this.axis;\n                const chart = axis.chart;\n                const columnIndex = axis.grid.columnIndex;\n                const columns = (axis.linkedParent?.grid.columns ||\n                    axis.grid.columns ||\n                    []);\n                const parentAxis = columnIndex ? axis.linkedParent : axis;\n                let thisIndex = -1, lastIndex = 0;\n                // On the left side, when we have columns (not only multiple axes), the\n                // main axis is to the left\n                if (axis.side === 3 && !chart.inverted && columns.length) {\n                    return !axis.linkedParent;\n                }\n                (chart[axis.coll] || []).forEach((otherAxis, index) => {\n                    if (otherAxis.side === axis.side &&\n                        !otherAxis.options.isInternal) {\n                        lastIndex = index;\n                        if (otherAxis === parentAxis) {\n                            // Get the index of the axis in question\n                            thisIndex = index;\n                        }\n                    }\n                });\n                return (lastIndex === thisIndex &&\n                    (isNumber(columnIndex) ?\n                        columns.length === columnIndex :\n                        true));\n            }\n            /**\n             * Add extra border based on the provided path.\n             * @private\n             * @param {SVGPath} path\n             * The path of the border.\n             * @return {Highcharts.SVGElement}\n             * Border\n             */\n            renderBorder(path) {\n                const axis = this.axis, renderer = axis.chart.renderer, options = axis.options, extraBorderLine = renderer.path(path)\n                    .addClass('highcharts-axis-line')\n                    .add(axis.axisGroup);\n                if (!renderer.styledMode) {\n                    extraBorderLine.attr({\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth,\n                        zIndex: 7\n                    });\n                }\n                return extraBorderLine;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        // First letter of the day of the week, e.g. 'M' for 'Monday'.\n        dateFormats.E = function (timestamp) {\n            return this.dateFormat('%a', timestamp, true).charAt(0);\n        };\n        // Adds week date format\n        dateFormats.W = function (timestamp) {\n            const time = this, d = new this.Date(timestamp), unitsToOmit = ['Hours', 'Milliseconds', 'Minutes', 'Seconds'];\n            unitsToOmit.forEach(function (format) {\n                time.set(format, d, 0);\n            });\n            const firstDay = (this.get('Day', d) + 6) % 7;\n            const thursday = new this.Date(d.valueOf());\n            this.set('Date', thursday, this.get('Date', d) - firstDay + 3);\n            const firstThursday = new this.Date(this.get('FullYear', thursday), 0, 1);\n            if (this.get('Day', firstThursday) !== 4) {\n                this.set('Month', d, 0);\n                this.set('Date', d, 1 + (11 - this.get('Day', firstThursday)) % 7);\n            }\n            return (1 +\n                Math.floor((thursday.valueOf() - firstThursday.valueOf()) / 604800000)).toString();\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const GridAxis = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * @productdesc {gantt}\n         * For grid axes (like in Gantt charts),\n         * it is possible to declare as a list to provide different\n         * formats depending on available space.\n         *\n         * Defaults to:\n         * ```js\n         * {\n         *     hour: { list: ['%H:%M', '%H'] },\n         *     day: { list: ['%A, %e. %B', '%a, %e. %b', '%E'] },\n         *     week: { list: ['Week %W', 'W%W'] },\n         *     month: { list: ['%B', '%b', '%o'] }\n         * }\n         * ```\n         *\n         * @sample {gantt} gantt/grid-axis/date-time-label-formats\n         *         Gantt chart with custom axis date format.\n         *\n         * @apioption xAxis.dateTimeLabelFormats\n         */\n        /**\n         * Set grid options for the axis labels. Requires Highcharts Gantt.\n         *\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid\n         */\n        /**\n         * Enable grid on the axis labels. Defaults to true for Gantt charts.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid.enabled\n         */\n        /**\n         * Set specific options for each column (or row for horizontal axes) in the\n         * grid. Each extra column/row is its own axis, and the axis options can be set\n         * here.\n         *\n         * @sample gantt/demo/left-axis-table\n         *         Left axis as a table\n         * @sample gantt/demo/treegrid-columns\n         *         Collapsible tree grid with columns\n         *\n         * @type      {Array<Highcharts.XAxisOptions>}\n         * @apioption xAxis.grid.columns\n         */\n        /**\n         * Set border color for the label grid lines.\n         *\n         * @type      {Highcharts.ColorString}\n         * @default   #e6e6e6\n         * @apioption xAxis.grid.borderColor\n         */\n        /**\n         * Set border width of the label grid lines.\n         *\n         * @type      {number}\n         * @default   1\n         * @apioption xAxis.grid.borderWidth\n         */\n        /**\n         * Set cell height for grid axis labels. By default this is calculated from font\n         * size. This option only applies to horizontal axes. For vertical axes, check\n         * the [#yAxis.staticScale](yAxis.staticScale) option.\n         *\n         * @sample gantt/grid-axis/cellheight\n         *         Gant chart with custom cell height\n         * @type      {number}\n         * @apioption xAxis.grid.cellHeight\n         */\n        ''; // keeps doclets above in JS file\n\n        return GridAxis;\n    });\n    _registerModule(_modules, 'Gantt/Tree.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { extend, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates an object map from parent id to childrens index.\n         *\n         * @private\n         * @function Highcharts.Tree#getListOfParents\n         *\n         * @param {Array<*>} data\n         *        List of points set in options. `Array.parent` is parent id of point.\n         *\n         * @param {Array<string>} ids\n         *        List of all point ids.\n         *\n         * @return {Highcharts.Dictionary<Array<*>>}\n         * Map from parent id to children index in data\n         */\n        function getListOfParents(data) {\n            const root = '', ids = [], listOfParents = data.reduce((prev, curr) => {\n                const { parent = '', id } = curr;\n                if (typeof prev[parent] === 'undefined') {\n                    prev[parent] = [];\n                }\n                prev[parent].push(curr);\n                if (id) {\n                    ids.push(id);\n                }\n                return prev;\n            }, {});\n            Object.keys(listOfParents).forEach((node) => {\n                if ((node !== root) && (ids.indexOf(node) === -1)) {\n                    const adoptedByRoot = listOfParents[node].map(function (orphan) {\n                        const { parent, ...parentExcluded } = orphan; // #15196\n                        return parentExcluded;\n                    });\n                    listOfParents[root].push(...adoptedByRoot);\n                    delete listOfParents[node];\n                }\n            });\n            return listOfParents;\n        }\n        /** @private */\n        function getNode(id, parent, level, data, mapOfIdToChildren, options) {\n            const after = options && options.after, before = options && options.before, node = {\n                data,\n                depth: level - 1,\n                id,\n                level,\n                parent: (parent || '')\n            };\n            let descendants = 0, height = 0, start, end;\n            // Allow custom logic before the children has been created.\n            if (typeof before === 'function') {\n                before(node, options);\n            }\n            // Call getNode recursively on the children. Calulate the height of the\n            // node, and the number of descendants.\n            const children = ((mapOfIdToChildren[id] || [])).map((child) => {\n                const node = getNode(child.id, id, (level + 1), child, mapOfIdToChildren, options), childStart = child.start || NaN, childEnd = (child.milestone === true ?\n                    childStart :\n                    child.end ||\n                        NaN);\n                // Start should be the lowest child.start.\n                start = ((!isNumber(start) || childStart < start) ?\n                    childStart :\n                    start);\n                // End should be the largest child.end.\n                // If child is milestone, then use start as end.\n                end = ((!isNumber(end) || childEnd > end) ?\n                    childEnd :\n                    end);\n                descendants = descendants + 1 + node.descendants;\n                height = Math.max(node.height + 1, height);\n                return node;\n            });\n            // Calculate start and end for point if it is not already explicitly set.\n            if (data) {\n                data.start = pick(data.start, start);\n                data.end = pick(data.end, end);\n            }\n            extend(node, {\n                children: children,\n                descendants: descendants,\n                height: height\n            });\n            // Allow custom logic after the children has been created.\n            if (typeof after === 'function') {\n                after(node, options);\n            }\n            return node;\n        }\n        /** @private */\n        function getTree(data, options) {\n            return getNode('', null, 1, null, getListOfParents(data), options);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Tree = {\n            getNode,\n            getTree\n        };\n\n        return Tree;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridTick.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, removeEvent, isObject, isNumber, pick, pushUnique, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onTickInit() {\n            const tick = this;\n            if (!tick.treeGrid) {\n                tick.treeGrid = new TreeGridTickAdditions(tick);\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHover(label) {\n            label.addClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({\n                    textDecoration: 'underline'\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHoverExit(label, options) {\n            const css = isObject(options.style) ? options.style : {};\n            label.removeClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({ textDecoration: (css.textDecoration || 'none') });\n            }\n        }\n        /**\n         * @private\n         */\n        function renderLabelIcon(tick, params) {\n            const treeGrid = tick.treeGrid, isNew = !treeGrid.labelIcon, renderer = params.renderer, labelBox = params.xy, options = params.options, width = options.width || 0, height = options.height || 0, padding = options.padding ?? tick.axis.linkedParent ? 0 : 5, iconCenter = {\n                x: labelBox.x - (width / 2) - padding,\n                y: labelBox.y - (height / 2)\n            }, rotation = params.collapsed ? 90 : 180, shouldRender = params.show && isNumber(iconCenter.y);\n            let icon = treeGrid.labelIcon;\n            if (!icon) {\n                treeGrid.labelIcon = icon = renderer\n                    .path(renderer.symbols[options.type](options.x || 0, options.y || 0, width, height))\n                    .addClass('highcharts-label-icon')\n                    .add(params.group);\n            }\n            // Set the new position, and show or hide\n            icon[shouldRender ? 'show' : 'hide'](); // #14904, #1338\n            // Presentational attributes\n            if (!renderer.styledMode) {\n                icon\n                    .attr({\n                    cursor: 'pointer',\n                    'fill': pick(params.color, \"#666666\" /* Palette.neutralColor60 */),\n                    'stroke-width': 1,\n                    stroke: options.lineColor,\n                    strokeWidth: options.lineWidth || 0\n                });\n            }\n            // Update the icon positions\n            icon[isNew ? 'attr' : 'animate']({\n                translateX: iconCenter.x,\n                translateY: iconCenter.y,\n                rotation: rotation\n            });\n        }\n        /**\n         * @private\n         */\n        function wrapGetLabelPosition(proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n            const tick = this, lbOptions = pick(tick.options && tick.options.labels, labelOptions), pos = tick.pos, axis = tick.axis, options = axis.options, isTreeGrid = options.type === 'treegrid', result = proceed.apply(tick, [x, y, label, horiz, lbOptions, tickmarkOffset, index, step]);\n            let mapOfPosToGridNode, node, level;\n            if (isTreeGrid) {\n                const { width = 0, padding = axis.linkedParent ? 0 : 5 } = (lbOptions && isObject(lbOptions.symbol, true) ?\n                    lbOptions.symbol :\n                    {}), indentation = (lbOptions && isNumber(lbOptions.indentation) ?\n                    lbOptions.indentation :\n                    0);\n                mapOfPosToGridNode = axis.treeGrid.mapOfPosToGridNode;\n                node = mapOfPosToGridNode && mapOfPosToGridNode[pos];\n                level = (node && node.depth) || 1;\n                result.x += (\n                // Add space for symbols\n                (width + (padding * 2)) +\n                    // Apply indentation\n                    ((level - 1) * indentation));\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function wrapRenderLabel(proceed) {\n            const tick = this, { pos, axis, label, treeGrid: tickGrid, options: tickOptions } = tick, icon = tickGrid?.labelIcon, labelElement = label?.element, { treeGrid: axisGrid, options: axisOptions, chart, tickPositions } = axis, mapOfPosToGridNode = axisGrid.mapOfPosToGridNode, labelOptions = pick(tickOptions?.labels, axisOptions?.labels), symbolOptions = (labelOptions && isObject(labelOptions.symbol, true) ?\n                labelOptions.symbol :\n                {}), node = mapOfPosToGridNode && mapOfPosToGridNode[pos], { descendants, depth } = node || {}, hasDescendants = node && descendants && descendants > 0, level = depth, isTreeGridElement = (axisOptions.type === 'treegrid') && labelElement, shouldRender = tickPositions.indexOf(pos) > -1, prefixClassName = 'highcharts-treegrid-node-', prefixLevelClass = prefixClassName + 'level-', styledMode = chart.styledMode;\n            let collapsed, addClassName, removeClassName;\n            if (isTreeGridElement && node) {\n                // Add class name for hierarchical styling.\n                label\n                    .removeClass(new RegExp(prefixLevelClass + '.*'))\n                    .addClass(prefixLevelClass + level);\n            }\n            proceed.apply(tick, Array.prototype.slice.call(arguments, 1));\n            if (isTreeGridElement && hasDescendants) {\n                collapsed = axisGrid.isCollapsed(node);\n                renderLabelIcon(tick, {\n                    color: (!styledMode &&\n                        label.styles &&\n                        label.styles.color ||\n                        ''),\n                    collapsed: collapsed,\n                    group: label.parentGroup,\n                    options: symbolOptions,\n                    renderer: label.renderer,\n                    show: shouldRender,\n                    xy: label.xy\n                });\n                // Add class name for the node.\n                addClassName = prefixClassName +\n                    (collapsed ? 'collapsed' : 'expanded');\n                removeClassName = prefixClassName +\n                    (collapsed ? 'expanded' : 'collapsed');\n                label\n                    .addClass(addClassName)\n                    .removeClass(removeClassName);\n                if (!styledMode) {\n                    label.css({\n                        cursor: 'pointer'\n                    });\n                }\n                // Add events to both label text and icon\n                [label, icon].forEach((object) => {\n                    if (object && !object.attachedTreeGridEvents) {\n                        // On hover\n                        addEvent(object.element, 'mouseover', function () {\n                            onTickHover(label);\n                        });\n                        // On hover out\n                        addEvent(object.element, 'mouseout', function () {\n                            onTickHoverExit(label, labelOptions);\n                        });\n                        addEvent(object.element, 'click', function () {\n                            tickGrid.toggleCollapse();\n                        });\n                        object.attachedTreeGridEvents = true;\n                    }\n                });\n            }\n            else if (icon) {\n                removeEvent(labelElement);\n                label?.css({ cursor: 'default' });\n                icon.destroy();\n            }\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreeGridTickAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(TickClass) {\n                if (pushUnique(composed, this.compose)) {\n                    const tickProto = TickClass.prototype;\n                    addEvent(TickClass, 'init', onTickInit);\n                    wrap(tickProto, 'getLabelPosition', wrapGetLabelPosition);\n                    wrap(tickProto, 'renderLabel', wrapRenderLabel);\n                    // backwards compatibility\n                    tickProto.collapse = function (redraw) {\n                        this.treeGrid.collapse(redraw);\n                    };\n                    tickProto.expand = function (redraw) {\n                        this.treeGrid.expand(redraw);\n                    };\n                    tickProto.toggleCollapse = function (redraw) {\n                        this.treeGrid.toggleCollapse(redraw);\n                    };\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            constructor(tick) {\n                this.tick = tick;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Collapse the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#collapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            collapse(redraw) {\n                const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.collapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n            /**\n             * Destroy remaining labelIcon if exist.\n             *\n             * @private\n             * @function Highcharts.Tick#destroy\n             */\n            destroy() {\n                if (this.labelIcon) {\n                    this.labelIcon.destroy();\n                }\n            }\n            /**\n             * Expand the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#expand\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            expand(redraw) {\n                const { pos, axis } = this.tick, { treeGrid, brokenAxis } = axis, posMappedNodes = treeGrid.mapOfPosToGridNode;\n                if (brokenAxis && posMappedNodes) {\n                    const node = posMappedNodes[pos], breaks = treeGrid.expand(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n            /**\n             * Toggle the collapse/expand state of the grid cell. Used when axis is\n             * of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#toggleCollapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            toggleCollapse(redraw) {\n                const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.toggleCollapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridTickAdditions;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend, isArray, isNumber, isObject, merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            const variateColor = (color) => {\n                const colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            let result = {}, defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce((obj, item) => {\n                        let level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            let childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach((child, i) => {\n                const newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            const value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            let rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const TreeUtilities = {\n            getColor,\n            getLevelOptions,\n            setTreeValues,\n            updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridAxis.js', [_modules['Core/Axis/BrokenAxis.js'], _modules['Core/Axis/GridAxis.js'], _modules['Core/Globals.js'], _modules['Gantt/Tree.js'], _modules['Core/Axis/TreeGrid/TreeGridTick.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (BrokenAxis, GridAxis, H, Tree, TreeGridTick, TU, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { getLevelOptions } = TU;\n        const { addEvent, find, fireEvent, isArray, isObject, isString, merge, pick, pushUnique, removeEvent, wrap } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let TickConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function getBreakFromNode(node, max) {\n            const to = node.collapseEnd || 0;\n            let from = node.collapseStart || 0;\n            // In broken-axis, the axis.max is minimized until it is not within a\n            // break. Therefore, if break.to is larger than axis.max, the axis.to\n            // should not add the 0.5 axis.tickMarkOffset, to avoid adding a break\n            // larger than axis.max.\n            // TODO consider simplifying broken-axis and this might solve itself\n            if (to >= max) {\n                from -= 0.5;\n            }\n            return {\n                from: from,\n                to: to,\n                showPoints: false\n            };\n        }\n        /**\n         * Creates a tree structure of the data, and the treegrid. Calculates\n         * categories, and y-values of points based on the tree.\n         *\n         * @private\n         * @function getTreeGridFromData\n         *\n         * @param {Array<Highcharts.GanttPointOptions>} data\n         * All the data points to display in the axis.\n         *\n         * @param {boolean} uniqueNames\n         * Whether or not the data node with the same name should share grid cell. If\n         * true they do share cell. False by default.\n         *\n         * @param {number} numberOfSeries\n         *\n         * @return {Object}\n         * Returns an object containing categories, mapOfIdToNode,\n         * mapOfPosToGridNode, and tree.\n         *\n         * @todo There should be only one point per line.\n         * @todo It should be optional to have one category per point, or merge\n         *       cells\n         * @todo Add unit-tests.\n         */\n        function getTreeGridFromData(data, uniqueNames, numberOfSeries) {\n            const categories = [], collapsedNodes = [], mapOfIdToNode = {}, uniqueNamesEnabled = typeof uniqueNames === 'boolean' ?\n                uniqueNames : false;\n            let mapOfPosToGridNode = {}, posIterator = -1;\n            // Build the tree from the series data.\n            const treeParams = {\n                // After the children has been created.\n                after: function (node) {\n                    const gridNode = mapOfPosToGridNode[node.pos];\n                    let height = 0, descendants = 0;\n                    gridNode.children.forEach(function (child) {\n                        descendants += (child.descendants || 0) + 1;\n                        height = Math.max((child.height || 0) + 1, height);\n                    });\n                    gridNode.descendants = descendants;\n                    gridNode.height = height;\n                    if (gridNode.collapsed) {\n                        collapsedNodes.push(gridNode);\n                    }\n                },\n                // Before the children has been created.\n                before: function (node) {\n                    const data = isObject(node.data, true) ?\n                        node.data :\n                        {}, name = isString(data.name) ? data.name : '', parentNode = mapOfIdToNode[node.parent], parentGridNode = (isObject(parentNode, true) ?\n                        mapOfPosToGridNode[parentNode.pos] :\n                        null), hasSameName = function (x) {\n                        return x.name === name;\n                    };\n                    let gridNode, pos;\n                    // If not unique names, look for sibling node with the same name\n                    if (uniqueNamesEnabled &&\n                        isObject(parentGridNode, true) &&\n                        !!(gridNode = find(parentGridNode.children, hasSameName))) {\n                        // If there is a gridNode with the same name, reuse position\n                        pos = gridNode.pos;\n                        // Add data node to list of nodes in the grid node.\n                        gridNode.nodes.push(node);\n                    }\n                    else {\n                        // If it is a new grid node, increment position.\n                        pos = posIterator++;\n                    }\n                    // Add new grid node to map.\n                    if (!mapOfPosToGridNode[pos]) {\n                        mapOfPosToGridNode[pos] = gridNode = {\n                            depth: parentGridNode ? parentGridNode.depth + 1 : 0,\n                            name: name,\n                            id: data.id,\n                            nodes: [node],\n                            children: [],\n                            pos: pos\n                        };\n                        // If not root, then add name to categories.\n                        if (pos !== -1) {\n                            categories.push(name);\n                        }\n                        // Add name to list of children.\n                        if (isObject(parentGridNode, true)) {\n                            parentGridNode.children.push(gridNode);\n                        }\n                    }\n                    // Add data node to map\n                    if (isString(node.id)) {\n                        mapOfIdToNode[node.id] = node;\n                    }\n                    // If one of the points are collapsed, then start the grid node\n                    // in collapsed state.\n                    if (gridNode &&\n                        data.collapsed === true) {\n                        gridNode.collapsed = true;\n                    }\n                    // Assign pos to data node\n                    node.pos = pos;\n                }\n            };\n            const updateYValuesAndTickPos = function (map, numberOfSeries) {\n                const setValues = function (gridNode, start, result) {\n                    const nodes = gridNode.nodes, padding = 0.5;\n                    let end = start + (start === -1 ? 0 : numberOfSeries - 1);\n                    const diff = (end - start) / 2, pos = start + diff;\n                    nodes.forEach(function (node) {\n                        const data = node.data;\n                        if (isObject(data, true)) {\n                            // Update point\n                            data.y = start + (data.seriesIndex || 0);\n                            // Remove the property once used\n                            delete data.seriesIndex;\n                        }\n                        node.pos = pos;\n                    });\n                    result[pos] = gridNode;\n                    gridNode.pos = pos;\n                    gridNode.tickmarkOffset = diff + padding;\n                    gridNode.collapseStart = end + padding;\n                    gridNode.children.forEach(function (child) {\n                        setValues(child, end + 1, result);\n                        end = (child.collapseEnd || 0) - padding;\n                    });\n                    // Set collapseEnd to the end of the last child node.\n                    gridNode.collapseEnd = end + padding;\n                    return result;\n                };\n                return setValues(map['-1'], -1, {});\n            };\n            // Create tree from data\n            const tree = Tree.getTree(data, treeParams);\n            // Update y values of data, and set calculate tick positions.\n            mapOfPosToGridNode = updateYValuesAndTickPos(mapOfPosToGridNode, numberOfSeries);\n            // Return the resulting data.\n            return {\n                categories: categories,\n                mapOfIdToNode: mapOfIdToNode,\n                mapOfPosToGridNode: mapOfPosToGridNode,\n                collapsedNodes: collapsedNodes,\n                tree: tree\n            };\n        }\n        /**\n         * Builds the tree of categories and calculates its positions.\n         * @private\n         * @param {Object} e Event object\n         * @param {Object} e.target The chart instance which the event was fired on.\n         * @param {object[]} e.target.axes The axes of the chart.\n         */\n        function onBeforeRender(e) {\n            const chart = e.target, axes = chart.axes;\n            axes.filter(function (axis) {\n                return axis.options.type === 'treegrid';\n            }).forEach(function (axis) {\n                const options = axis.options || {}, labelOptions = options.labels, uniqueNames = options.uniqueNames, max = options.max, \n                // Check whether any of series is rendering for the first\n                // time, visibility has changed, or its data is dirty, and\n                // only then update. #10570, #10580. Also check if\n                // mapOfPosToGridNode exists. #10887\n                isDirty = (!axis.treeGrid.mapOfPosToGridNode ||\n                    axis.series.some(function (series) {\n                        return !series.hasRendered ||\n                            series.isDirtyData ||\n                            series.isDirty;\n                    }));\n                let numberOfSeries = 0, data, treeGrid;\n                if (isDirty) {\n                    // Concatenate data from all series assigned to this axis.\n                    data = axis.series.reduce(function (arr, s) {\n                        if (s.visible) {\n                            // Push all data to array\n                            (s.options.data || []).forEach(function (data) {\n                                // For using keys - rebuild the data structure\n                                if (s.options.keys && s.options.keys.length) {\n                                    data = s.pointClass.prototype\n                                        .optionsToObject\n                                        .call({ series: s }, data);\n                                    s.pointClass.setGanttPointAliases(data);\n                                }\n                                if (isObject(data, true)) {\n                                    // Set series index on data. Removed again\n                                    // after use.\n                                    data.seriesIndex = (numberOfSeries);\n                                    arr.push(data);\n                                }\n                            });\n                            // Increment series index\n                            if (uniqueNames === true) {\n                                numberOfSeries++;\n                            }\n                        }\n                        return arr;\n                    }, []);\n                    // If max is higher than set data - add a\n                    // dummy data to render categories #10779\n                    if (max && data.length < max) {\n                        for (let i = data.length; i <= max; i++) {\n                            data.push({\n                                // Use the zero-width character\n                                // to avoid conflict with uniqueNames\n                                name: i + '\\u200B'\n                            });\n                        }\n                    }\n                    // setScale is fired after all the series is initialized,\n                    // which is an ideal time to update the axis.categories.\n                    treeGrid = getTreeGridFromData(data, uniqueNames || false, (uniqueNames === true) ? numberOfSeries : 1);\n                    // Assign values to the axis.\n                    axis.categories = treeGrid.categories;\n                    axis.treeGrid.mapOfPosToGridNode = (treeGrid.mapOfPosToGridNode);\n                    axis.hasNames = true;\n                    axis.treeGrid.tree = treeGrid.tree;\n                    // Update yData now that we have calculated the y values\n                    axis.series.forEach(function (series) {\n                        const axisData = (series.options.data || []).map(function (d) {\n                            if (isArray(d) &&\n                                series.options.keys &&\n                                series.options.keys.length) {\n                                // Get the axisData from the data array used to\n                                // build the treeGrid where has been modified\n                                data.forEach(function (point) {\n                                    if (d.indexOf(point.x) >= 0 &&\n                                        d.indexOf(point.x2) >= 0) {\n                                        d = point;\n                                    }\n                                });\n                            }\n                            return isObject(d, true) ? merge(d) : d;\n                        });\n                        // Avoid destroying points when series is not visible\n                        if (series.visible) {\n                            series.setData(axisData, false);\n                        }\n                    });\n                    // Calculate the label options for each level in the tree.\n                    axis.treeGrid.mapOptionsToLevel =\n                        getLevelOptions({\n                            defaults: labelOptions,\n                            from: 1,\n                            levels: labelOptions && labelOptions.levels,\n                            to: axis.treeGrid.tree && axis.treeGrid.tree.height\n                        });\n                    // Setting initial collapsed nodes\n                    if (e.type === 'beforeRender') {\n                        axis.treeGrid.collapsedNodes = treeGrid.collapsedNodes;\n                    }\n                }\n            });\n        }\n        /**\n         * Generates a tick for initial positioning.\n         *\n         * @private\n         * @function Highcharts.GridAxis#generateTick\n         *\n         * @param {Function} proceed\n         * The original generateTick function.\n         *\n         * @param {number} pos\n         * The tick position in axis values.\n         */\n        function wrapGenerateTick(proceed, pos) {\n            const axis = this, mapOptionsToLevel = axis.treeGrid.mapOptionsToLevel || {}, isTreeGrid = axis.options.type === 'treegrid', ticks = axis.ticks;\n            let tick = ticks[pos], levelOptions, options, gridNode;\n            if (isTreeGrid &&\n                axis.treeGrid.mapOfPosToGridNode) {\n                gridNode = axis.treeGrid.mapOfPosToGridNode[pos];\n                levelOptions = mapOptionsToLevel[gridNode.depth];\n                if (levelOptions) {\n                    options = {\n                        labels: levelOptions\n                    };\n                }\n                if (!tick &&\n                    TickConstructor) {\n                    ticks[pos] = tick =\n                        new TickConstructor(axis, pos, void 0, void 0, {\n                            category: gridNode.name,\n                            tickmarkOffset: gridNode.tickmarkOffset,\n                            options: options\n                        });\n                }\n                else {\n                    // update labels depending on tick interval\n                    tick.parameters.category = gridNode.name;\n                    tick.options = options;\n                    tick.addLabel();\n                }\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapInit(proceed, chart, userOptions, coll) {\n            const axis = this, isTreeGrid = userOptions.type === 'treegrid';\n            if (!axis.treeGrid) {\n                axis.treeGrid = new TreeGridAxisAdditions(axis);\n            }\n            // Set default and forced options for TreeGrid\n            if (isTreeGrid) {\n                // Add event for updating the categories of a treegrid.\n                // NOTE Preferably these events should be set on the axis.\n                addEvent(chart, 'beforeRender', onBeforeRender);\n                addEvent(chart, 'beforeRedraw', onBeforeRender);\n                // Add new collapsed nodes on addseries\n                addEvent(chart, 'addSeries', function (e) {\n                    if (e.options.data) {\n                        const treeGrid = getTreeGridFromData(e.options.data, userOptions.uniqueNames || false, 1);\n                        axis.treeGrid.collapsedNodes = (axis.treeGrid.collapsedNodes || []).concat(treeGrid.collapsedNodes);\n                    }\n                });\n                // Collapse all nodes in axis.treegrid.collapsednodes\n                // where collapsed equals true.\n                addEvent(axis, 'foundExtremes', function () {\n                    if (axis.treeGrid.collapsedNodes) {\n                        axis.treeGrid.collapsedNodes.forEach(function (node) {\n                            const breaks = axis.treeGrid.collapse(node);\n                            if (axis.brokenAxis) {\n                                axis.brokenAxis.setBreaks(breaks, false);\n                                // remove the node from the axis collapsedNodes\n                                if (axis.treeGrid.collapsedNodes) {\n                                    axis.treeGrid.collapsedNodes = axis.treeGrid\n                                        .collapsedNodes\n                                        .filter((n) => ((node.collapseStart !==\n                                        n.collapseStart) ||\n                                        node.collapseEnd !== n.collapseEnd));\n                                }\n                            }\n                        });\n                    }\n                });\n                // If staticScale is not defined on the yAxis\n                // and chart height is set, set axis.isDirty\n                // to ensure collapsing works (#12012)\n                addEvent(axis, 'afterBreaks', function () {\n                    if (axis.coll === 'yAxis' &&\n                        !axis.staticScale &&\n                        axis.chart.options.chart.height) {\n                        axis.isDirty = true;\n                    }\n                });\n                userOptions = merge({\n                    // Default options\n                    grid: {\n                        enabled: true\n                    },\n                    // TODO: add support for align in treegrid.\n                    labels: {\n                        align: 'left',\n                        /**\n                        * Set options on specific levels in a tree grid axis. Takes\n                        * precedence over labels options.\n                        *\n                        * @sample {gantt} gantt/treegrid-axis/labels-levels\n                        *         Levels on TreeGrid Labels\n                        *\n                        * @type      {Array<*>}\n                        * @product   gantt\n                        * @apioption yAxis.labels.levels\n                        *\n                        * @private\n                        */\n                        levels: [{\n                                /**\n                                * Specify the level which the options within this object\n                                * applies to.\n                                *\n                                * @type      {number}\n                                * @product   gantt\n                                * @apioption yAxis.labels.levels.level\n                                *\n                                * @private\n                                */\n                                level: void 0\n                            }, {\n                                level: 1,\n                                /**\n                                 * @type      {Highcharts.CSSObject}\n                                 * @product   gantt\n                                 * @apioption yAxis.labels.levels.style\n                                 *\n                                 * @private\n                                 */\n                                style: {\n                                    /** @ignore-option */\n                                    fontWeight: 'bold'\n                                }\n                            }],\n                        /**\n                         * The symbol for the collapse and expand icon in a\n                         * treegrid.\n                         *\n                         * @product      gantt\n                         * @optionparent yAxis.labels.symbol\n                         *\n                         * @private\n                         */\n                        symbol: {\n                            /**\n                             * The symbol type. Points to a definition function in\n                             * the `Highcharts.Renderer.symbols` collection.\n                             *\n                             * @type {Highcharts.SymbolKeyValue}\n                             *\n                             * @private\n                             */\n                            type: 'triangle',\n                            x: -5,\n                            y: -5,\n                            height: 10,\n                            width: 10\n                        }\n                    },\n                    uniqueNames: false\n                }, userOptions, {\n                    // Forced options\n                    reversed: true\n                });\n            }\n            // Now apply the original function with the original arguments, which are\n            // sliced off this function's arguments\n            proceed.apply(axis, [chart, userOptions, coll]);\n            if (isTreeGrid) {\n                axis.hasNames = true;\n                axis.options.showLastLabel = true;\n            }\n        }\n        /**\n         * Set the tick positions, tickInterval, axis min and max.\n         *\n         * @private\n         * @function Highcharts.GridAxis#setTickInterval\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapSetTickInterval(proceed) {\n            const axis = this, options = axis.options, linkedParent = typeof options.linkedTo === 'number' ?\n                this.chart[axis.coll]?.[options.linkedTo] :\n                void 0, isTreeGrid = options.type === 'treegrid';\n            if (isTreeGrid) {\n                axis.min = pick(axis.userMin, options.min, axis.dataMin);\n                axis.max = pick(axis.userMax, options.max, axis.dataMax);\n                fireEvent(axis, 'foundExtremes');\n                // `setAxisTranslation` modifies the min and max according to axis\n                // breaks.\n                axis.setAxisTranslation();\n                axis.tickInterval = 1;\n                axis.tickmarkOffset = 0.5;\n                axis.tickPositions = axis.treeGrid.mapOfPosToGridNode ?\n                    axis.treeGrid.getTickPositions() :\n                    [];\n                if (linkedParent) {\n                    const linkedParentExtremes = linkedParent.getExtremes();\n                    axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);\n                    axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);\n                    axis.tickPositions = linkedParent.tickPositions;\n                }\n                axis.linkedParent = linkedParent;\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * Wrap axis redraw to remove TreeGrid events from ticks\n         *\n         * @private\n         * @function Highcharts.GridAxis#redraw\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapRedraw(proceed) {\n            const axis = this, options = axis.options, isTreeGrid = options.type === 'treegrid';\n            if (isTreeGrid && axis.visible) {\n                axis.tickPositions.forEach(function (pos) {\n                    const tick = axis.ticks[pos];\n                    if (tick.label && tick.label.attachedTreeGridEvents) {\n                        removeEvent(tick.label.element);\n                        tick.label.attachedTreeGridEvents = false;\n                    }\n                });\n            }\n            proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreeGridAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass, SeriesClass, TickClass) {\n                if (pushUnique(composed, this.compose)) {\n                    const axisProps = AxisClass.prototype;\n                    if (AxisClass.keepProps.indexOf('treeGrid') === -1) {\n                        AxisClass.keepProps.push('treeGrid');\n                    }\n                    wrap(axisProps, 'generateTick', wrapGenerateTick);\n                    wrap(axisProps, 'init', wrapInit);\n                    wrap(axisProps, 'setTickInterval', wrapSetTickInterval);\n                    wrap(axisProps, 'redraw', wrapRedraw);\n                    // Make utility functions available for testing.\n                    axisProps.utils = {\n                        getNode: Tree.getNode\n                    };\n                    if (!TickConstructor) {\n                        TickConstructor = TickClass;\n                    }\n                }\n                GridAxis.compose(AxisClass, ChartClass, TickClass);\n                BrokenAxis.compose(AxisClass, SeriesClass);\n                TreeGridTick.compose(TickClass);\n                return AxisClass;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set the collapse status.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             */\n            setCollapsedStatus(node) {\n                const axis = this.axis, chart = axis.chart;\n                axis.series.forEach(function (series) {\n                    const data = series.options.data;\n                    if (node.id && data) {\n                        const point = chart.get(node.id), dataPoint = data[series.data.indexOf(point)];\n                        if (point && dataPoint) {\n                            point.collapsed = node.collapsed;\n                            dataPoint.collapsed = node.collapsed;\n                        }\n                    }\n                });\n            }\n            /**\n             * Calculates the new axis breaks to collapse a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            collapse(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                breaks.push(obj);\n                // Change the collapsed flag #13838\n                node.collapsed = true;\n                axis.treeGrid.setCollapsedStatus(node);\n                return breaks;\n            }\n            /**\n             * Calculates the new axis breaks to expand a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to expand.\n             *\n             * @param {number} pos\n             * The tick position to expand.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            expand(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                // Change the collapsed flag #13838\n                node.collapsed = false;\n                axis.treeGrid.setCollapsedStatus(node);\n                // Remove the break from the axis breaks array.\n                return breaks.reduce(function (arr, b) {\n                    if (b.to !== obj.to || b.from !== obj.from) {\n                        arr.push(b);\n                    }\n                    return arr;\n                }, []);\n            }\n            /**\n             * Creates a list of positions for the ticks on the axis. Filters out\n             * positions that are outside min and max, or is inside an axis break.\n             *\n             * @private\n             *\n             * @return {Array<number>}\n             * List of positions.\n             */\n            getTickPositions() {\n                const axis = this.axis, roundedMin = Math.floor(axis.min / axis.tickInterval) * axis.tickInterval, roundedMax = Math.ceil(axis.max / axis.tickInterval) * axis.tickInterval;\n                return Object.keys(axis.treeGrid.mapOfPosToGridNode || {}).reduce(function (arr, key) {\n                    const pos = +key;\n                    if (pos >= roundedMin &&\n                        pos <= roundedMax &&\n                        !(axis.brokenAxis && axis.brokenAxis.isInAnyBreak(pos))) {\n                        arr.push(pos);\n                    }\n                    return arr;\n                }, []);\n            }\n            /**\n             * Check if a node is collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Object} node\n             * The node to check if is collapsed.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {boolean}\n             * Returns true if collapsed, false if expanded.\n             */\n            isCollapsed(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                return breaks.some(function (b) {\n                    return b.from === obj.from && b.to === obj.to;\n                });\n            }\n            /**\n             * Calculates the new axis breaks after toggling the collapse/expand\n             * state of a node. If it is collapsed it will be expanded, and if it is\n             * exapended it will be collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to toggle.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            toggleCollapse(node) {\n                return (this.isCollapsed(node) ?\n                    this.expand(node) :\n                    this.collapse(node));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridAxisAdditions;\n    });\n    _registerModule(_modules, 'Series/Gantt/GanttSeries.js', [_modules['Series/Gantt/GanttPoint.js'], _modules['Series/Gantt/GanttSeriesDefaults.js'], _modules['Gantt/Pathfinder.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Extensions/StaticScale.js'], _modules['Core/Axis/TreeGrid/TreeGridAxis.js'], _modules['Core/Utilities.js']], function (GanttPoint, GanttSeriesDefaults, Pathfinder, SeriesRegistry, StaticScale, TreeGridAxis, U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: Series, seriesTypes: { xrange: XRangeSeries } } = SeriesRegistry;\n        const { extend, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.gantt\n         *\n         * @augments Highcharts.Series\n         */\n        class GanttSeries extends XRangeSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, SeriesClass, TickClass) {\n                XRangeSeries.compose(AxisClass);\n                if (!ChartClass) {\n                    return;\n                }\n                StaticScale.compose(AxisClass, ChartClass);\n                if (!SeriesClass) {\n                    return;\n                }\n                Pathfinder.compose(ChartClass, SeriesClass.prototype.pointClass);\n                if (!TickClass) {\n                    return;\n                }\n                TreeGridAxis.compose(AxisClass, ChartClass, SeriesClass, TickClass);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draws a single point in the series.\n             *\n             * This override draws the point as a diamond if point.options.milestone\n             * is true, and uses the original drawPoint() if it is false or not set.\n             *\n             * @requires highcharts-gantt\n             *\n             * @private\n             * @function Highcharts.seriesTypes.gantt#drawPoint\n             *\n             * @param {Highcharts.Point} point\n             *        An instance of Point in the series\n             *\n             * @param {\"animate\"|\"attr\"} verb\n             *        'animate' (animates changes) or 'attr' (sets options)\n             */\n            drawPoint(point, verb) {\n                const series = this, seriesOpts = series.options, renderer = series.chart.renderer, shapeArgs = point.shapeArgs, plotY = point.plotY, state = point.selected && 'select', cutOff = seriesOpts.stacking && !seriesOpts.borderRadius;\n                let graphic = point.graphic, diamondShape;\n                if (point.options.milestone) {\n                    if (isNumber(plotY) &&\n                        point.y !== null &&\n                        point.visible !== false) {\n                        diamondShape = renderer.symbols.diamond(shapeArgs.x || 0, shapeArgs.y || 0, shapeArgs.width || 0, shapeArgs.height || 0);\n                        if (graphic) {\n                            graphic[verb]({\n                                d: diamondShape\n                            });\n                        }\n                        else {\n                            point.graphic = graphic = renderer.path(diamondShape)\n                                .addClass(point.getClassName(), true)\n                                .add(point.group || series.group);\n                        }\n                        // Presentational\n                        if (!series.chart.styledMode) {\n                            point.graphic\n                                .attr(series.pointAttribs(point, state))\n                                .shadow(seriesOpts.shadow, null, cutOff);\n                        }\n                    }\n                    else if (graphic) {\n                        point.graphic = graphic.destroy(); // #1269\n                    }\n                }\n                else {\n                    super.drawPoint(point, verb);\n                }\n            }\n            /**\n             * Handle milestones, as they have no x2.\n             * @private\n             */\n            translatePoint(point) {\n                const series = this;\n                let shapeArgs, size;\n                super.translatePoint(point);\n                if (point.options.milestone) {\n                    shapeArgs = point.shapeArgs;\n                    size = shapeArgs.height || 0;\n                    point.shapeArgs = {\n                        x: (shapeArgs.x || 0) - (size / 2),\n                        y: shapeArgs.y,\n                        width: size,\n                        height: size\n                    };\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GanttSeries.defaultOptions = merge(XRangeSeries.defaultOptions, GanttSeriesDefaults);\n        extend(GanttSeries.prototype, {\n            pointArrayMap: ['start', 'end', 'y'],\n            pointClass: GanttPoint,\n            setData: Series.prototype.setData\n        });\n        SeriesRegistry.registerSeriesType('gantt', GanttSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttSeries;\n    });\n    _registerModule(_modules, 'masters/modules/gantt.src.js', [_modules['Core/Globals.js'], _modules['Extensions/ArrowSymbols.js'], _modules['Gantt/Connection.js'], _modules['Extensions/CurrentDateIndication.js'], _modules['Core/Chart/GanttChart.js'], _modules['Stock/Navigator/Navigator.js'], _modules['Gantt/Pathfinder.js'], _modules['Stock/RangeSelector/RangeSelector.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Extensions/StaticScale.js'], _modules['Series/XRange/XRangeSeries.js'], _modules['Series/Gantt/GanttSeries.js']], function (Highcharts, ArrowSymbols, Connection, CurrentDateIndication, GanttChart, Navigator, Pathfinder, RangeSelector, Scrollbar, StaticScale, XRangeSeries, GanttSeries) {\n\n        // Series\n        const G = Highcharts;\n        // Classes\n        G.Connection = Connection;\n        G.GanttChart = GanttChart;\n        G.ganttChart = GanttChart.ganttChart;\n        G.Navigator = Navigator;\n        G.Pathfinder = Pathfinder;\n        G.RangeSelector = RangeSelector;\n        G.Scrollbar = Scrollbar;\n        // Compositions\n        ArrowSymbols.compose(G.SVGRenderer);\n        CurrentDateIndication.compose(G.Axis, G.PlotLineOrBand);\n        GanttSeries.compose(G.Axis, G.Chart, G.Series, G.Tick);\n        Navigator.compose(G.Axis, G.Chart, G.Series);\n        Pathfinder.compose(G.Chart, G.Point);\n        RangeSelector.compose(G.Axis, G.Chart);\n        Scrollbar.compose(G.Axis);\n        XRangeSeries.compose(G.Axis);\n        StaticScale.compose(G.Axis, G.Chart);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","H","U","composed","pushUnique","arrow","x","y","w","h","arrowHalf","triangleLeft","triangleLeftHalf","compose","SVGRendererClass","symbols","prototype","defined","error","merge","objectEach","deg2rad","max","Math","min","constructor","from","to","options","init","fromPoint","toPoint","chart","series","pathfinder","renderPath","attribs","styledMode","anim","pathGraphic","connection","graphics","group","renderer","g","addClass","attr","zIndex","add","seriesGroup","translate","plotLeft","plotTop","opacity","d","animate","addMarker","type","markerVector","radians","rotation","box","width","height","pathVector","segment","point","anchor","getPathfinderAnchorPoint","enabled","length","getRadiansToVector","getMarkerVector","radius","rotationOriginX","rotationOriginY","symbol","colorIndex","fill","color","stroke","lineColor","lineWidth","animation","getPath","algorithm","algorithms","chartObstacles","obstacles","requiresObstacles","getChartObstacles","connectors","algorithmMargin","chartObstacleMetrics","getObstacleMetrics","startMarker","endMarker","lineObstacles","obstacleMetrics","hardBounds","xMin","xMax","plotWidth","yMin","yMax","plotHeight","obstacleOptions","margin","startDirectionX","getAlgorithmStartDirection","render","dashStyle","dashstyle","marker","ceil","pathResult","concat","destroy","val","addEvent","wrap","defaultOptions","label","format","formatter","value","axis","time","dateFormat","style","fontSize","onAxisAfterSetOptions","cdiOptions","currentDateIndicator","plotLineOptions","Date","now","className","plotLines","push","onPlotLineOrBandRender","text","getLabelText","wrapPlotLineOrBandGetLabelText","defaultMethod","defaultLabelOptions","indexOf","call","AxisClass","PlotLineOrBandClass","Chart","D","GanttChart","isArray","splat","userOptions","callback","defaultLinkedTo","xAxisOptions","xAxis","yAxisOptions","yAxis","title","legend","navigator","isGantt","map","i","grid","borderColor","opposite","linkedTo","staticScale","reversed","categories","ganttChart","a","b","c","isTouchDevice","correctFloat","isNumber","pick","onAxisInit","navigatorAxis","NavigatorAxisAdditions","onAxisZoom","e","chartOptions","pinchType","zooming","rangeSelector","zoomType","isXAxis","zoomed","range","previousZoom","newMin","newMax","preventDefault","keepProps","toFixedRange","pxMin","pxMax","fixedMin","fixedMax","horiz","fixedRange","halfPointRange","pointRange","dataMin","dataMax","Color","SeriesRegistry","parse","seriesTypes","NavigatorDefaults","maskInside","handles","backgroundColor","maskFill","setOpacity","get","outlineColor","outlineWidth","areaspline","fillOpacity","compare","sonification","dataGrouping","approximation","groupPixelWidth","firstAnchor","lastAnchor","units","dataLabels","id","threshold","overscroll","tickLength","gridLineColor","gridLineWidth","tickPixelInterval","labels","align","textOutline","crosshair","startOnTick","endOnTick","minPadding","maxPadding","tickWidth","_x","_y","halfWidth","markerPosition","round","NavigatorSymbols","RendererRegistry","NavigatorConstructor","setOptions","getRendererType","extend","onChartAfterAddSeries","setBaseSeries","onChartAfterSetChartSize","legendOptions","scrollbarHeight","scrollButtonSize","inverted","left","chartWidth","spacing","top","navigatorOptions","chartHeight","scrollbar","extraBottomMargin","getHeight","verticalAlign","layout","floating","legendHeight","titleOffset","setAxisSize","onChartAfterUpdate","event","scroller","redraw","onChartBeforeRender","onChartBeforeShowResetZoom","onChartCallback","extremes","getExtremes","onChartUpdate","scrollbarOptions","onSeriesAfterUpdate","isInternal","ChartClass","NavigatorClass","SeriesClass","chartProto","callbacks","ScrollbarAxis","Scrollbar","axisMin","axisMax","scrollMin","Infinity","scrollMax","onAxisAfterGetOffset","index","scrollbarsOffsets","axisOffset","size","onAxisAfterInit","vertical","unitedMin","unitedMax","shouldUpdateExtremes","DOMType","setExtremes","setRange","onAxisAfterRender","offsetsIndex","offset","axisTitleMargin","axisMargin","position","xPosition","isNaN","ScrollbarClass","barBorderRadius","buttonBorderRadius","buttonsEnabled","liveRedraw","minWidth","step","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderRadius","trackBorderWidth","ScrollbarDefaults","destroyObjectProperties","fireEvent","removeEvent","swapXY","forEach","seg","temp","len","_events","chartX","chartY","scrollbarButtons","scrollbarLeft","scrollbarStrokeWidth","scrollbarTop","addEvents","buttonsOrder","buttons","bar","scrollbarGroup","element","track","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","ownerDocument","hasTouch","updatePosition","trigger","DOMEvent","cursorToScrollbarPosition","normalizedEvent","minWidthDifference","calculatedWidth","xOffset","barWidth","yOffset","removeEvents","prop","drawScrollbarButton","rect","crisp","r","strokeWidth","pointer","normalize","mousePosition","initPositions","grabbedCenter","change","direction","touches","chartPosition","hasDragged","method","rendered","show","translateX","translateY","hide","scrollbarRifles","fromPX","newSize","fullWidth","toPX","newPos","floor","newRiflesPos","showFull","eventType","svg","boosted","update","Axis","NavigatorComposition","clamp","erase","find","numExt","extreme","numbers","filter","Navigator","drawHandle","verb","parseInt","drawOutline","zoomedMin","zoomedMax","outline","halfOutline","outlineCorrection","navigatorSize","navigatorTop","lineTop","lineBtm","verticalMin","drawMasks","navigatorHeight","shades","shade","renderElements","mouseCursor","cursor","navigatorGroup","visibility","hasMask","css","handlesOptions","baseSeries","navigatorSeries","scrollbarXAxis","fake","navigatorEnabled","minRange","maxRange","navigatorWidth","toPixels","abs","toValue","currentRange","grabbedLeft","grabbedRight","fixedWidth","addMouseEvents","container","eventsToUnbind","onMouseMove","onMouseUp","getPartsEvents","renderTo","modifyNavigatorAxisExtremes","eventName","events","name","navigatorItem","shadesMousedown","navigatorPosition","ext","dragOffset","reversedExtremes","getUnionExtremes","handlesMousedown","baseXAxis","reverse","otherHandlePos","fixedExtreme","pageX","setTimeout","unionExtremes","triggerOp","Object","keys","unbind","removeBaseSeriesEvents","adaptToUpdatedData","updatedDataHandler","modifyBaseAxisExtremes","scrollbarEnabled","Boolean","xAxisIndex","yAxisIndex","baseXaxis","isDirtyBox","breaks","ordinal","keepOrdinalPadding","zoomEnabled","offsets","alignTicks","data","updateNavigatorSeries","unbindRedraw","scrollTrackWidth","valueRange","addBaseSeriesEvents","addChartEvents","returnFalseOnNoBaseSeries","ret","baseAxis","navAxis","navAxisOptions","baseAxisOptions","baseSeriesOptions","s","showInNavigator","navSeriesMixin","enableMouseTracking","padXAxis","showInLegend","stacking","states","inactive","navSeries","base","baseOptions","mergedNavSeriesOptions","chartNavigatorSeriesOptions","baseNavigatorOptions","linkedNavSeries","userNavOptions","visible","plotOptions","navigatorSeriesData","hasNavigatorData","slice","initSeries","userSeriesOptions","colors","setVisible","remove","getBaseSeriesMin","currentSeriesMin","reduce","xData","baseExtremes","baseMin","baseMax","baseDataMin","baseDataMax","stickToMin","stickToMax","hasSetExtremes","unmutable","eventArgs","Number","MAX_VALUE","userMin","userMax","shouldStickToMax","shouldStickToMin","pointStart","setData","xDataMin","marginName","axes","coll","applyRadius","prevSeg","nextSeg","x1","y1","x2","y2","directionX","directionY","getLinkPath","pathParams","parentVisible","straight","curved","PathUtilities","findLastObstacleBefore","startIx","right","cmp","findObstacleFromPoint","obstacle","pathFromSegments","segments","start","end","limitObstacleToBounds","bounds","simpleConnect","startObstacleIx","endObstacleIx","endSegment","dir","startObstacle","waypoint","useMax","endPoint","copyFromPoint","fromKey","toKey","getMeOut","prevWaypoint","waypoint2","fastAvoid","dirIsX","endSegments","metrics","softMinX","maxWidth","softMaxX","softMinY","maxHeight","softMaxY","extractedEndPoint","forceObstacleBreak","pivotPoint","directionIsX","firstPoint","lastPoint","highestPoint","lowestPoint","searchDirection","getDodgeDirection","softBounds","soft","hard","toPointMax","toPointMin","maxOutOfSoftBounds","minOutOfSoftBounds","maxOutOfHardBounds","minOutOfHardBounds","minDistance","maxDistance","minPivot","maxPivot","extractFromObstacle","goalPoint","clearPathTo","pivot","waypointUseMax","envelopingObstacle","secondEnvelopingObstacle","envelopWaypoint","obstacleMargin","inside","ConnectorsDefaults","ConnectionComposition","getPointBB","shapeArgs","bb","graphic","getBBox","plotX","plotY","pointGetPathfinderAnchorPoint","markerOptions","pointGetRadiansToVector","v1","v2","atan2","pointGetMarkerVector","markerRadius","twoPI","PI","rectWidth","rectHeight","rAtan","rectHalfWidth","rectHalfHeight","rectHorizontalCenter","rectVerticalCenter","edgePoint","theta","tanTheta","leftOrRightRegion","xFactor","yFactor","tan","cos","sin","PathfinderClass","PointClass","pointProto","acc","Connection","PathfinderAlgorithms","PathfinderComposition","Point","Pathfinder","connections","deferRender","oldConnections","points","ganttPointOptions","dependency","connect","connects","isInside","j","k","found","lenOld","lenNew","oldCon","newCon","renderConnections","conns","pathfinderRemoveRenderEvent","calculatedMargin","sLen","pLen","sort","calculateObstacleMargin","onstacleDistance","distances","calculateObstacleDistance","bbMargin","yOverlap","xOverlap","xDistance","yDistance","xCenter","yCenter","lang","rangeSelectorZoom","rangeSelectorFrom","rangeSelectorTo","allButtonsEnabled","buttonSpacing","dropdown","buttonTheme","padding","inputBoxBorderColor","inputBoxHeight","inputBoxWidth","inputDateFormat","inputDateParser","inputEditDateFormat","inputEnabled","inputPosition","inputSpacing","selected","buttonPosition","inputStyle","labelStyle","RangeSelectorDefaults","RangeSelectorConstructor","chartDestroyEvents","axisMinFromRange","rangeOptions","getTrueRange","count","timeName","date","basePeriod","set","getTime","MIN_VALUE","_offsetMin","onChartAfterGetContainer","deferredYTDClick","clickButton","updateNames","setScale","getAxisMargins","extraTopMargin","alignTo","display","spacingBox","placed","onChartDestroy","iEnd","splice","onChartGetMargins","rangeSelectorHeight","marginBottom","onChartRender","optionsRangeSelector","extraBottomMarginWas","extraTopMarginWas","RangeSelectorClass","minFromRange","RangeSelectorComposition","SVGElement","createElement","discardElement","pad","pInt","RangeSelector","buttonOptions","defaultButtons","initialButtonGroupWidth","baseXAxisOptions","_range","rangeMin","minSetting","rangeSetting","ctx","ytdExtremes","addOffsetMin","setSelected","forcedDataGrouping","setDataGrouping","frozenStates","preserveDataGrouping","getYTDExtremes","useUTC","_offsetMax","selectedIndex","rangeSelectorButton","selectedOption","blurInputs","minInput","maxInput","blur","computeButtonRange","updateButtonStates","actualRange","hasNoData","hasVisibleSeries","day","ytdMin","ytdMax","selectedExists","isSelectedTooGreat","button","offsetRange","isSelected","isTooGreatRange","isTooSmallRange","state","isYTDButNotSelected","isAllButAlreadyShowingAll","isSameRange","month","year","disable","select","setState","disabled","fixedTimes","millisecond","second","minute","hour","week","offsetMin","offsetMax","getInputValue","input","defaultInputDateParser","setInputValue","inputTime","dateBox","minDateBox","maxDateBox","hcTimeAttr","getAttribute","updatedTime","previousTime","setAttribute","inputTypeFormats","setInputExtremes","showInput","inputGroup","isTextInput","border","offsetWidth","offsetHeight","hideInput","inputDate","split","join","str","isSafari","lastIndexOf","getTimezoneOffset","parts","UTC","drawInput","div","chartStyle","isMin","updateExtremes","chartAxis","on","focus","preferredInputType","ms","some","char","boxShadow","textAlign","fontFamily","onfocus","onblur","doc","activeElement","keyDown","onchange","onkeypress","keyCode","onkeydown","onkeyup","getPosition","buttonTop","inputTop","startOfYear","ts","inputsZIndex","renderButtons","parentNode","insertBefore","minElems","minLabel","maxElems","maxLabel","alignElements","buttonGroup","isMS","currentButtonIndex","zoomText","paddingLeft","paddingRight","textContent","textStr","callDefaultEvent","buttonEvents","click","isActive","hover","navButtonOptions","exporting","navigation","getXOffsetForExportButton","titleCollision","positionButtons","xOffsetForExportButton","alignButtonGroup","hasLoaded","handleCollision","alignTranslateY","alignAttr","groupHeight","marginTop","buttonLeft","maxButtonWidth","buttonWidth","bBox","groupsOverlap","buttonGroupWidth","inputGroupX","alignOptions","inputGroupWidth","buttonGroupX","moveInputsDown","collapseButtons","expandButtons","isCollapsed","userButtonTheme","getAttribs","hasActiveButton","showDropdown","hideDropdown","hasVisibleDropdown","rangeSelectorGroup","yPosition","buttonPositionY","inputPositionY","subtitle","rSelector","key","HTMLElement","scrollablePlotArea","minHeight","chartAdjustHeight","redrawTrigger","initiatedScale","brokenAxis","unitLength","tickInterval","diff","scrollablePixelsY","setSize","clipRect","sharedClipKey","sharedClips","adjustHeight","isObject","colorByPoint","amount","partialFill","whiteSpace","tooltip","headerFormat","pointFormat","borderRadius","column","pointClass","ColumnPoint","XRangePoint","getColorByCategory","colorCount","resolveColor","arguments","drawPoint","getAnimationVerb","getLabelConfig","cfg","yCats","yCategory","category","isValid","ttBelow","tooltipDateKeys","XRangeSeriesDefaults","noop","ColumnSeries","relativeLength","onAxisAfterGetSeriesExtremes","modMax","x2Data","XRangeSeries","getColumnMetrics","swapAxes","cropData","yData","crop","findPointIndex","pointIndex","cropStart","touched","cropped","alignDataLabel","oldPlotX","dlBox","centerX","dataLabel","translatePoint","columnMetrics","minPointLength","oldColWidth","seriesXOffset","pointXOffset","posX","plotX2","borderWidth","crisper","widthDifference","pointHeight","dlLeft","dlRight","dlWidth","clipRectWidth","pointWidth","pointPlacement","tooltipPos","xIndex","yIndex","tooltipYOffset","partShapeArgs","clipRectArgs","seriesOpts","shapeType","pointState","stateOpts","pointStateVerb","pointAttr","pointAttribs","pfOptions","isNull","getClassName","partRect","partialClipRect","clip","shadow","brighten","drawPoints","pointCount","animationLimit","isPointInside","pointArrayMap","getExtremesFromAll","parallelArrays","requireSorting","autoIncrement","buildKDTree","registerSeriesType","xrange","GanttPoint","setGanttPointAliases","addIfExists","completed","applyOptions","ganttPoint","milestone","grouping","pointFormatter","formats","tooltipOptions","dateTimeLabelFormats","startOfWeek","ttOptions","xDateFormat","retVal","tooltipFormatter","getDateFormat","closestPointRange","StackItem","BrokenAxis","setBreaks","hasBreaks","onAxisAfterSetTickPositions","tickPositions","info","newPositions","isInAnyBreak","Additions","onSeriesAfterGeneratePoints","isDirty","connectNulls","nullGap","isPointInBreak","onSeriesAfterRender","drawBreaks","seriesDrawBreaks","breakArray","breaksOutOfRange","brk","isOut","otherBreak","toUpperCase","seriesGappedPath","currentDataGrouping","groupingSize","gapSize","current","next","gapUnit","basePointRange","xRange","stack","stacks","stackKey","stackLabels","total","getGraphPath","seriesProto","gappedPath","isInBreak","repeat","test","inclusive","lin2Val","nval","val2Lin","findBreakAt","testKeep","inbrk","keep","showPoints","forceRedraw","val2lin","lin2val","eventArguments","axisBreak","setAxisTranslation","breakArrayT","pointRangePadding","inBrk","move","breakSize","transA","minPixelPadding","minPointOffset","GridAxisSide","dateFormats","timeUnits","getMaxLabelDimensions","ticks","dimensions","pos","tick","labelHeight","labelWidth","textPxLength","treeGrid","mapOfPosToGridNode","treeDepth","indentation","wrapGetOffset","proceed","columnsFirst","side","isColumn","columns","getOffset","onAfterGetTitlePosition","gridOptions","axisTitle","axisHeight","axisLeft","axisTop","axisWidth","tickSize","titleWidth","xOption","yOption","titleMargin","titleFontSize","fontMetrics","f","crispCorr","offAxis","bottom","titlePosition","onAfterInit","applyGridOptions","showLastLabel","labelRotation","minTickInterval","columnIndex","columnOptions","onAfterRender","firstTick","slotWidth","maxLabelDimensions","rightWall","isOuterAxis","axisLine","linePath","getLinePath","startPoint","distance","marginRight","upperBorderEndPoint","upperBorderPath","lowerBorderEndPoint","tickmarkOffset","lowerBorderStartPoint","lowerBorderPath","upperBorder","renderBorder","lowerBorder","axisLineExtra","showAxis","hasRendered","linkedParent","tickMark","lastTick","hiddenLabels","pop","hiddenMarks","mark","isLast","onAfterSetAxisTranslation","tickInfo","userLabels","unitName","onAfterSetOptions","gridAxisOptions","list","reserveSpace","textOverflow","tickPositioner","parentInfo","unitIdx","unit","counts","unitRange","getTimeTicks","onAfterSetOptions2","onAfterSetScale","onAfterTickSize","labelPadding","cellHeight","onDestroy","keepEvents","onInit","tickColor","GridAxisAdditions","onTickAfterGetLabelPosition","labelOpts","tickPos","nextTickPos","lblMetrics","useHTML","lines","onTickLabelFormat","pointCopy","isFirst","p","is","gantt","onTrimTicks","categoryAxis","firstPos","secondPos","lastPos","beforeLastPos","linkedMin","linkedMax","startLessThanMin","endMoreThanMin","startLessThanMax","endMoreThanMax","isLinked","wrapUnsquish","Array","parentAxis","thisIndex","lastIndex","otherAxis","extraBorderLine","axisGroup","E","timestamp","charAt","W","unitsToOmit","firstDay","thursday","valueOf","firstThursday","toString","TickClass","getNode","parent","level","mapOfIdToChildren","after","before","node","depth","descendants","children","child","childStart","NaN","childEnd","getTree","getListOfParents","ids","listOfParents","prev","curr","adoptedByRoot","orphan","parentExcluded","onTickInit","TreeGridTickAdditions","wrapGetLabelPosition","labelOptions","lbOptions","isTreeGrid","result","wrapRenderLabel","collapsed","tickGrid","tickOptions","icon","labelIcon","labelElement","axisGrid","axisOptions","symbolOptions","hasDescendants","isTreeGridElement","shouldRender","prefixClassName","prefixLevelClass","removeClass","RegExp","renderLabelIcon","params","isNew","labelBox","xy","iconCenter","styles","parentGroup","object","attachedTreeGridEvents","textDecoration","onTickHoverExit","toggleCollapse","tickProto","collapse","expand","posMappedNodes","getColor","colorIndexByPoint","mapOptionsToLevel","parentColor","parentColorIndex","siblings","chartOptionsChart","variateColor","colorVariation","getLevelOptions","defaults","converted","levels","item","levelIsConstant","setTreeValues","tree","idRoot","mapIdToNode","nodeRoot","optionsPoint","childrenTotal","levelDynamic","newOptions","isLeaf","updateRootId","rootId","rootNode","GridAxis","Tree","TreeGridTick","TU","TickConstructor","isString","getBreakFromNode","collapseEnd","collapseStart","getTreeGridFromData","uniqueNames","numberOfSeries","collapsedNodes","mapOfIdToNode","uniqueNamesEnabled","posIterator","gridNode","parentGridNode","nodes","updateYValuesAndTickPos","setValues","seriesIndex","onBeforeRender","target","isDirtyData","arr","optionsToObject","hasNames","axisData","wrapGenerateTick","levelOptions","parameters","addLabel","wrapInit","TreeGridAxisAdditions","n","fontWeight","wrapSetTickInterval","getTickPositions","linkedParentExtremes","wrapRedraw","axisProps","utils","setCollapsedStatus","dataPoint","roundedMin","roundedMax","GanttSeriesDefaults","StaticScale","TreeGridAxis","Series","GanttSeries","cutOff","diamondShape","diamond","ArrowSymbols","CurrentDateIndication","G","SVGRenderer","PlotLineOrBand","Tick"],"mappings":"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"}