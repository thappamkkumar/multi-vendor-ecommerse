{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.3.0 (2024-01-10)\n *\n * Sankey diagram module\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/sankey', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/NodesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: seriesProto, prototype: { pointClass: { prototype: pointProto } } } } = SeriesRegistry;\n        const { defined, extend, find, merge, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var NodesComposition;\n        (function (NodesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(PointClass, SeriesClass) {\n                const pointProto = PointClass.prototype, seriesProto = SeriesClass.prototype;\n                pointProto.setNodeState = setNodeState;\n                pointProto.setState = setNodeState;\n                pointProto.update = updateNode;\n                seriesProto.destroy = destroy;\n                seriesProto.setData = setData;\n                return SeriesClass;\n            }\n            NodesComposition.compose = compose;\n            /**\n             * Create a single node that holds information on incoming and outgoing\n             * links.\n             * @private\n             */\n            function createNode(id) {\n                const PointClass = this.pointClass, findById = (nodes, id) => find(nodes, (node) => node.id === id);\n                let node = findById(this.nodes, id), options;\n                if (!node) {\n                    options = this.options.nodes && findById(this.options.nodes, id);\n                    const newNode = new PointClass(this, extend({\n                        className: 'highcharts-node',\n                        isNode: true,\n                        id: id,\n                        y: 1 // Pass isNull test\n                    }, options));\n                    newNode.linksTo = [];\n                    newNode.linksFrom = [];\n                    /**\n                     * Return the largest sum of either the incoming or outgoing links.\n                     * @private\n                     */\n                    newNode.getSum = function () {\n                        let sumTo = 0, sumFrom = 0;\n                        newNode.linksTo.forEach((link) => {\n                            sumTo += link.weight || 0;\n                        });\n                        newNode.linksFrom.forEach((link) => {\n                            sumFrom += link.weight || 0;\n                        });\n                        return Math.max(sumTo, sumFrom);\n                    };\n                    /**\n                     * Get the offset in weight values of a point/link.\n                     * @private\n                     */\n                    newNode.offset = function (point, coll) {\n                        let offset = 0;\n                        for (let i = 0; i < newNode[coll].length; i++) {\n                            if (newNode[coll][i] === point) {\n                                return offset;\n                            }\n                            offset += newNode[coll][i].weight;\n                        }\n                    };\n                    // Return true if the node has a shape, otherwise all links are\n                    // outgoing.\n                    newNode.hasShape = function () {\n                        let outgoing = 0;\n                        newNode.linksTo.forEach((link) => {\n                            if (link.outgoing) {\n                                outgoing++;\n                            }\n                        });\n                        return (!newNode.linksTo.length ||\n                            outgoing !== newNode.linksTo.length);\n                    };\n                    newNode.index = this.nodes.push(newNode) - 1;\n                    node = newNode;\n                }\n                node.formatPrefix = 'node';\n                // for use in formats\n                node.name = node.name || node.options.id || '';\n                // Mass is used in networkgraph:\n                node.mass = pick(\n                // Node:\n                node.options.mass, node.options.marker && node.options.marker.radius, \n                // Series:\n                this.options.marker && this.options.marker.radius, \n                // Default:\n                4);\n                return node;\n            }\n            NodesComposition.createNode = createNode;\n            /**\n             * Destroy alll nodes and links.\n             * @private\n             */\n            function destroy() {\n                // Nodes must also be destroyed (#8682, #9300)\n                this.data = []\n                    .concat(this.points || [], this.nodes);\n                return seriesProto.destroy.apply(this, arguments);\n            }\n            NodesComposition.destroy = destroy;\n            /**\n             * Extend generatePoints by adding the nodes, which are Point objects but\n             * pushed to the this.nodes array.\n             * @private\n             */\n            function generatePoints() {\n                const chart = this.chart, nodeLookup = {};\n                seriesProto.generatePoints.call(this);\n                if (!this.nodes) {\n                    this.nodes = []; // List of Point-like node items\n                }\n                this.colorCounter = 0;\n                // Reset links from previous run\n                this.nodes.forEach((node) => {\n                    node.linksFrom.length = 0;\n                    node.linksTo.length = 0;\n                    node.level = node.options.level;\n                });\n                // Create the node list and set up links\n                this.points.forEach((point) => {\n                    if (defined(point.from)) {\n                        if (!nodeLookup[point.from]) {\n                            nodeLookup[point.from] = this.createNode(point.from);\n                        }\n                        nodeLookup[point.from].linksFrom.push(point);\n                        point.fromNode = nodeLookup[point.from];\n                        // Point color defaults to the fromNode's color\n                        if (chart.styledMode) {\n                            point.colorIndex = pick(point.options.colorIndex, nodeLookup[point.from].colorIndex);\n                        }\n                        else {\n                            point.color =\n                                point.options.color || nodeLookup[point.from].color;\n                        }\n                    }\n                    if (defined(point.to)) {\n                        if (!nodeLookup[point.to]) {\n                            nodeLookup[point.to] = this.createNode(point.to);\n                        }\n                        nodeLookup[point.to].linksTo.push(point);\n                        point.toNode = nodeLookup[point.to];\n                    }\n                    point.name = point.name || point.id; // for use in formats\n                }, this);\n                // Store lookup table for later use\n                this.nodeLookup = nodeLookup;\n            }\n            NodesComposition.generatePoints = generatePoints;\n            /**\n             * Destroy all nodes on setting new data\n             * @private\n             */\n            function setData() {\n                if (this.nodes) {\n                    this.nodes.forEach((node) => {\n                        node.destroy();\n                    });\n                    this.nodes.length = 0;\n                }\n                seriesProto.setData.apply(this, arguments);\n            }\n            /**\n             * When hovering node, highlight all connected links. When hovering a link,\n             * highlight all connected nodes.\n             * @private\n             */\n            function setNodeState(state) {\n                const args = arguments, others = this.isNode ? this.linksTo.concat(this.linksFrom) :\n                    [this.fromNode, this.toNode];\n                if (state !== 'select') {\n                    others.forEach((linkOrNode) => {\n                        if (linkOrNode && linkOrNode.series) {\n                            pointProto.setState.apply(linkOrNode, args);\n                            if (!linkOrNode.isNode) {\n                                if (linkOrNode.fromNode.graphic) {\n                                    pointProto.setState.apply(linkOrNode.fromNode, args);\n                                }\n                                if (linkOrNode.toNode && linkOrNode.toNode.graphic) {\n                                    pointProto.setState.apply(linkOrNode.toNode, args);\n                                }\n                            }\n                        }\n                    });\n                }\n                pointProto.setState.apply(this, args);\n            }\n            NodesComposition.setNodeState = setNodeState;\n            /**\n             * When updating a node, don't update `series.options.data`, but\n             * `series.options.nodes`\n             * @private\n             */\n            function updateNode(options, redraw, animation, runEvent) {\n                const nodes = this.series.options.nodes, data = this.series.options.data, dataLength = data && data.length || 0, linkConfig = data && data[this.index];\n                pointProto.update.call(this, options, this.isNode ? false : redraw, // Hold the redraw for nodes\n                animation, runEvent);\n                if (this.isNode) {\n                    // this.index refers to `series.nodes`, not `options.nodes` array\n                    const nodeIndex = (nodes || [])\n                        .reduce(// Array.findIndex needs a polyfill\n                    (prevIndex, n, index) => (this.id === n.id ? index : prevIndex), -1), \n                    // Merge old config with new config. New config is stored in\n                    // options.data, because of default logic in point.update()\n                    nodeConfig = merge(nodes && nodes[nodeIndex] || {}, data && data[this.index] || {});\n                    // Restore link config\n                    if (data) {\n                        if (linkConfig) {\n                            data[this.index] = linkConfig;\n                        }\n                        else {\n                            // Remove node from config if there's more nodes than links\n                            data.length = dataLength;\n                        }\n                    }\n                    // Set node config\n                    if (nodes) {\n                        if (nodeIndex >= 0) {\n                            nodes[nodeIndex] = nodeConfig;\n                        }\n                        else {\n                            nodes.push(nodeConfig);\n                        }\n                    }\n                    else {\n                        this.series.options.nodes = [nodeConfig];\n                    }\n                    if (pick(redraw, true)) {\n                        this.series.chart.redraw(animation);\n                    }\n                }\n            }\n            NodesComposition.updateNode = updateNode;\n        })(NodesComposition || (NodesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NodesComposition;\n    });\n    _registerModule(_modules, 'Series/Sankey/SankeyPoint.js', [_modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Point, SeriesRegistry, U) {\n        /* *\n         *\n         *  Sankey diagram module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class SankeyPoint extends ColumnSeries.prototype.pointClass {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            applyOptions(options, x) {\n                Point.prototype.applyOptions.call(this, options, x);\n                // Treat point.level as a synonym of point.column\n                if (defined(this.options.level)) {\n                    this.options.column = this.column = this.options.level;\n                }\n                return this;\n            }\n            /**\n             * @private\n             */\n            getClassName() {\n                return (this.isNode ? 'highcharts-node ' : 'highcharts-link ') +\n                    Point.prototype.getClassName.call(this);\n            }\n            /**\n             * If there are incoming links, place it to the right of the\n             * highest order column that links to this one.\n             *\n             * @private\n             */\n            getFromNode() {\n                const node = this;\n                let fromColumn = -1, fromNode;\n                for (let i = 0; i < node.linksTo.length; i++) {\n                    const point = node.linksTo[i];\n                    if (point.fromNode.column > fromColumn &&\n                        point.fromNode !== node // #16080\n                    ) {\n                        fromNode = point.fromNode;\n                        fromColumn = fromNode.column;\n                    }\n                }\n                return { fromNode, fromColumn };\n            }\n            /**\n             * Calculate node.column if it's not set by user\n             * @private\n             */\n            setNodeColumn() {\n                const node = this;\n                if (!defined(node.options.column)) {\n                    // No links to this node, place it left\n                    if (node.linksTo.length === 0) {\n                        node.column = 0;\n                    }\n                    else {\n                        node.column = node.getFromNode().fromColumn + 1;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            isValid() {\n                return this.isNode || typeof this.weight === 'number';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SankeyPoint;\n    });\n    _registerModule(_modules, 'Series/Sankey/SankeySeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Sankey diagram module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A sankey diagram is a type of flow diagram, in which the width of the\n         * link between two nodes is shown proportionally to the flow quantity.\n         *\n         * @sample highcharts/demo/sankey-diagram/\n         *         Sankey diagram\n         * @sample highcharts/plotoptions/sankey-inverted/\n         *         Inverted sankey diagram\n         * @sample highcharts/plotoptions/sankey-outgoing\n         *         Sankey diagram with outgoing links\n         *\n         * @extends      plotOptions.column\n         * @since        6.0.0\n         * @product      highcharts\n         * @excluding    animationLimit, boostThreshold, borderRadius,\n         *               crisp, cropThreshold, colorAxis, colorKey, depth, dragDrop,\n         *               edgeColor, edgeWidth, findNearestPointBy, grouping,\n         *               groupPadding, groupZPadding, maxPointWidth, negativeColor,\n         *               pointInterval, pointIntervalUnit, pointPadding,\n         *               pointPlacement, pointRange, pointStart, pointWidth,\n         *               shadow, softThreshold, stacking, threshold, zoneAxis,\n         *               zones, minPointLength, dataSorting, boostBlending\n         * @requires     modules/sankey\n         * @optionparent plotOptions.sankey\n         *\n         * @private\n         */\n        const SankeySeriesDefaults = {\n            borderWidth: 0,\n            colorByPoint: true,\n            /**\n             * Higher numbers makes the links in a sankey diagram or dependency\n             * wheelrender more curved. A `curveFactor` of 0 makes the lines\n             * straight.\n             *\n             * @private\n             */\n            curveFactor: 0.33,\n            /**\n             * Options for the data labels appearing on top of the nodes and links.\n             * For sankey charts, data labels are visible for the nodes by default,\n             * but hidden for links. This is controlled by modifying the\n             * `nodeFormat`, and the `format` that applies to links and is an empty\n             * string by default.\n             *\n             * @declare Highcharts.SeriesSankeyDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                enabled: true,\n                backgroundColor: 'none',\n                crop: false,\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _nodes_ in the sankey diagram. By\n                 * default the `nodeFormatter` returns `{point.name}`.\n                 *\n                 * @sample highcharts/plotoptions/sankey-link-datalabels/\n                 *         Node and link data labels\n                 *\n                 * @type {string}\n                 */\n                nodeFormat: void 0,\n                /**\n                 * Callback to format data labels for _nodes_ in the sankey diagram.\n                 * The `nodeFormat` option takes precedence over the\n                 * `nodeFormatter`.\n                 *\n                 * @type  {Highcharts.SeriesSankeyDataLabelsFormatterCallbackFunction}\n                 * @since 6.0.2\n                 */\n                nodeFormatter: function () {\n                    return this.point.name;\n                },\n                format: void 0,\n                /**\n                 * @type {Highcharts.SeriesSankeyDataLabelsFormatterCallbackFunction}\n                 */\n                formatter: function () {\n                    return;\n                },\n                inside: true\n            },\n            /**\n             * @default   true\n             * @extends   plotOptions.series.inactiveOtherPoints\n             * @private\n             */\n            inactiveOtherPoints: true,\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not node and link options.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {Array<*>}\n             * @since     7.1.0\n             * @apioption plotOptions.sankey.levels\n             */\n            /**\n             * Can set `borderColor` on all nodes which lay on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @apioption plotOptions.sankey.levels.borderColor\n             */\n            /**\n             * Can set `borderWidth` on all nodes which lay on the same level.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sankey.levels.borderWidth\n             */\n            /**\n             * Can set `color` on all nodes which lay on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption plotOptions.sankey.levels.color\n             */\n            /**\n             * Can set `colorByPoint` on all nodes which lay on the same level.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption plotOptions.sankey.levels.colorByPoint\n             */\n            /**\n             * Can set `dataLabels` on all points which lay on the same level.\n             *\n             * @extends   plotOptions.sankey.dataLabels\n             * @apioption plotOptions.sankey.levels.dataLabels\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sankey.levels.level\n             */\n            /**\n             * Can set `linkOpacity` on all points which lay on the same level.\n             *\n             * @type      {number}\n             * @default   0.5\n             * @apioption plotOptions.sankey.levels.linkOpacity\n             */\n            /**\n             * Can set `states` on all nodes and points which lay on the same level.\n             *\n             * @extends   plotOptions.sankey.states\n             * @apioption plotOptions.sankey.levels.states\n             */\n            /**\n             * Determines color mode for sankey links. Available options:\n             *\n             * - `from` color of the sankey link will be the same as the 'from node'\n             *\n             * - `gradient` color of the sankey link will be set to gradient between\n             * colors of 'from node' and 'to node'\n             *\n             * - `to` color of the sankey link will be same as the 'to node'.\n             *\n             * @sample highcharts/demo/vertical-sankey\n             *         Vertical sankey diagram with gradients\n             * @sample highcharts/series-sankey/link-color-mode\n             *         Sankey diagram with gradients and explanation\n             *\n             * @type      {('from'|'gradient'|'to')}\n             * @since     @next\n             */\n            linkColorMode: 'from',\n            /**\n             * Opacity for the links between nodes in the sankey diagram.\n             *\n             * @private\n             */\n            linkOpacity: 0.5,\n            /**\n             * Opacity for the nodes in the sankey diagram.\n             *\n             * @private\n             */\n            opacity: 1,\n            /**\n             * The minimal width for a line of a sankey. By default,\n             * 0 values are not shown.\n             *\n             * @sample highcharts/plotoptions/sankey-minlinkwidth\n             *         Sankey diagram with minimal link height\n             *\n             * @type      {number}\n             * @since     7.1.3\n             * @default   0\n             * @apioption plotOptions.sankey.minLinkWidth\n             *\n             * @private\n             */\n            minLinkWidth: 0,\n            /**\n             * Determines which side of the chart the nodes are to be aligned to. When\n             * the chart is inverted, `top` aligns to the left and `bottom` to the\n             * right.\n             *\n             * @sample highcharts/plotoptions/sankey-nodealignment\n             *         Node alignment demonstrated\n             *\n             * @type      {'top'|'center'|'bottom'}\n             * @apioption plotOptions.sankey.nodeAlignment\n             */\n            nodeAlignment: 'center',\n            /**\n             * The pixel width of each node in a sankey diagram or dependency wheel,\n             * or the height in case the chart is inverted.\n             *\n             * @private\n             */\n            nodeWidth: 20,\n            /**\n             * The padding between nodes in a sankey diagram or dependency wheel, in\n             * pixels.\n             *\n             * If the number of nodes is so great that it is possible to lay them\n             * out within the plot area with the given `nodePadding`, they will be\n             * rendered with a smaller padding as a strategy to avoid overflow.\n             *\n             * @private\n             */\n            nodePadding: 10,\n            showInLegend: false,\n            states: {\n                hover: {\n                    /**\n                     * Opacity for the links between nodes in the sankey diagram in\n                     * hover mode.\n                     */\n                    linkOpacity: 1,\n                    /**\n                     * Opacity for the nodes in the sankey diagram in hover mode.\n                     */\n                    opacity: 1\n                },\n                /**\n                 * The opposite state of a hover for a single point node/link.\n                 *\n                 * @declare Highcharts.SeriesStatesInactiveOptionsObject\n                 */\n                inactive: {\n                    /**\n                     * Opacity for the links between nodes in the sankey diagram in\n                     * inactive mode.\n                     */\n                    linkOpacity: 0.1,\n                    /**\n                     * Opacity of the nodes in the sankey diagram in inactive mode.\n                     */\n                    opacity: 0.1,\n                    /**\n                     * Animation when not hovering over the marker.\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @apioption plotOptions.series.states.inactive.animation\n                     */\n                    animation: {\n                        /** @internal */\n                        duration: 50\n                    }\n                }\n            },\n            tooltip: {\n                /**\n                 * A callback for defining the format for _nodes_ in the chart's\n                 * tooltip, as opposed to links.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.SankeyNodeObject>}\n                 * @since     6.0.2\n                 * @apioption plotOptions.sankey.tooltip.nodeFormatter\n                 */\n                /**\n                 * Whether the tooltip should follow the pointer or stay fixed on\n                 * the item.\n                 */\n                followPointer: true,\n                headerFormat: '<span style=\"font-size: 0.8em\">{series.name}</span><br/>',\n                pointFormat: '{point.fromNode.name} \\u2192 {point.toNode.name}: <b>{point.weight}</b><br/>',\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _nodes_ in tooltip of a diagram\n                 * series, as opposed to links.\n                 */\n                nodeFormat: '{point.name}: <b>{point.sum}</b><br/>'\n            }\n        };\n        /**\n         * A `sankey` series. If the [type](#series.sankey.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sankey\n         * @excluding animationLimit, boostBlending, boostThreshold, borderColor,\n         *            borderRadius, borderWidth, crisp, cropThreshold, dataParser,\n         *            dataURL, depth, dragDrop, edgeColor, edgeWidth,\n         *            findNearestPointBy, getExtremesFromAll, grouping, groupPadding,\n         *            groupZPadding, label, maxPointWidth, negativeColor, pointInterval,\n         *            pointIntervalUnit, pointPadding, pointPlacement, pointRange,\n         *            pointStart, pointWidth, shadow, softThreshold, stacking,\n         *            threshold, zoneAxis, zones, dataSorting\n         * @product   highcharts\n         * @requires  modules/sankey\n         * @apioption series.sankey\n         */\n        /**\n         * A collection of options for the individual nodes. The nodes in a sankey\n         * diagram are auto-generated instances of `Highcharts.Point`, but options can\n         * be applied here and linked by the `id`.\n         *\n         * @sample highcharts/css/sankey/\n         *         Sankey diagram with node options\n         *\n         * @declare   Highcharts.SeriesSankeyNodesOptionsObject\n         * @type      {Array<*>}\n         * @product   highcharts\n         * @apioption series.sankey.nodes\n         */\n        /**\n         * The id of the auto-generated node, refering to the `from` or `to` setting of\n         * the link.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.sankey.nodes.id\n         */\n        /**\n         * The color of the auto generated node.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts\n         * @apioption series.sankey.nodes.color\n         */\n        /**\n         * The color index of the auto generated node, especially for use in styled\n         * mode.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.sankey.nodes.colorIndex\n         */\n        /**\n         * An optional column index of where to place the node. The default behaviour is\n         * to place it next to the preceding node. Note that this option name is\n         * counter intuitive in inverted charts, like for example an organization chart\n         * rendered top down. In this case the \"columns\" are horizontal.\n         *\n         * @sample highcharts/plotoptions/sankey-node-column/\n         *         Specified node column\n         *\n         * @type      {number}\n         * @since     6.0.5\n         * @product   highcharts\n         * @apioption series.sankey.nodes.column\n         */\n        /**\n         * Individual data label for each node. The options are the same as\n         * the ones for [series.sankey.dataLabels](#series.sankey.dataLabels).\n         *\n         * @extends   plotOptions.sankey.dataLabels\n         * @apioption series.sankey.nodes.dataLabels\n         */\n        /**\n         * An optional level index of where to place the node. The default behaviour is\n         * to place it next to the preceding node. Alias of `nodes.column`, but in\n         * inverted sankeys and org charts, the levels are laid out as rows.\n         *\n         * @type      {number}\n         * @since     7.1.0\n         * @product   highcharts\n         * @apioption series.sankey.nodes.level\n         */\n        /**\n         * The name to display for the node in data labels and tooltips. Use this when\n         * the name is different from the `id`. Where the id must be unique for each\n         * node, this is not necessary for the name.\n         *\n         * @sample highcharts/css/sankey/\n         *         Sankey diagram with node options\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.sankey.nodes.name\n         */\n        /**\n         * This option is deprecated, use\n         * [offsetHorizontal](#series.sankey.nodes.offsetHorizontal) and\n         * [offsetVertical](#series.sankey.nodes.offsetVertical) instead.\n         *\n         * In a horizontal layout, the vertical offset of a node in terms of weight.\n         * Positive values shift the node downwards, negative shift it upwards. In a\n         * vertical layout, like organization chart, the offset is horizontal.\n         *\n         * If a percantage string is given, the node is offset by the percentage of the\n         * node size plus `nodePadding`.\n         *\n         * @deprecated\n         * @type      {number|string}\n         * @default   0\n         * @since     6.0.5\n         * @product   highcharts\n         * @apioption series.sankey.nodes.offset\n         */\n        /**\n         * The horizontal offset of a node. Positive values shift the node right,\n         * negative shift it left.\n         *\n         * If a percantage string is given, the node is offset by the percentage of the\n         * node size.\n         *\n         * @sample highcharts/plotoptions/sankey-node-column/\n         *         Specified node offset\n         *\n         * @type      {number|string}\n         * @since 9.3.0\n         * @product   highcharts\n         * @apioption series.sankey.nodes.offsetHorizontal\n         */\n        /**\n         * The vertical offset of a node. Positive values shift the node down,\n         * negative shift it up.\n         *\n         * If a percantage string is given, the node is offset by the percentage of the\n         * node size.\n         *\n         * @sample highcharts/plotoptions/sankey-node-column/\n         *         Specified node offset\n         *\n         * @type      {number|string}\n         * @since 9.3.0\n         * @product   highcharts\n         * @apioption series.sankey.nodes.offsetVertical\n         */\n        /**\n         * An array of data points for the series. For the `sankey` series type,\n         * points can be given in the following way:\n         *\n         * An array of objects with named values. The following snippet shows only a\n         * few settings, see the complete options set below. If the total number of data\n         * points exceeds the series' [turboThreshold](#series.area.turboThreshold),\n         * this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         from: 'Category1',\n         *         to: 'Category2',\n         *         weight: 2\n         *     }, {\n         *         from: 'Category1',\n         *         to: 'Category3',\n         *         weight: 5\n         *     }]\n         *  ```\n         *\n         *  When you provide the data as tuples, the keys option has to be set as well.\n         *\n         *  ```js\n         *     keys: ['from', 'to', 'weight'],\n         *     data: [\n         *         ['Category1', 'Category2', 2],\n         *         ['Category1', 'Category3', 5]\n         *     ]\n         *  ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @declare   Highcharts.SeriesSankeyPointOptionsObject\n         * @type      {Array<*>|Array<Array<(string|number)>>}\n         * @extends   series.line.data\n         * @excluding dragDrop, drilldown, marker, x, y\n         * @product   highcharts\n         * @apioption series.sankey.data\n         */\n        /**\n         * The color for the individual _link_. By default, the link color is the same\n         * as the node it extends from. The `series.fillOpacity` option also applies to\n         * the points, so when setting a specific link color, consider setting the\n         * `fillOpacity` to 1.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts\n         * @apioption series.sankey.data.color\n         */\n        /**\n         * @type      {Highcharts.SeriesSankeyDataLabelsOptionsObject|Array<Highcharts.SeriesSankeyDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.sankey.data.dataLabels\n         */\n        /**\n         * The node that the link runs from.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.sankey.data.from\n         */\n        /**\n         * The node that the link runs to.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.sankey.data.to\n         */\n        /**\n         * Whether the link goes out of the system.\n         *\n         * @sample highcharts/plotoptions/sankey-outgoing\n         *         Sankey chart with outgoing links\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   highcharts\n         * @apioption series.sankey.data.outgoing\n         */\n        /**\n         * The weight of the link.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.sankey.data.weight\n         */\n        ''; // adds doclets above to transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SankeySeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Sankey/SankeyColumnComposition.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Sankey diagram module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, pushUnique, relativeLength } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var SankeyColumnComposition;\n        (function (SankeyColumnComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * SankeyColumn Composition\n             * @private\n             * @function Highcharts.SankeyColumn#compose\n             *\n             * @param {Array<SankeyPoint>} points\n             * The array of nodes\n             * @param {SankeySeries} series\n             * Series connected to column\n             * @return {ArrayComposition} SankeyColumnArray\n             */\n            function compose(points, series) {\n                const sankeyColumnArray = points;\n                sankeyColumnArray.sankeyColumn =\n                    new SankeyColumnAdditions(sankeyColumnArray, series);\n                return sankeyColumnArray;\n            }\n            SankeyColumnComposition.compose = compose;\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            class SankeyColumnAdditions {\n                /* *\n                 *\n                 *  Constructor\n                 *\n                 * */\n                constructor(points, series) {\n                    this.points = points;\n                    this.series = series;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Calculate translation factor used in column and nodes distribution\n                 * @private\n                 * @function Highcharts.SankeyColumn#getTranslationFactor\n                 *\n                 * @param {SankeySeries} series\n                 * The Series\n                 * @return {number} TranslationFactor\n                 * Translation Factor\n                 */\n                getTranslationFactor(series) {\n                    const column = this.points, nodes = column.slice(), chart = series.chart, minLinkWidth = series.options.minLinkWidth || 0;\n                    let skipPoint, factor = 0, i, remainingHeight = ((chart.plotSizeY || 0) -\n                        (series.options.borderWidth || 0) -\n                        (column.length - 1) * series.nodePadding);\n                    // Because the minLinkWidth option doesn't obey the direct\n                    // translation, we need to run translation iteratively, check\n                    // node heights, remove those nodes affected by minLinkWidth,\n                    // check again, etc.\n                    while (column.length) {\n                        factor = remainingHeight / column.sankeyColumn.sum();\n                        skipPoint = false;\n                        i = column.length;\n                        while (i--) {\n                            if (column[i].getSum() * factor < minLinkWidth) {\n                                column.splice(i, 1);\n                                remainingHeight =\n                                    Math.max(0, remainingHeight - minLinkWidth);\n                                skipPoint = true;\n                            }\n                        }\n                        if (!skipPoint) {\n                            break;\n                        }\n                    }\n                    // Re-insert original nodes\n                    column.length = 0;\n                    for (const node of nodes) {\n                        column.push(node);\n                    }\n                    return factor;\n                }\n                /**\n                 * Get the top position of the column in pixels\n                 * @private\n                 * @function Highcharts.SankeyColumn#top\n                 *\n                 * @param {number} factor\n                 * The Translation Factor\n                 * @return {number} top\n                 * The top position of the column\n                 */\n                top(factor) {\n                    const series = this.series, nodePadding = series.nodePadding, height = this.points.reduce((height, node) => {\n                        if (height > 0) {\n                            height += nodePadding;\n                        }\n                        const nodeHeight = Math.max(node.getSum() * factor, series.options.minLinkWidth || 0);\n                        height += nodeHeight;\n                        return height;\n                    }, 0);\n                    // Node alignment option handling #19096\n                    return {\n                        top: 0,\n                        center: 0.5,\n                        bottom: 1\n                    }[series.options.nodeAlignment || 'center'] * ((series.chart.plotSizeY || 0) - height);\n                }\n                /**\n                 * Get the left position of the column in pixels\n                 * @private\n                 * @function Highcharts.SankeyColumn#top\n                 *\n                 * @param {number} factor\n                 * The Translation Factor\n                 * @return {number} left\n                 * The left position of the column\n                 */\n                left(factor) {\n                    const series = this.series, chart = series.chart, equalNodes = series.options.equalNodes, maxNodesLength = (chart.inverted ? chart.plotHeight : chart.plotWidth), nodePadding = series.nodePadding, width = this.points.reduce((width, node) => {\n                        if (width > 0) {\n                            width += nodePadding;\n                        }\n                        const nodeWidth = equalNodes ?\n                            maxNodesLength / node.series.nodes.length -\n                                nodePadding :\n                            Math.max(node.getSum() * factor, series.options.minLinkWidth || 0);\n                        width += nodeWidth;\n                        return width;\n                    }, 0);\n                    return ((chart.plotSizeX || 0) - Math.round(width)) / 2;\n                }\n                /**\n                 * Calculate sum of all nodes inside specific column\n                 * @private\n                 * @function Highcharts.SankeyColumn#sum\n                 *\n                 * @param {ArrayComposition} this\n                 * Sankey Column Array\n                 *\n                 * @return {number} sum\n                 * Sum of all nodes inside column\n                 */\n                sum() {\n                    return this.points.reduce((sum, node) => (sum + node.getSum()), 0);\n                }\n                /**\n                 * Get the offset in pixels of a node inside the column\n                 * @private\n                 * @function Highcharts.SankeyColumn#offset\n                 *\n                 * @param {SankeyPoint} node\n                 * Sankey node\n                 * @param {number} factor\n                 * Translation Factor\n                 * @return {number} offset\n                 * Offset of a node inside column\n                 */\n                offset(node, factor) {\n                    const column = this.points, series = this.series, nodePadding = series.nodePadding;\n                    let offset = 0, totalNodeOffset;\n                    if (series.is('organization') && node.hangsFrom) {\n                        return {\n                            absoluteTop: node.hangsFrom.nodeY\n                        };\n                    }\n                    for (let i = 0; i < column.length; i++) {\n                        const sum = column[i].getSum();\n                        const height = Math.max(sum * factor, series.options.minLinkWidth || 0);\n                        const directionOffset = node.options[series.chart.inverted ?\n                            'offsetHorizontal' :\n                            'offsetVertical'], optionOffset = node.options.offset || 0;\n                        if (sum) {\n                            totalNodeOffset = height + nodePadding;\n                        }\n                        else {\n                            // If node sum equals 0 nodePadding is missed #12453\n                            totalNodeOffset = 0;\n                        }\n                        if (column[i] === node) {\n                            return {\n                                relativeTop: offset + (defined(directionOffset) ?\n                                    // directionOffset is a percent\n                                    // of the node height\n                                    relativeLength(directionOffset, height) :\n                                    relativeLength(optionOffset, totalNodeOffset))\n                            };\n                        }\n                        offset += totalNodeOffset;\n                    }\n                }\n            }\n            SankeyColumnComposition.SankeyColumnAdditions = SankeyColumnAdditions;\n        })(SankeyColumnComposition || (SankeyColumnComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SankeyColumnComposition;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend, isArray, isNumber, isObject, merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            const variateColor = (color) => {\n                const colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            let result = {}, defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce((obj, item) => {\n                        let level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            let childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach((child, i) => {\n                const newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            const value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            let rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const TreeUtilities = {\n            getColor,\n            getLevelOptions,\n            setTreeValues,\n            updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Series/Sankey/SankeySeries.js', [_modules['Core/Globals.js'], _modules['Series/NodesComposition.js'], _modules['Series/Sankey/SankeyPoint.js'], _modules['Series/Sankey/SankeySeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Sankey/SankeyColumnComposition.js'], _modules['Core/Color/Color.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (H, NodesComposition, SankeyPoint, SankeySeriesDefaults, SeriesRegistry, SankeyColumnComposition, Color, TU, U) {\n        /* *\n         *\n         *  Sankey diagram module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries, line: LineSeries } = SeriesRegistry.seriesTypes;\n        const { parse: color } = Color;\n        const { getLevelOptions } = TU;\n        const { clamp, extend, isObject, merge, pick, relativeLength, stableSort } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.sankey\n         *\n         * @augments Highcharts.Series\n         */\n        class SankeySeries extends ColumnSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static getDLOptions(params) {\n                const optionsPoint = (isObject(params.optionsPoint) ?\n                    params.optionsPoint.dataLabels :\n                    {}), optionsLevel = (isObject(params.level) ?\n                    params.level.dataLabels :\n                    {}), options = merge({\n                    style: {}\n                }, optionsLevel, optionsPoint);\n                return options;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create node columns by analyzing the nodes and the relations between\n             * incoming and outgoing links.\n             * @private\n             */\n            createNodeColumns() {\n                const columns = [];\n                for (const node of this.nodes) {\n                    node.setNodeColumn();\n                    if (!columns[node.column]) {\n                        columns[node.column] =\n                            SankeyColumnComposition.compose([], this);\n                    }\n                    columns[node.column].push(node);\n                }\n                // Fill in empty columns (#8865)\n                for (let i = 0; i < columns.length; i++) {\n                    if (typeof columns[i] === 'undefined') {\n                        columns[i] =\n                            SankeyColumnComposition.compose([], this);\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Order the nodes, starting with the root node(s). (#9818)\n             * @private\n             */\n            order(node, level) {\n                const series = this;\n                // Prevents circular recursion:\n                if (typeof node.level === 'undefined') {\n                    node.level = level;\n                    for (const link of node.linksFrom) {\n                        if (link.toNode) {\n                            series.order(link.toNode, level + 1);\n                        }\n                    }\n                }\n            }\n            /**\n             * Extend generatePoints by adding the nodes, which are Point objects\n             * but pushed to the this.nodes array.\n             * @private\n             */\n            generatePoints() {\n                NodesComposition.generatePoints.apply(this, arguments);\n                if (this.orderNodes) {\n                    for (const node of this.nodes) {\n                        // Identify the root node(s)\n                        if (node.linksTo.length === 0) {\n                            // Start by the root node(s) and recursively set the level\n                            // on all following nodes.\n                            this.order(node, 0);\n                        }\n                    }\n                    stableSort(this.nodes, (a, b) => (a.level - b.level));\n                }\n            }\n            /**\n             * Overridable function to get node padding, overridden in dependency\n             * wheel series type.\n             * @private\n             */\n            getNodePadding() {\n                let nodePadding = this.options.nodePadding || 0;\n                // If the number of columns is so great that they will overflow with\n                // the given nodePadding, we sacrifice the padding in order to\n                // render all nodes within the plot area (#11917).\n                if (this.nodeColumns) {\n                    const maxLength = this.nodeColumns.reduce((acc, col) => Math.max(acc, col.length), 0);\n                    if (maxLength * nodePadding > this.chart.plotSizeY) {\n                        nodePadding = this.chart.plotSizeY / maxLength;\n                    }\n                }\n                return nodePadding;\n            }\n            /**\n             * Define hasData function for non-cartesian series.\n             * @private\n             * @return {boolean}\n             *         Returns true if the series has points at all.\n             */\n            hasData() {\n                return !!this.processedXData.length; // != 0\n            }\n            /**\n             * Return the presentational attributes.\n             * @private\n             */\n            pointAttribs(point, state) {\n                if (!point) {\n                    return {};\n                }\n                const series = this, level = point.isNode ? point.level : point.fromNode.level, levelOptions = series.mapOptionsToLevel[level || 0] || {}, options = point.options, stateOptions = (levelOptions.states && levelOptions.states[state || '']) || {}, values = [\n                    'colorByPoint',\n                    'borderColor',\n                    'borderWidth',\n                    'linkOpacity',\n                    'opacity'\n                ].reduce((obj, key) => {\n                    obj[key] = pick(stateOptions[key], options[key], levelOptions[key], series.options[key]);\n                    return obj;\n                }, {}), color = pick(stateOptions.color, options.color, values.colorByPoint ? point.color : levelOptions.color);\n                // Node attributes\n                if (point.isNode) {\n                    return {\n                        fill: color,\n                        stroke: values.borderColor,\n                        'stroke-width': values.borderWidth,\n                        opacity: values.opacity\n                    };\n                }\n                // Link attributes\n                return {\n                    fill: Color.parse(color).setOpacity(values.linkOpacity).get()\n                };\n            }\n            drawTracker() {\n                ColumnSeries.prototype.drawTracker.call(this, this.points);\n                ColumnSeries.prototype.drawTracker.call(this, this.nodes);\n            }\n            drawPoints() {\n                ColumnSeries.prototype.drawPoints.call(this, this.points);\n                ColumnSeries.prototype.drawPoints.call(this, this.nodes);\n            }\n            drawDataLabels() {\n                ColumnSeries.prototype.drawDataLabels.call(this, this.points);\n                ColumnSeries.prototype.drawDataLabels.call(this, this.nodes);\n            }\n            /**\n             * Run pre-translation by generating the nodeColumns.\n             * @private\n             */\n            translate() {\n                if (!this.processedXData) {\n                    this.processData();\n                }\n                this.generatePoints();\n                this.nodeColumns = this.createNodeColumns();\n                this.nodeWidth = relativeLength(this.options.nodeWidth, this.chart.plotSizeX);\n                const series = this, chart = this.chart, options = this.options, nodeWidth = this.nodeWidth, nodeColumns = this.nodeColumns;\n                this.nodePadding = this.getNodePadding();\n                // Find out how much space is needed. Base it on the translation\n                // factor of the most spaceous column.\n                this.translationFactor = nodeColumns.reduce((translationFactor, column) => Math.min(translationFactor, column.sankeyColumn.getTranslationFactor(series)), Infinity);\n                this.colDistance =\n                    (chart.plotSizeX - nodeWidth -\n                        options.borderWidth) / Math.max(1, nodeColumns.length - 1);\n                // Calculate level options used in sankey and organization\n                series.mapOptionsToLevel = getLevelOptions({\n                    // NOTE: if support for allowTraversingTree is added, then from\n                    // should be the level of the root node.\n                    from: 1,\n                    levels: options.levels,\n                    to: nodeColumns.length - 1,\n                    defaults: {\n                        borderColor: options.borderColor,\n                        borderRadius: options.borderRadius,\n                        borderWidth: options.borderWidth,\n                        color: series.color,\n                        colorByPoint: options.colorByPoint,\n                        // NOTE: if support for allowTraversingTree is added, then\n                        // levelIsConstant should be optional.\n                        levelIsConstant: true,\n                        linkColor: options.linkColor,\n                        linkLineWidth: options.linkLineWidth,\n                        linkOpacity: options.linkOpacity,\n                        states: options.states\n                    }\n                });\n                // First translate all nodes so we can use them when drawing links\n                for (const column of nodeColumns) {\n                    for (const node of column) {\n                        series.translateNode(node, column);\n                    }\n                }\n                // Then translate links\n                for (const node of this.nodes) {\n                    // Translate the links from this node\n                    for (const linkPoint of node.linksFrom) {\n                        // If weight is 0 - don't render the link path #12453,\n                        // render null points (for organization chart)\n                        if ((linkPoint.weight || linkPoint.isNull) && linkPoint.to) {\n                            series.translateLink(linkPoint);\n                            linkPoint.allowShadow = false;\n                        }\n                    }\n                }\n            }\n            /**\n             * Run translation operations for one link.\n             * @private\n             */\n            translateLink(point) {\n                const getY = (node, fromOrTo) => {\n                    const linkTop = (node.offset(point, fromOrTo) *\n                        translationFactor);\n                    const y = Math.min(node.nodeY + linkTop, \n                    // Prevent links from spilling below the node (#12014)\n                    node.nodeY + (node.shapeArgs && node.shapeArgs.height || 0) - linkHeight);\n                    return y;\n                };\n                const fromNode = point.fromNode, toNode = point.toNode, chart = this.chart, { inverted } = chart, translationFactor = this.translationFactor, options = this.options, linkColorMode = pick(point.linkColorMode, options.linkColorMode), curvy = ((chart.inverted ? -this.colDistance : this.colDistance) *\n                    options.curveFactor), nodeLeft = fromNode.nodeX, right = toNode.nodeX, outgoing = point.outgoing;\n                let linkHeight = Math.max(point.weight * translationFactor, this.options.minLinkWidth), fromY = getY(fromNode, 'linksFrom'), toY = getY(toNode, 'linksTo'), nodeW = this.nodeWidth, straight = right > nodeLeft + nodeW;\n                if (chart.inverted) {\n                    fromY = chart.plotSizeY - fromY;\n                    toY = (chart.plotSizeY || 0) - toY;\n                    nodeW = -nodeW;\n                    linkHeight = -linkHeight;\n                    straight = nodeLeft > right;\n                }\n                point.shapeType = 'path';\n                point.linkBase = [\n                    fromY,\n                    fromY + linkHeight,\n                    toY,\n                    toY + linkHeight\n                ];\n                // Links going from left to right\n                if (straight && typeof toY === 'number') {\n                    point.shapeArgs = {\n                        d: [\n                            ['M', nodeLeft + nodeW, fromY],\n                            [\n                                'C',\n                                nodeLeft + nodeW + curvy,\n                                fromY,\n                                right - curvy,\n                                toY,\n                                right,\n                                toY\n                            ],\n                            ['L', right + (outgoing ? nodeW : 0), toY + linkHeight / 2],\n                            ['L', right, toY + linkHeight],\n                            [\n                                'C',\n                                right - curvy,\n                                toY + linkHeight,\n                                nodeLeft + nodeW + curvy,\n                                fromY + linkHeight,\n                                nodeLeft + nodeW, fromY + linkHeight\n                            ],\n                            ['Z']\n                        ]\n                    };\n                    // Experimental: Circular links pointing backwards. In\n                    // v6.1.0 this breaks the rendering completely, so even\n                    // this experimental rendering is an improvement. #8218.\n                    // @todo\n                    // - Make room for the link in the layout\n                    // - Automatically determine if the link should go up or\n                    //   down.\n                }\n                else if (typeof toY === 'number') {\n                    const bend = 20, vDist = chart.plotHeight - fromY - linkHeight, x1 = right - bend - linkHeight, x2 = right - bend, x3 = right, x4 = nodeLeft + nodeW, x5 = x4 + bend, x6 = x5 + linkHeight, fy1 = fromY, fy2 = fromY + linkHeight, fy3 = fy2 + bend, y4 = fy3 + vDist, y5 = y4 + bend, y6 = y5 + linkHeight, ty1 = toY, ty2 = ty1 + linkHeight, ty3 = ty2 + bend, cfy1 = fy2 - linkHeight * 0.7, cy2 = y5 + linkHeight * 0.7, cty1 = ty2 - linkHeight * 0.7, cx1 = x3 - linkHeight * 0.7, cx2 = x4 + linkHeight * 0.7;\n                    point.shapeArgs = {\n                        d: [\n                            ['M', x4, fy1],\n                            ['C', cx2, fy1, x6, cfy1, x6, fy3],\n                            ['L', x6, y4],\n                            ['C', x6, cy2, cx2, y6, x4, y6],\n                            ['L', x3, y6],\n                            ['C', cx1, y6, x1, cy2, x1, y4],\n                            ['L', x1, ty3],\n                            ['C', x1, cty1, cx1, ty1, x3, ty1],\n                            ['L', x3, ty2],\n                            ['C', x2, ty2, x2, ty2, x2, ty3],\n                            ['L', x2, y4],\n                            ['C', x2, y5, x2, y5, x3, y5],\n                            ['L', x4, y5],\n                            ['C', x5, y5, x5, y5, x5, y4],\n                            ['L', x5, fy3],\n                            ['C', x5, fy2, x5, fy2, x4, fy2],\n                            ['Z']\n                        ]\n                    };\n                }\n                // Place data labels in the middle\n                point.dlBox = {\n                    x: nodeLeft + (right - nodeLeft + nodeW) / 2,\n                    y: fromY + (toY - fromY) / 2,\n                    height: linkHeight,\n                    width: 0\n                };\n                // And set the tooltip anchor in the middle\n                point.tooltipPos = chart.inverted ? [\n                    chart.plotSizeY - point.dlBox.y - linkHeight / 2,\n                    chart.plotSizeX - point.dlBox.x\n                ] : [\n                    point.dlBox.x,\n                    point.dlBox.y + linkHeight / 2\n                ];\n                // Pass test in drawPoints. plotX/Y needs to be defined for dataLabels.\n                // #15863\n                point.y = point.plotY = 1;\n                point.x = point.plotX = 1;\n                if (!point.options.color) {\n                    if (linkColorMode === 'from') {\n                        point.color = fromNode.color;\n                    }\n                    else if (linkColorMode === 'to') {\n                        point.color = toNode.color;\n                    }\n                    else if (linkColorMode === 'gradient') {\n                        const fromColor = color(fromNode.color).get(), toColor = color(toNode.color).get();\n                        point.color = {\n                            linearGradient: {\n                                x1: 1,\n                                x2: 0,\n                                y1: 0,\n                                y2: 0\n                            },\n                            stops: [\n                                [0, inverted ? fromColor : toColor],\n                                [1, inverted ? toColor : fromColor]\n                            ]\n                        };\n                    }\n                }\n            }\n            /**\n             * Run translation operations for one node.\n             * @private\n             */\n            translateNode(node, column) {\n                const translationFactor = this.translationFactor, chart = this.chart, options = this.options, { borderRadius, borderWidth = 0 } = options, sum = node.getSum(), nodeHeight = Math.max(Math.round(sum * translationFactor), this.options.minLinkWidth), nodeWidth = Math.round(this.nodeWidth), crisp = Math.round(borderWidth) % 2 / 2, nodeOffset = column.sankeyColumn.offset(node, translationFactor), fromNodeTop = Math.floor(pick(nodeOffset.absoluteTop, (column.sankeyColumn.top(translationFactor) +\n                    nodeOffset.relativeTop))) + crisp, left = Math.floor(this.colDistance * node.column +\n                    borderWidth / 2) + relativeLength(node.options[chart.inverted ?\n                    'offsetVertical' :\n                    'offsetHorizontal'] || 0, nodeWidth) +\n                    crisp, nodeLeft = chart.inverted ?\n                    chart.plotSizeX - left :\n                    left;\n                node.sum = sum;\n                // If node sum is 0, don't render the rect #12453\n                if (sum) {\n                    // Draw the node\n                    node.shapeType = 'roundedRect';\n                    node.nodeX = nodeLeft;\n                    node.nodeY = fromNodeTop;\n                    let x = nodeLeft, y = fromNodeTop, width = node.options.width || options.width || nodeWidth, height = node.options.height || options.height || nodeHeight;\n                    // Border radius should not greater than half the height of the node\n                    // #18956\n                    const r = clamp(relativeLength((typeof borderRadius === 'object' ?\n                        borderRadius.radius :\n                        borderRadius || 0), width), 0, nodeHeight / 2);\n                    if (chart.inverted) {\n                        x = nodeLeft - nodeWidth;\n                        y = chart.plotSizeY - fromNodeTop - nodeHeight;\n                        width = node.options.height || options.height || nodeWidth;\n                        height = node.options.width || options.width || nodeHeight;\n                    }\n                    // Calculate data label options for the point\n                    node.dlOptions = SankeySeries.getDLOptions({\n                        level: this.mapOptionsToLevel[node.level],\n                        optionsPoint: node.options\n                    });\n                    // Pass test in drawPoints\n                    node.plotX = 1;\n                    node.plotY = 1;\n                    // Set the anchor position for tooltips\n                    node.tooltipPos = chart.inverted ? [\n                        chart.plotSizeY - y - height / 2,\n                        chart.plotSizeX - x - width / 2\n                    ] : [\n                        x + width / 2,\n                        y + height / 2\n                    ];\n                    node.shapeArgs = {\n                        x,\n                        y,\n                        width,\n                        height,\n                        r,\n                        display: node.hasShape() ? '' : 'none'\n                    };\n                }\n                else {\n                    node.dlOptions = {\n                        enabled: false\n                    };\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        SankeySeries.defaultOptions = merge(ColumnSeries.defaultOptions, SankeySeriesDefaults);\n        NodesComposition.compose(SankeyPoint, SankeySeries);\n        extend(SankeySeries.prototype, {\n            animate: LineSeries.prototype.animate,\n            // Create a single node that holds information on incoming and outgoing\n            // links.\n            createNode: NodesComposition.createNode,\n            forceDL: true,\n            invertible: true,\n            isCartesian: false,\n            orderNodes: true,\n            noSharedTooltip: true,\n            pointArrayMap: ['from', 'to', 'weight'],\n            pointClass: SankeyPoint,\n            searchPoint: H.noop\n        });\n        SeriesRegistry.registerSeriesType('sankey', SankeySeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * A node in a sankey diagram.\n         *\n         * @interface Highcharts.SankeyNodeObject\n         * @extends Highcharts.Point\n         * @product highcharts\n         */ /**\n        * The color of the auto generated node.\n        *\n        * @name Highcharts.SankeyNodeObject#color\n        * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n        */ /**\n        * The color index of the auto generated node, especially for use in styled\n        * mode.\n        *\n        * @name Highcharts.SankeyNodeObject#colorIndex\n        * @type {number}\n        */ /**\n        * An optional column index of where to place the node. The default behaviour is\n        * to place it next to the preceding node.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n        *      Specified node column\n        *\n        * @name Highcharts.SankeyNodeObject#column\n        * @type {number}\n        * @since 6.0.5\n        */ /**\n        * The id of the auto-generated node, refering to the `from` or `to` setting of\n        * the link.\n        *\n        * @name Highcharts.SankeyNodeObject#id\n        * @type {string}\n        */ /**\n        * The name to display for the node in data labels and tooltips. Use this when\n        * the name is different from the `id`. Where the id must be unique for each\n        * node, this is not necessary for the name.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/sankey/|Highcharts-Demo:}\n        *         Sankey diagram with node options\n        *\n        * @name Highcharts.SankeyNodeObject#name\n        * @type {string}\n        * @product highcharts\n        */ /**\n        * This option is deprecated, use\n        * {@link Highcharts.SankeyNodeObject#offsetHorizontal} and\n        * {@link Highcharts.SankeyNodeObject#offsetVertical} instead.\n        *\n        * The vertical offset of a node in terms of weight. Positive values shift the\n        * node downwards, negative shift it upwards.\n        *\n        * If a percantage string is given, the node is offset by the percentage of the\n        * node size plus `nodePadding`.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n        *         Specified node offset\n        *\n        * @deprecated\n        * @name Highcharts.SankeyNodeObject#offset\n        * @type {number|string}\n        * @default 0\n        * @since 6.0.5\n        */ /**\n        * The horizontal offset of a node. Positive values shift the node right,\n        * negative shift it left.\n        *\n        * If a percantage string is given, the node is offset by the percentage of the\n        * node size.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n        *         Specified node offset\n        *\n        * @name Highcharts.SankeyNodeObject#offsetHorizontal\n        * @type {number|string}\n        * @since 9.3.0\n        */ /**\n        * The vertical offset of a node. Positive values shift the node down,\n        * negative shift it up.\n        *\n        * If a percantage string is given, the node is offset by the percentage of the\n        * node size.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n        *         Specified node offset\n        *\n        * @name Highcharts.SankeyNodeObject#offsetVertical\n        * @type {number|string}\n        * @since 9.3.0\n        */\n        /**\n         * Formatter callback function.\n         *\n         * @callback Highcharts.SeriesSankeyDataLabelsFormatterCallbackFunction\n         *\n         * @param {Highcharts.SeriesSankeyDataLabelsFormatterContextObject|Highcharts.PointLabelObject} this\n         *        Data label context to format\n         *\n         * @return {string|undefined}\n         *         Formatted data label text\n         */\n        /**\n         * Context for the node formatter function.\n         *\n         * @interface Highcharts.SeriesSankeyDataLabelsFormatterContextObject\n         * @extends Highcharts.PointLabelObject\n         */ /**\n        * The node object. The node name, if defined, is available through\n        * `this.point.name`.\n        * @name Highcharts.SeriesSankeyDataLabelsFormatterContextObject#point\n        * @type {Highcharts.SankeyNodeObject}\n        */\n        ''; // detach doclets above\n\n        return SankeySeries;\n    });\n    _registerModule(_modules, 'masters/modules/sankey.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","SeriesRegistry","U","NodesComposition","series","prototype","seriesProto","pointClass","pointProto","defined","extend","find","merge","pick","destroy","data","concat","points","nodes","arguments","setData","forEach","node","length","setNodeState","state","others","isNode","linksTo","linksFrom","fromNode","toNode","linkOrNode","setState","graphic","updateNode","options","redraw","animation","runEvent","dataLength","linkConfig","index","update","call","nodeIndex","reduce","prevIndex","n","id","nodeConfig","push","chart","compose","PointClass","SeriesClass","createNode","findById","newNode","className","y","getSum","sumTo","sumFrom","link","weight","Math","max","offset","point","coll","i","hasShape","outgoing","formatPrefix","name","mass","marker","radius","generatePoints","nodeLookup","colorCounter","level","from","styledMode","colorIndex","color","to","Point","column","ColumnSeries","seriesTypes","SankeyPoint","applyOptions","x","getClassName","getFromNode","fromColumn","setNodeColumn","isValid","borderWidth","colorByPoint","curveFactor","dataLabels","enabled","backgroundColor","crop","nodeFormat","nodeFormatter","format","formatter","inside","inactiveOtherPoints","linkColorMode","linkOpacity","opacity","minLinkWidth","nodeAlignment","nodeWidth","nodePadding","showInLegend","states","hover","inactive","duration","tooltip","followPointer","headerFormat","pointFormat","SankeyColumnComposition","pushUnique","relativeLength","sankeyColumnArray","sankeyColumn","SankeyColumnAdditions","constructor","getTranslationFactor","slice","skipPoint","factor","remainingHeight","plotSizeY","sum","splice","top","height","nodeHeight","center","bottom","left","equalNodes","maxNodesLength","inverted","plotHeight","plotWidth","width","plotSizeX","round","totalNodeOffset","is","hangsFrom","absoluteTop","nodeY","directionOffset","optionOffset","relativeTop","Color","isArray","isNumber","isObject","getColor","colorIndexByPoint","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","chartOptionsChart","colorCount","variateColor","colorVariation","key","parse","brighten","get","getLevelOptions","params","result","defaults","converted","levels","item","levelIsConstant","setTreeValues","tree","before","idRoot","mapIdToNode","nodeRoot","optionsPoint","children","childrenTotal","levelDynamic","visible","child","newOptions","val","value","isLeaf","updateRootId","rootId","rootNode","userOptions","H","SankeySeriesDefaults","TU","line","LineSeries","clamp","stableSort","SankeySeries","getDLOptions","optionsLevel","style","createNodeColumns","columns","order","orderNodes","a","b","getNodePadding","nodeColumns","maxLength","acc","col","hasData","processedXData","pointAttribs","levelOptions","stateOptions","values","fill","stroke","borderColor","setOpacity","drawTracker","drawPoints","drawDataLabels","translate","processData","translationFactor","min","Infinity","colDistance","borderRadius","linkColor","linkLineWidth","translateNode","linkPoint","isNull","translateLink","allowShadow","getY","fromOrTo","linkTop","shapeArgs","linkHeight","curvy","nodeLeft","nodeX","right","fromY","toY","nodeW","straight","shapeType","linkBase","d","vDist","x1","x2","x4","x5","x6","fy1","fy2","fy3","y4","y5","y6","ty1","ty2","ty3","cfy1","cy2","cty1","cx1","x3","cx2","dlBox","tooltipPos","plotY","plotX","fromColor","toColor","linearGradient","y1","y2","stops","crisp","nodeOffset","fromNodeTop","floor","r","dlOptions","display","defaultOptions","animate","forceDL","invertible","isCartesian","noSharedTooltip","pointArrayMap","searchPoint","noop","registerSeriesType"],"mappings":"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"}