{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highmaps JS v11.3.0 (2024-01-10)\n *\n * (c) 2009-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/heatmap', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/Color/ColorAxisComposition.js', [_modules['Core/Color/Color.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Color, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { composed } = H;\n        const { addEvent, extend, merge, pick, pushUnique, splat } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ColorAxisComposition;\n        (function (ColorAxisComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            let ColorAxisConstructor;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(ColorAxisClass, ChartClass, FxClass, LegendClass, SeriesClass) {\n                if (pushUnique(composed, compose)) {\n                    ColorAxisConstructor = ColorAxisClass;\n                    const chartProto = ChartClass.prototype, fxProto = FxClass.prototype, seriesProto = SeriesClass.prototype;\n                    chartProto.collectionsWithUpdate.push('colorAxis');\n                    chartProto.collectionsWithInit.colorAxis = [\n                        chartProto.addColorAxis\n                    ];\n                    addEvent(ChartClass, 'afterGetAxes', onChartAfterGetAxes);\n                    wrapChartCreateAxis(ChartClass);\n                    fxProto.fillSetter = wrapFxFillSetter;\n                    fxProto.strokeSetter = wrapFxStrokeSetter;\n                    addEvent(LegendClass, 'afterGetAllItems', onLegendAfterGetAllItems);\n                    addEvent(LegendClass, 'afterColorizeItem', onLegendAfterColorizeItem);\n                    addEvent(LegendClass, 'afterUpdate', onLegendAfterUpdate);\n                    extend(seriesProto, {\n                        optionalAxis: 'colorAxis',\n                        translateColors: seriesTranslateColors\n                    });\n                    extend(seriesProto.pointClass.prototype, {\n                        setVisible: pointSetVisible\n                    });\n                    addEvent(SeriesClass, 'afterTranslate', onSeriesAfterTranslate, { order: 1 });\n                    addEvent(SeriesClass, 'bindAxes', onSeriesBindAxes);\n                }\n            }\n            ColorAxisComposition.compose = compose;\n            /**\n             * Extend the chart getAxes method to also get the color axis.\n             * @private\n             */\n            function onChartAfterGetAxes() {\n                const { userOptions } = this;\n                this.colorAxis = [];\n                // If a `colorAxis` config is present in the user options (not in a\n                // theme), instanciate it.\n                if (userOptions.colorAxis) {\n                    userOptions.colorAxis = splat(userOptions.colorAxis);\n                    userOptions.colorAxis.map((axisOptions) => (new ColorAxisConstructor(this, axisOptions)));\n                }\n            }\n            /**\n             * Add the color axis. This also removes the axis' own series to prevent\n             * them from showing up individually.\n             * @private\n             */\n            function onLegendAfterGetAllItems(e) {\n                const colorAxes = this.chart.colorAxis || [], destroyItem = (item) => {\n                    const i = e.allItems.indexOf(item);\n                    if (i !== -1) {\n                        // #15436\n                        this.destroyItem(e.allItems[i]);\n                        e.allItems.splice(i, 1);\n                    }\n                };\n                let colorAxisItems = [], options, i;\n                colorAxes.forEach(function (colorAxis) {\n                    options = colorAxis.options;\n                    if (options && options.showInLegend) {\n                        // Data classes\n                        if (options.dataClasses && options.visible) {\n                            colorAxisItems = colorAxisItems.concat(colorAxis.getDataClassLegendSymbols());\n                            // Gradient legend\n                        }\n                        else if (options.visible) {\n                            // Add this axis on top\n                            colorAxisItems.push(colorAxis);\n                        }\n                        // If dataClasses are defined or showInLegend option is not set\n                        // to true, do not add color axis' series to legend.\n                        colorAxis.series.forEach(function (series) {\n                            if (!series.options.showInLegend || options.dataClasses) {\n                                if (series.options.legendType === 'point') {\n                                    series.points.forEach(function (point) {\n                                        destroyItem(point);\n                                    });\n                                }\n                                else {\n                                    destroyItem(series);\n                                }\n                            }\n                        });\n                    }\n                });\n                i = colorAxisItems.length;\n                while (i--) {\n                    e.allItems.unshift(colorAxisItems[i]);\n                }\n            }\n            /**\n             * @private\n             */\n            function onLegendAfterColorizeItem(e) {\n                if (e.visible && e.item.legendColor) {\n                    e.item.legendItem.symbol.attr({\n                        fill: e.item.legendColor\n                    });\n                }\n            }\n            /**\n             * Updates in the legend need to be reflected in the color axis. (#6888)\n             * @private\n             */\n            function onLegendAfterUpdate(e) {\n                this.chart.colorAxis?.forEach((colorAxis) => {\n                    colorAxis.update({}, e.redraw);\n                });\n            }\n            /**\n             * Calculate and set colors for points.\n             * @private\n             */\n            function onSeriesAfterTranslate() {\n                if (this.chart.colorAxis &&\n                    this.chart.colorAxis.length ||\n                    this.colorAttribs) {\n                    this.translateColors();\n                }\n            }\n            /**\n             * Add colorAxis to series axisTypes.\n             * @private\n             */\n            function onSeriesBindAxes() {\n                const axisTypes = this.axisTypes;\n                if (!axisTypes) {\n                    this.axisTypes = ['colorAxis'];\n                }\n                else if (axisTypes.indexOf('colorAxis') === -1) {\n                    axisTypes.push('colorAxis');\n                }\n            }\n            /**\n             * Set the visibility of a single point\n             * @private\n             * @function Highcharts.colorPointMixin.setVisible\n             * @param {boolean} visible\n             */\n            function pointSetVisible(vis) {\n                const point = this, method = vis ? 'show' : 'hide';\n                point.visible = point.options.visible = Boolean(vis);\n                // Show and hide associated elements\n                ['graphic', 'dataLabel'].forEach(function (key) {\n                    if (point[key]) {\n                        point[key][method]();\n                    }\n                });\n                this.series.buildKDTree(); // rebuild kdtree #13195\n            }\n            ColorAxisComposition.pointSetVisible = pointSetVisible;\n            /**\n             * In choropleth maps, the color is a result of the value, so this needs\n             * translation too\n             * @private\n             * @function Highcharts.colorSeriesMixin.translateColors\n             */\n            function seriesTranslateColors() {\n                const series = this, points = this.data.length ? this.data : this.points, nullColor = this.options.nullColor, colorAxis = this.colorAxis, colorKey = this.colorKey;\n                points.forEach((point) => {\n                    const value = point.getNestedProperty(colorKey), color = point.options.color || (point.isNull || point.value === null ?\n                        nullColor :\n                        (colorAxis && typeof value !== 'undefined') ?\n                            colorAxis.toColor(value, point) :\n                            point.color || series.color);\n                    if (color && point.color !== color) {\n                        point.color = color;\n                        if (series.options.legendType === 'point' &&\n                            point.legendItem &&\n                            point.legendItem.label) {\n                            series.chart.legend.colorizeItem(point, point.visible);\n                        }\n                    }\n                });\n            }\n            /**\n             * @private\n             */\n            function wrapChartCreateAxis(ChartClass) {\n                const superCreateAxis = ChartClass.prototype.createAxis;\n                ChartClass.prototype.createAxis = function (type, options) {\n                    const chart = this;\n                    if (type !== 'colorAxis') {\n                        return superCreateAxis.apply(chart, arguments);\n                    }\n                    const axis = new ColorAxisConstructor(chart, merge(options.axis, {\n                        index: chart[type].length,\n                        isX: false\n                    }));\n                    chart.isDirtyLegend = true;\n                    // Clear before 'bindAxes' (#11924)\n                    chart.axes.forEach((axis) => {\n                        axis.series = [];\n                    });\n                    chart.series.forEach((series) => {\n                        series.bindAxes();\n                        series.isDirtyData = true;\n                    });\n                    if (pick(options.redraw, true)) {\n                        chart.redraw(options.animation);\n                    }\n                    return axis;\n                };\n            }\n            /**\n             * Handle animation of the color attributes directly.\n             * @private\n             */\n            function wrapFxFillSetter() {\n                this.elem.attr('fill', color(this.start).tweenTo(color(this.end), this.pos), void 0, true);\n            }\n            /**\n             * Handle animation of the color attributes directly.\n             * @private\n             */\n            function wrapFxStrokeSetter() {\n                this.elem.attr('stroke', color(this.start).tweenTo(color(this.end), this.pos), void 0, true);\n            }\n        })(ColorAxisComposition || (ColorAxisComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColorAxisComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/Color/ColorAxisDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A color axis for series. Visually, the color\n         * axis will appear as a gradient or as separate items inside the\n         * legend, depending on whether the axis is scalar or based on data\n         * classes.\n         *\n         * For supported color formats, see the\n         * [docs article about colors](https://www.highcharts.com/docs/chart-design-and-style/colors).\n         *\n         * A scalar color axis is represented by a gradient. The colors either\n         * range between the [minColor](#colorAxis.minColor) and the\n         * [maxColor](#colorAxis.maxColor), or for more fine grained control the\n         * colors can be defined in [stops](#colorAxis.stops). Often times, the\n         * color axis needs to be adjusted to get the right color spread for the\n         * data. In addition to stops, consider using a logarithmic\n         * [axis type](#colorAxis.type), or setting [min](#colorAxis.min) and\n         * [max](#colorAxis.max) to avoid the colors being determined by\n         * outliers.\n         *\n         * When [dataClasses](#colorAxis.dataClasses) are used, the ranges are\n         * subdivided into separate classes like categories based on their\n         * values. This can be used for ranges between two values, but also for\n         * a true category. However, when your data is categorized, it may be as\n         * convenient to add each category to a separate series.\n         *\n         * Color axis does not work with: `sankey`, `sunburst`, `dependencywheel`,\n         * `networkgraph`, `wordcloud`, `venn`, `gauge` and `solidgauge` series\n         * types.\n         *\n         * Since v7.2.0 `colorAxis` can also be an array of options objects.\n         *\n         * See [the Axis object](/class-reference/Highcharts.Axis) for\n         * programmatic access to the axis.\n         *\n         * @sample       {highcharts} highcharts/coloraxis/custom-color-key\n         *               Column chart with color axis\n         * @sample       {highcharts} highcharts/coloraxis/horizontal-layout\n         *               Horizontal layout\n         * @sample       {highmaps} maps/coloraxis/dataclasscolor\n         *               With data classes\n         * @sample       {highmaps} maps/coloraxis/mincolor-maxcolor\n         *               Min color and max color\n         *\n         * @extends      xAxis\n         * @excluding    alignTicks, allowDecimals, alternateGridColor, breaks,\n         *               categories, crosshair, dateTimeLabelFormats, left,\n         *               lineWidth, linkedTo, maxZoom, minRange, minTickInterval,\n         *               offset, opposite, pane, plotBands, plotLines,\n         *               reversedStacks, scrollbar, showEmpty, title, top,\n         *               zoomEnabled\n         * @product      highcharts highstock highmaps\n         * @type         {*|Array<*>}\n         * @optionparent colorAxis\n         */\n        const colorAxisDefaults = {\n            /**\n             * Whether to allow decimals on the color axis.\n             * @type      {boolean}\n             * @default   true\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.allowDecimals\n             */\n            /**\n             * Determines how to set each data class' color if no individual\n             * color is set. The default value, `tween`, computes intermediate\n             * colors between `minColor` and `maxColor`. The other possible\n             * value, `category`, pulls colors from the global or chart specific\n             * [colors](#colors) array.\n             *\n             * @sample {highmaps} maps/coloraxis/dataclasscolor/\n             *         Category colors\n             *\n             * @type       {string}\n             * @default    tween\n             * @product    highcharts highstock highmaps\n             * @validvalue [\"tween\", \"category\"]\n             * @apioption  colorAxis.dataClassColor\n             */\n            /**\n             * An array of data classes or ranges for the choropleth map. If\n             * none given, the color axis is scalar and values are distributed\n             * as a gradient between the minimum and maximum colors.\n             *\n             * @sample {highmaps} maps/demo/data-class-ranges/\n             *         Multiple ranges\n             *\n             * @sample {highmaps} maps/demo/data-class-two-ranges/\n             *         Two ranges\n             *\n             * @type      {Array<*>}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.dataClasses\n             */\n            /**\n             * The layout of the color axis. Can be `'horizontal'` or `'vertical'`.\n             * If none given, the color axis has the same layout as the legend.\n             *\n             * @sample highcharts/coloraxis/horizontal-layout/\n             *         Horizontal color axis layout with vertical legend\n             *\n             * @type      {string|undefined}\n             * @since     7.2.0\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.layout\n             */\n            /**\n             * The color of each data class. If not set, the color is pulled\n             * from the global or chart-specific [colors](#colors) array. In\n             * styled mode, this option is ignored. Instead, use colors defined\n             * in CSS.\n             *\n             * @sample {highmaps} maps/demo/data-class-two-ranges/\n             *         Explicit colors\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.dataClasses.color\n             */\n            /**\n             * The start of the value range that the data class represents,\n             * relating to the point value.\n             *\n             * The range of each `dataClass` is closed in both ends, but can be\n             * overridden by the next `dataClass`.\n             *\n             * @type      {number}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.dataClasses.from\n             */\n            /**\n             * The name of the data class as it appears in the legend.\n             * If no name is given, it is automatically created based on the\n             * `from` and `to` values. For full programmatic control,\n             * [legend.labelFormatter](#legend.labelFormatter) can be used.\n             * In the formatter, `this.from` and `this.to` can be accessed.\n             *\n             * @sample {highmaps} maps/coloraxis/dataclasses-name/\n             *         Named data classes\n             *\n             * @sample {highmaps} maps/coloraxis/dataclasses-labelformatter/\n             *         Formatted data classes\n             *\n             * @type      {string}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.dataClasses.name\n             */\n            /**\n             * The end of the value range that the data class represents,\n             * relating to the point value.\n             *\n             * The range of each `dataClass` is closed in both ends, but can be\n             * overridden by the next `dataClass`.\n             *\n             * @type      {number}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.dataClasses.to\n             */\n            /** @ignore-option */\n            lineWidth: 0,\n            /**\n             * Padding of the min value relative to the length of the axis. A\n             * padding of 0.05 will make a 100px axis 5px longer.\n             *\n             * @product highcharts highstock highmaps\n             */\n            minPadding: 0,\n            /**\n             * The maximum value of the axis in terms of map point values. If\n             * `null`, the max value is automatically calculated. If the\n             * `endOnTick` option is true, the max value might be rounded up.\n             *\n             * @sample {highmaps} maps/coloraxis/gridlines/\n             *         Explicit min and max to reduce the effect of outliers\n             *\n             * @type      {number}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.max\n             */\n            /**\n             * The minimum value of the axis in terms of map point values. If\n             * `null`, the min value is automatically calculated. If the\n             * `startOnTick` option is true, the min value might be rounded\n             * down.\n             *\n             * @sample {highmaps} maps/coloraxis/gridlines/\n             *         Explicit min and max to reduce the effect of outliers\n             *\n             * @type      {number}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.min\n             */\n            /**\n             * Padding of the max value relative to the length of the axis. A\n             * padding of 0.05 will make a 100px axis 5px longer.\n             *\n             * @product highcharts highstock highmaps\n             */\n            maxPadding: 0,\n            /**\n             * Color of the grid lines extending from the axis across the\n             * gradient.\n             *\n             * @sample {highmaps} maps/coloraxis/gridlines/\n             *         Grid lines demonstrated\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts highstock highmaps\n             */\n            gridLineColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The width of the grid lines extending from the axis across the\n             * gradient of a scalar color axis.\n             *\n             * @sample {highmaps} maps/coloraxis/gridlines/\n             *         Grid lines demonstrated\n             *\n             * @product highcharts highstock highmaps\n             */\n            gridLineWidth: 1,\n            /**\n             * The interval of the tick marks in axis units. When `null`, the\n             * tick interval is computed to approximately follow the\n             * `tickPixelInterval`.\n             *\n             * @type      {number}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.tickInterval\n             */\n            /**\n             * If [tickInterval](#colorAxis.tickInterval) is `null` this option\n             * sets the approximate pixel interval of the tick marks.\n             *\n             * @product highcharts highstock highmaps\n             */\n            tickPixelInterval: 72,\n            /**\n             * Whether to force the axis to start on a tick. Use this option\n             * with the `maxPadding` option to control the axis start.\n             *\n             * @product highcharts highstock highmaps\n             */\n            startOnTick: true,\n            /**\n             * Whether to force the axis to end on a tick. Use this option with\n             * the [maxPadding](#colorAxis.maxPadding) option to control the\n             * axis end.\n             *\n             * @product highcharts highstock highmaps\n             */\n            endOnTick: true,\n            /** @ignore */\n            offset: 0,\n            /**\n             * The triangular marker on a scalar color axis that points to the\n             * value of the hovered area. To disable the marker, set\n             * `marker: null`.\n             *\n             * @sample {highmaps} maps/coloraxis/marker/\n             *         Black marker\n             *\n             * @declare Highcharts.PointMarkerOptionsObject\n             * @product highcharts highstock highmaps\n             */\n            marker: {\n                /**\n                 * Animation for the marker as it moves between values. Set to\n                 * `false` to disable animation. Defaults to `{ duration: 50 }`.\n                 *\n                 * @type    {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                 * @product highcharts highstock highmaps\n                 */\n                animation: {\n                    /** @internal */\n                    duration: 50\n                },\n                /** @internal */\n                width: 0.01,\n                /**\n                 * The color of the marker.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @product highcharts highstock highmaps\n                 */\n                color: \"#999999\" /* Palette.neutralColor40 */\n            },\n            /**\n             * The axis labels show the number for each tick.\n             *\n             * For more live examples on label options, see [xAxis.labels in the\n             * Highcharts API.](/highcharts#xAxis.labels)\n             *\n             * @extends xAxis.labels\n             * @product highcharts highstock highmaps\n             */\n            labels: {\n                distance: 8,\n                /**\n                 * How to handle overflowing labels on horizontal color axis. If set\n                 * to `\"allow\"`, it will not be aligned at all. By default it\n                 * `\"justify\"` labels inside the chart area. If there is room to\n                 * move it, it will be aligned to the edge, else it will be removed.\n                 *\n                 * @validvalue [\"allow\", \"justify\"]\n                 * @product    highcharts highstock highmaps\n                 */\n                overflow: 'justify',\n                rotation: 0\n            },\n            /**\n             * The color to represent the minimum of the color axis. Unless\n             * [dataClasses](#colorAxis.dataClasses) or\n             * [stops](#colorAxis.stops) are set, the gradient starts at this\n             * value.\n             *\n             * If dataClasses are set, the color is based on minColor and\n             * maxColor unless a color is set for each data class, or the\n             * [dataClassColor](#colorAxis.dataClassColor) is set.\n             *\n             * @sample {highmaps} maps/coloraxis/mincolor-maxcolor/\n             *         Min and max colors on scalar (gradient) axis\n             * @sample {highmaps} maps/coloraxis/mincolor-maxcolor-dataclasses/\n             *         On data classes\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product highcharts highstock highmaps\n             */\n            minColor: \"#e6e9ff\" /* Palette.highlightColor10 */,\n            /**\n             * The color to represent the maximum of the color axis. Unless\n             * [dataClasses](#colorAxis.dataClasses) or\n             * [stops](#colorAxis.stops) are set, the gradient ends at this\n             * value.\n             *\n             * If dataClasses are set, the color is based on minColor and\n             * maxColor unless a color is set for each data class, or the\n             * [dataClassColor](#colorAxis.dataClassColor) is set.\n             *\n             * @sample {highmaps} maps/coloraxis/mincolor-maxcolor/\n             *         Min and max colors on scalar (gradient) axis\n             * @sample {highmaps} maps/coloraxis/mincolor-maxcolor-dataclasses/\n             *         On data classes\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product highcharts highstock highmaps\n             */\n            maxColor: \"#0022ff\" /* Palette.highlightColor100 */,\n            /**\n             * Color stops for the gradient of a scalar color axis. Use this in\n             * cases where a linear gradient between a `minColor` and `maxColor`\n             * is not sufficient. The stops is an array of tuples, where the\n             * first item is a float between 0 and 1 assigning the relative\n             * position in the gradient, and the second item is the color.\n             *\n             * @sample highcharts/coloraxis/coloraxis-stops/\n             *         Color axis stops\n             * @sample highcharts/coloraxis/color-key-with-stops/\n             *         Color axis stops with custom colorKey\n             * @sample {highmaps} maps/demo/heatmap/\n             *         Heatmap with three color stops\n             *\n             * @type      {Array<Array<number,Highcharts.ColorString>>}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.stops\n             */\n            /**\n             * The pixel length of the main tick marks on the color axis.\n             */\n            tickLength: 5,\n            /**\n             * The type of interpolation to use for the color axis. Can be\n             * `linear` or `logarithmic`.\n             *\n             * @sample highcharts/coloraxis/logarithmic-with-emulate-negative-values/\n             *         Logarithmic color axis with extension to emulate negative\n             *         values\n             *\n             * @type      {Highcharts.ColorAxisTypeValue}\n             * @default   linear\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.type\n             */\n            /**\n             * Whether to reverse the axis so that the highest number is closest\n             * to the origin. Defaults to `false` in a horizontal legend and\n             * `true` in a vertical legend, where the smallest value starts on\n             * top.\n             *\n             * @type      {boolean}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.reversed\n             */\n            /**\n             * @product   highcharts highstock highmaps\n             * @excluding afterBreaks, pointBreak, pointInBreak\n             * @apioption colorAxis.events\n             */\n            /**\n             * Fires when the legend item belonging to the colorAxis is clicked.\n             * One parameter, `event`, is passed to the function.\n             *\n             * @type      {Function}\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.events.legendItemClick\n             */\n            /**\n             * The width of the color axis. If it's a number, it is interpreted as\n             * pixels.\n             *\n             * If it's a percentage string, it is interpreted as percentages of the\n             * total plot width.\n             *\n             * @sample    highcharts/coloraxis/width-and-height\n             *            Percentage width and pixel height for color axis\n             *\n             * @type      {number|string}\n             * @since     @next\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.width\n             */\n            /**\n             * The height of the color axis. If it's a number, it is interpreted as\n             * pixels.\n             *\n             * If it's a percentage string, it is interpreted as percentages of the\n             * total plot height.\n             *\n             * @sample    highcharts/coloraxis/width-and-height\n             *            Percentage width and pixel height for color axis\n             *\n             * @type      {number|string}\n             * @since     @next\n             * @product   highcharts highstock highmaps\n             * @apioption colorAxis.height\n             */\n            /**\n             * Whether to display the colorAxis in the legend.\n             *\n             * @sample highcharts/coloraxis/hidden-coloraxis-with-3d-chart/\n             *         Hidden color axis with 3d chart\n             *\n             * @see [heatmap.showInLegend](#series.heatmap.showInLegend)\n             *\n             * @since   4.2.7\n             * @product highcharts highstock highmaps\n             */\n            showInLegend: true\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return colorAxisDefaults;\n    });\n    _registerModule(_modules, 'Core/Axis/Color/ColorAxisLike.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { merge } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ColorAxisLike;\n        (function (ColorAxisLike) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize defined data classes.\n             * @private\n             */\n            function initDataClasses(userOptions) {\n                const axis = this, chart = axis.chart, legendItem = axis.legendItem = axis.legendItem || {}, options = axis.options, userDataClasses = userOptions.dataClasses || [];\n                let dataClass, dataClasses, colorCount = chart.options.chart.colorCount, colorCounter = 0, colors;\n                axis.dataClasses = dataClasses = [];\n                legendItem.labels = [];\n                for (let i = 0, iEnd = userDataClasses.length; i < iEnd; ++i) {\n                    dataClass = userDataClasses[i];\n                    dataClass = merge(dataClass);\n                    dataClasses.push(dataClass);\n                    if (!chart.styledMode && dataClass.color) {\n                        continue;\n                    }\n                    if (options.dataClassColor === 'category') {\n                        if (!chart.styledMode) {\n                            colors = chart.options.colors || [];\n                            colorCount = colors.length;\n                            dataClass.color = colors[colorCounter];\n                        }\n                        dataClass.colorIndex = colorCounter;\n                        // Loop back to zero\n                        colorCounter++;\n                        if (colorCounter === colorCount) {\n                            colorCounter = 0;\n                        }\n                    }\n                    else {\n                        dataClass.color = color(options.minColor).tweenTo(color(options.maxColor), iEnd < 2 ? 0.5 : i / (iEnd - 1) // #3219\n                        );\n                    }\n                }\n            }\n            ColorAxisLike.initDataClasses = initDataClasses;\n            /**\n             * Create initial color stops.\n             * @private\n             */\n            function initStops() {\n                const axis = this, options = axis.options, stops = axis.stops = options.stops || [\n                    [0, options.minColor || ''],\n                    [1, options.maxColor || '']\n                ];\n                for (let i = 0, iEnd = stops.length; i < iEnd; ++i) {\n                    stops[i].color = color(stops[i][1]);\n                }\n            }\n            ColorAxisLike.initStops = initStops;\n            /**\n             * Normalize logarithmic values.\n             * @private\n             */\n            function normalizedValue(value) {\n                const axis = this, max = axis.max || 0, min = axis.min || 0;\n                if (axis.logarithmic) {\n                    value = axis.logarithmic.log2lin(value);\n                }\n                return 1 - ((max - value) /\n                    ((max - min) || 1));\n            }\n            ColorAxisLike.normalizedValue = normalizedValue;\n            /**\n             * Translate from a value to a color.\n             * @private\n             */\n            function toColor(value, point) {\n                const axis = this;\n                const dataClasses = axis.dataClasses;\n                const stops = axis.stops;\n                let pos, from, to, color, dataClass, i;\n                if (dataClasses) {\n                    i = dataClasses.length;\n                    while (i--) {\n                        dataClass = dataClasses[i];\n                        from = dataClass.from;\n                        to = dataClass.to;\n                        if ((typeof from === 'undefined' || value >= from) &&\n                            (typeof to === 'undefined' || value <= to)) {\n                            color = dataClass.color;\n                            if (point) {\n                                point.dataClass = i;\n                                point.colorIndex = dataClass.colorIndex;\n                            }\n                            break;\n                        }\n                    }\n                }\n                else {\n                    pos = axis.normalizedValue(value);\n                    i = stops.length;\n                    while (i--) {\n                        if (pos > stops[i][0]) {\n                            break;\n                        }\n                    }\n                    from = stops[i] || stops[i + 1];\n                    to = stops[i + 1] || from;\n                    // The position within the gradient\n                    pos = 1 - (to[0] - pos) / ((to[0] - from[0]) || 1);\n                    color = from.color.tweenTo(to.color, pos);\n                }\n                return color;\n            }\n            ColorAxisLike.toColor = toColor;\n        })(ColorAxisLike || (ColorAxisLike = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColorAxisLike;\n    });\n    _registerModule(_modules, 'Core/Axis/Color/ColorAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Axis/Color/ColorAxisComposition.js'], _modules['Core/Axis/Color/ColorAxisDefaults.js'], _modules['Core/Axis/Color/ColorAxisLike.js'], _modules['Core/Defaults.js'], _modules['Core/Legend/LegendSymbol.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Axis, ColorAxisComposition, ColorAxisDefaults, ColorAxisLike, D, LegendSymbol, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { series: Series } = SeriesRegistry;\n        const { defined, extend, fireEvent, isArray, isNumber, merge, pick, relativeLength } = U;\n        defaultOptions.colorAxis = merge(defaultOptions.xAxis, ColorAxisDefaults);\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ColorAxis object for inclusion in gradient legends.\n         *\n         * @class\n         * @name Highcharts.ColorAxis\n         * @augments Highcharts.Axis\n         *\n         * @param {Highcharts.Chart} chart\n         * The related chart of the color axis.\n         *\n         * @param {Highcharts.ColorAxisOptions} userOptions\n         * The color axis options for initialization.\n         */\n        class ColorAxis extends Axis {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(ChartClass, FxClass, LegendClass, SeriesClass) {\n                ColorAxisComposition.compose(ColorAxis, ChartClass, FxClass, LegendClass, SeriesClass);\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            constructor(chart, userOptions) {\n                super(chart, userOptions);\n                this.coll = 'colorAxis';\n                this.visible = true;\n                this.init(chart, userOptions);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initializes the color axis.\n             *\n             * @function Highcharts.ColorAxis#init\n             *\n             * @param {Highcharts.Chart} chart\n             * The related chart of the color axis.\n             *\n             * @param {Highcharts.ColorAxisOptions} userOptions\n             * The color axis options for initialization.\n             */\n            init(chart, userOptions) {\n                const axis = this;\n                const legend = chart.options.legend || {}, horiz = userOptions.layout ?\n                    userOptions.layout !== 'vertical' :\n                    legend.layout !== 'vertical';\n                axis.side = userOptions.side || horiz ? 2 : 1;\n                axis.reversed = userOptions.reversed || !horiz;\n                axis.opposite = !horiz;\n                super.init(chart, userOptions, 'colorAxis');\n                // Super.init saves the extended user options, now replace it with the\n                // originals\n                this.userOptions = userOptions;\n                if (isArray(chart.userOptions.colorAxis)) {\n                    chart.userOptions.colorAxis[this.index] = userOptions;\n                }\n                // Prepare data classes\n                if (userOptions.dataClasses) {\n                    axis.initDataClasses(userOptions);\n                }\n                axis.initStops();\n                // Override original axis properties\n                axis.horiz = horiz;\n                axis.zoomEnabled = false;\n            }\n            /**\n             * Returns true if the series has points at all.\n             *\n             * @function Highcharts.ColorAxis#hasData\n             *\n             * @return {boolean}\n             * True, if the series has points, otherwise false.\n             */\n            hasData() {\n                return !!(this.tickPositions || []).length;\n            }\n            /**\n             * Override so that ticks are not added in data class axes (#6914)\n             * @private\n             */\n            setTickPositions() {\n                if (!this.dataClasses) {\n                    return super.setTickPositions();\n                }\n            }\n            /**\n             * Extend the setOptions method to process extreme colors and color stops.\n             * @private\n             */\n            setOptions(userOptions) {\n                const options = merge(defaultOptions.colorAxis, userOptions, \n                // Forced options\n                {\n                    showEmpty: false,\n                    title: null,\n                    visible: this.chart.options.legend.enabled &&\n                        userOptions.visible !== false\n                });\n                super.setOptions(options);\n                this.options.crosshair = this.options.marker;\n            }\n            /**\n             * @private\n             */\n            setAxisSize() {\n                const axis = this, chart = axis.chart, symbol = axis.legendItem?.symbol;\n                let { width, height } = axis.getSize();\n                if (symbol) {\n                    this.left = +symbol.attr('x');\n                    this.top = +symbol.attr('y');\n                    this.width = width = +symbol.attr('width');\n                    this.height = height = +symbol.attr('height');\n                    this.right = chart.chartWidth - this.left - width;\n                    this.bottom = chart.chartHeight - this.top - height;\n                    this.pos = this.horiz ? this.left : this.top;\n                }\n                // Fake length for disabled legend to avoid tick issues\n                // and such (#5205)\n                this.len = (this.horiz ? width : height) ||\n                    ColorAxis.defaultLegendLength;\n            }\n            /**\n             * Override the getOffset method to add the whole axis groups inside the\n             * legend.\n             * @private\n             */\n            getOffset() {\n                const axis = this;\n                const group = axis.legendItem?.group;\n                const sideOffset = axis.chart.axisOffset[axis.side];\n                if (group) {\n                    // Hook for the getOffset method to add groups to this parent\n                    // group\n                    axis.axisParent = group;\n                    // Call the base\n                    super.getOffset();\n                    const legend = this.chart.legend;\n                    // Adds `maxLabelLength` needed for label padding corrections done\n                    // by `render()` and `getMargins()` (#15551).\n                    legend.allItems.forEach(function (item) {\n                        if (item instanceof ColorAxis) {\n                            item.drawLegendSymbol(legend, item);\n                        }\n                    });\n                    legend.render();\n                    this.chart.getMargins(true);\n                    // First time only\n                    if (!axis.added) {\n                        axis.added = true;\n                        axis.labelLeft = 0;\n                        axis.labelRight = axis.width;\n                    }\n                    // Reset it to avoid color axis reserving space\n                    axis.chart.axisOffset[axis.side] = sideOffset;\n                }\n            }\n            /**\n             * Create the color gradient.\n             * @private\n             */\n            setLegendColor() {\n                const axis = this;\n                const horiz = axis.horiz;\n                const reversed = axis.reversed;\n                const one = reversed ? 1 : 0;\n                const zero = reversed ? 0 : 1;\n                const grad = horiz ? [one, 0, zero, 0] : [0, zero, 0, one]; // #3190\n                axis.legendColor = {\n                    linearGradient: {\n                        x1: grad[0],\n                        y1: grad[1],\n                        x2: grad[2],\n                        y2: grad[3]\n                    },\n                    stops: axis.stops\n                };\n            }\n            /**\n             * The color axis appears inside the legend and has its own legend symbol.\n             * @private\n             */\n            drawLegendSymbol(legend, item) {\n                const axis = this, legendItem = item.legendItem || {}, padding = legend.padding, legendOptions = legend.options, labelOptions = axis.options.labels, itemDistance = pick(legendOptions.itemDistance, 10), horiz = axis.horiz, { width, height } = axis.getSize(), labelPadding = pick(\n                // @todo: This option is not documented, nor implemented when\n                // vertical\n                legendOptions.labelPadding, horiz ? 16 : 30);\n                this.setLegendColor();\n                // Create the gradient\n                if (!legendItem.symbol) {\n                    legendItem.symbol = this.chart.renderer.symbol('roundedRect')\n                        .attr({\n                        r: legendOptions.symbolRadius ?? 3,\n                        zIndex: 1\n                    }).add(legendItem.group);\n                }\n                legendItem.symbol.attr({\n                    x: 0,\n                    y: (legend.baseline || 0) - 11,\n                    width: width,\n                    height: height\n                });\n                // Set how much space this legend item takes up\n                legendItem.labelWidth = (width +\n                    padding +\n                    (horiz ?\n                        itemDistance :\n                        pick(labelOptions.x, labelOptions.distance) +\n                            this.maxLabelLength));\n                legendItem.labelHeight = height + padding + (horiz ? labelPadding : 0);\n            }\n            /**\n             * Fool the legend.\n             * @private\n             */\n            setState(state) {\n                this.series.forEach(function (series) {\n                    series.setState(state);\n                });\n            }\n            /**\n             * @private\n             */\n            setVisible() {\n            }\n            /**\n             * @private\n             */\n            getSeriesExtremes() {\n                const axis = this;\n                const series = axis.series;\n                let colorValArray, colorKey, colorValIndex, pointArrayMap, calculatedExtremes, cSeries, i = series.length, yData, j;\n                this.dataMin = Infinity;\n                this.dataMax = -Infinity;\n                while (i--) { // x, y, value, other\n                    cSeries = series[i];\n                    colorKey = cSeries.colorKey = pick(cSeries.options.colorKey, cSeries.colorKey, cSeries.pointValKey, cSeries.zoneAxis, 'y');\n                    pointArrayMap = cSeries.pointArrayMap;\n                    calculatedExtremes = cSeries[colorKey + 'Min'] &&\n                        cSeries[colorKey + 'Max'];\n                    if (cSeries[colorKey + 'Data']) {\n                        colorValArray = cSeries[colorKey + 'Data'];\n                    }\n                    else {\n                        if (!pointArrayMap) {\n                            colorValArray = cSeries.yData;\n                        }\n                        else {\n                            colorValArray = [];\n                            colorValIndex = pointArrayMap.indexOf(colorKey);\n                            yData = cSeries.yData;\n                            if (colorValIndex >= 0 && yData) {\n                                for (j = 0; j < yData.length; j++) {\n                                    colorValArray.push(pick(yData[j][colorValIndex], yData[j]));\n                                }\n                            }\n                        }\n                    }\n                    // If color key extremes are already calculated, use them.\n                    if (calculatedExtremes) {\n                        cSeries.minColorValue = cSeries[colorKey + 'Min'];\n                        cSeries.maxColorValue = cSeries[colorKey + 'Max'];\n                    }\n                    else {\n                        const cExtremes = Series.prototype.getExtremes.call(cSeries, colorValArray);\n                        cSeries.minColorValue = cExtremes.dataMin;\n                        cSeries.maxColorValue = cExtremes.dataMax;\n                    }\n                    if (defined(cSeries.minColorValue) &&\n                        defined(cSeries.maxColorValue)) {\n                        this.dataMin =\n                            Math.min(this.dataMin, cSeries.minColorValue);\n                        this.dataMax =\n                            Math.max(this.dataMax, cSeries.maxColorValue);\n                    }\n                    if (!calculatedExtremes) {\n                        Series.prototype.applyExtremes.call(cSeries);\n                    }\n                }\n            }\n            /**\n             * Internal function to draw a crosshair.\n             *\n             * @function Highcharts.ColorAxis#drawCrosshair\n             *\n             * @param {Highcharts.PointerEventObject} [e]\n             *        The event arguments from the modified pointer event, extended with\n             *        `chartX` and `chartY`\n             *\n             * @param {Highcharts.Point} [point]\n             *        The Point object if the crosshair snaps to points.\n             *\n             * @emits Highcharts.ColorAxis#event:afterDrawCrosshair\n             * @emits Highcharts.ColorAxis#event:drawCrosshair\n             */\n            drawCrosshair(e, point) {\n                const axis = this, legendItem = axis.legendItem || {}, plotX = point && point.plotX, plotY = point && point.plotY, axisPos = axis.pos, axisLen = axis.len;\n                let crossPos;\n                if (point) {\n                    crossPos = axis.toPixels(point.getNestedProperty(point.series.colorKey));\n                    if (crossPos < axisPos) {\n                        crossPos = axisPos - 2;\n                    }\n                    else if (crossPos > axisPos + axisLen) {\n                        crossPos = axisPos + axisLen + 2;\n                    }\n                    point.plotX = crossPos;\n                    point.plotY = axis.len - crossPos;\n                    super.drawCrosshair(e, point);\n                    point.plotX = plotX;\n                    point.plotY = plotY;\n                    if (axis.cross &&\n                        !axis.cross.addedToColorAxis &&\n                        legendItem.group) {\n                        axis.cross\n                            .addClass('highcharts-coloraxis-marker')\n                            .add(legendItem.group);\n                        axis.cross.addedToColorAxis = true;\n                        if (!axis.chart.styledMode &&\n                            typeof axis.crosshair === 'object') {\n                            axis.cross.attr({\n                                fill: axis.crosshair.color\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            getPlotLinePath(options) {\n                const axis = this, left = axis.left, pos = options.translatedValue, top = axis.top;\n                // Crosshairs only\n                return isNumber(pos) ? // `pos` can be 0 (#3969)\n                    (axis.horiz ? [\n                        ['M', pos - 4, top - 6],\n                        ['L', pos + 4, top - 6],\n                        ['L', pos, top],\n                        ['Z']\n                    ] : [\n                        ['M', left, pos],\n                        ['L', left - 6, pos + 6],\n                        ['L', left - 6, pos - 6],\n                        ['Z']\n                    ]) :\n                    super.getPlotLinePath(options);\n            }\n            /**\n             * Updates a color axis instance with a new set of options. The options are\n             * merged with the existing options, so only new or altered options need to\n             * be specified.\n             *\n             * @function Highcharts.ColorAxis#update\n             *\n             * @param {Highcharts.ColorAxisOptions} newOptions\n             * The new options that will be merged in with existing options on the color\n             * axis.\n             *\n             * @param {boolean} [redraw]\n             * Whether to redraw the chart after the color axis is altered. If doing\n             * more operations on the chart, it is a good idea to set redraw to `false`\n             * and call {@link Highcharts.Chart#redraw} after.\n             */\n            update(newOptions, redraw) {\n                const axis = this, chart = axis.chart, legend = chart.legend;\n                this.series.forEach((series) => {\n                    // Needed for Axis.update when choropleth colors change\n                    series.isDirtyData = true;\n                });\n                // When updating data classes, destroy old items and make sure new\n                // ones are created (#3207)\n                if (newOptions.dataClasses && legend.allItems || axis.dataClasses) {\n                    axis.destroyItems();\n                }\n                super.update(newOptions, redraw);\n                if (axis.legendItem && axis.legendItem.label) {\n                    axis.setLegendColor();\n                    legend.colorizeItem(this, true);\n                }\n            }\n            /**\n             * Destroy color axis legend items.\n             * @private\n             */\n            destroyItems() {\n                const axis = this, chart = axis.chart, legendItem = axis.legendItem || {};\n                if (legendItem.label) {\n                    chart.legend.destroyItem(axis);\n                }\n                else if (legendItem.labels) {\n                    for (const item of legendItem.labels) {\n                        chart.legend.destroyItem(item);\n                    }\n                }\n                chart.isDirtyLegend = true;\n            }\n            //   Removing the whole axis (#14283)\n            destroy() {\n                this.chart.isDirtyLegend = true;\n                this.destroyItems();\n                super.destroy(...[].slice.call(arguments));\n            }\n            /**\n             * Removes the color axis and the related legend item.\n             *\n             * @function Highcharts.ColorAxis#remove\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart following the remove.\n             */\n            remove(redraw) {\n                this.destroyItems();\n                super.remove(redraw);\n            }\n            /**\n             * Get the legend item symbols for data classes.\n             * @private\n             */\n            getDataClassLegendSymbols() {\n                const axis = this, chart = axis.chart, legendItems = (axis.legendItem &&\n                    axis.legendItem.labels ||\n                    []), legendOptions = chart.options.legend, valueDecimals = pick(legendOptions.valueDecimals, -1), valueSuffix = pick(legendOptions.valueSuffix, '');\n                const getPointsInDataClass = (i) => axis.series.reduce((points, s) => {\n                    points.push(...s.points.filter((point) => point.dataClass === i));\n                    return points;\n                }, []);\n                let name;\n                if (!legendItems.length) {\n                    axis.dataClasses.forEach((dataClass, i) => {\n                        const from = dataClass.from, to = dataClass.to, { numberFormatter } = chart;\n                        let vis = true;\n                        // Assemble the default name. This can be overridden\n                        // by legend.options.labelFormatter\n                        name = '';\n                        if (typeof from === 'undefined') {\n                            name = '< ';\n                        }\n                        else if (typeof to === 'undefined') {\n                            name = '> ';\n                        }\n                        if (typeof from !== 'undefined') {\n                            name += numberFormatter(from, valueDecimals) + valueSuffix;\n                        }\n                        if (typeof from !== 'undefined' && typeof to !== 'undefined') {\n                            name += ' - ';\n                        }\n                        if (typeof to !== 'undefined') {\n                            name += numberFormatter(to, valueDecimals) + valueSuffix;\n                        }\n                        // Add a mock object to the legend items\n                        legendItems.push(extend({\n                            chart,\n                            name,\n                            options: {},\n                            drawLegendSymbol: LegendSymbol.rectangle,\n                            visible: true,\n                            isDataClass: true,\n                            // Override setState to set either normal or inactive\n                            // state to all points in this data class\n                            setState: (state) => {\n                                for (const point of getPointsInDataClass(i)) {\n                                    point.setState(state);\n                                }\n                            },\n                            // Override setState to show or hide all points in this\n                            // data class\n                            setVisible: function () {\n                                this.visible = vis = axis.visible = !vis;\n                                const affectedSeries = [];\n                                for (const point of getPointsInDataClass(i)) {\n                                    point.setVisible(vis);\n                                    if (affectedSeries.indexOf(point.series) === -1) {\n                                        affectedSeries.push(point.series);\n                                    }\n                                }\n                                chart.legend.colorizeItem(this, vis);\n                                affectedSeries.forEach((series) => {\n                                    fireEvent(series, 'afterDataClassLegendClick');\n                                });\n                            }\n                        }, dataClass));\n                    });\n                }\n                return legendItems;\n            }\n            /**\n             * Get size of color axis symbol.\n             * @private\n             */\n            getSize() {\n                const axis = this, { chart, horiz } = axis, { legend: legendOptions, height: colorAxisHeight, width: colorAxisWidth } = axis.options, width = pick(defined(colorAxisWidth) ?\n                    relativeLength(colorAxisWidth, chart.chartWidth) : void 0, legendOptions?.symbolWidth, horiz ? ColorAxis.defaultLegendLength : 12), height = pick(defined(colorAxisHeight) ?\n                    relativeLength(colorAxisHeight, chart.chartHeight) : void 0, legendOptions?.symbolHeight, horiz ? 12 : ColorAxis.defaultLegendLength);\n                return {\n                    width,\n                    height\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        ColorAxis.defaultLegendLength = 200;\n        /**\n         * @private\n         */\n        ColorAxis.keepProps = [\n            'legendItem'\n        ];\n        extend(ColorAxis.prototype, ColorAxisLike);\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        // Properties to preserve after destroy, for Axis.update (#5881, #6025).\n        Array.prototype.push.apply(Axis.keepProps, ColorAxis.keepProps);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Color axis types\n         *\n         * @typedef {\"linear\"|\"logarithmic\"} Highcharts.ColorAxisTypeValue\n         */\n        ''; // detach doclet above\n\n        return ColorAxis;\n    });\n    _registerModule(_modules, 'Series/ColorMapComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: columnProto } } = SeriesRegistry.seriesTypes;\n        const { addEvent, defined } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ColorMapComposition;\n        (function (ColorMapComposition) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            ColorMapComposition.pointMembers = {\n                dataLabelOnNull: true,\n                moveToTopOnHover: true,\n                isValid: pointIsValid\n            };\n            ColorMapComposition.seriesMembers = {\n                colorKey: 'value',\n                axisTypes: ['xAxis', 'yAxis', 'colorAxis'],\n                parallelArrays: ['x', 'y', 'value'],\n                pointArrayMap: ['value'],\n                trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n                colorAttribs: seriesColorAttribs,\n                pointAttribs: columnProto.pointAttribs\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                const PointClass = SeriesClass.prototype.pointClass;\n                addEvent(PointClass, 'afterSetState', onPointAfterSetState);\n                return SeriesClass;\n            }\n            ColorMapComposition.compose = compose;\n            /**\n             * Move points to the top of the z-index order when hovered.\n             * @private\n             */\n            function onPointAfterSetState(e) {\n                const point = this;\n                if (point.moveToTopOnHover && point.graphic) {\n                    point.graphic.attr({\n                        zIndex: e && e.state === 'hover' ? 1 : 0\n                    });\n                }\n            }\n            /**\n             * Color points have a value option that determines whether or not it is\n             * a null point\n             * @private\n             */\n            function pointIsValid() {\n                return (this.value !== null &&\n                    this.value !== Infinity &&\n                    this.value !== -Infinity &&\n                    // undefined is allowed, but NaN is not (#17279)\n                    (this.value === void 0 || !isNaN(this.value)));\n            }\n            /**\n             * Get the color attibutes to apply on the graphic\n             * @private\n             * @function Highcharts.colorMapSeriesMixin.colorAttribs\n             * @param {Highcharts.Point} point\n             * @return {Highcharts.SVGAttributes}\n             *         The SVG attributes\n             */\n            function seriesColorAttribs(point) {\n                const ret = {};\n                if (defined(point.color) &&\n                    (!point.state || point.state === 'normal') // #15746\n                ) {\n                    ret[this.colorProp || 'fill'] = point.color;\n                }\n                return ret;\n            }\n        })(ColorMapComposition || (ColorMapComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColorMapComposition;\n    });\n    _registerModule(_modules, 'Series/Heatmap/HeatmapPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { scatter: { prototype: { pointClass: ScatterPoint } } } = SeriesRegistry.seriesTypes;\n        const { clamp, defined, extend, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class HeatmapPoint extends ScatterPoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            applyOptions(options, x) {\n                // #17970, if point is null remove its color, because it may be updated\n                if (this.isNull || this.value === null) {\n                    delete this.color;\n                }\n                super.applyOptions(options, x);\n                this.formatPrefix = this.isNull || this.value === null ?\n                    'null' : 'point';\n                return this;\n            }\n            /** @private */\n            getCellAttributes() {\n                const point = this, series = point.series, seriesOptions = series.options, xPad = (seriesOptions.colsize || 1) / 2, yPad = (seriesOptions.rowsize || 1) / 2, xAxis = series.xAxis, yAxis = series.yAxis, markerOptions = point.options.marker || series.options.marker, pointPlacement = series.pointPlacementToXValue(), // #7860\n                pointPadding = pick(point.pointPadding, seriesOptions.pointPadding, 0), cellAttr = {\n                    x1: clamp(Math.round(xAxis.len -\n                        xAxis.translate(point.x - xPad, false, true, false, true, -pointPlacement)), -xAxis.len, 2 * xAxis.len),\n                    x2: clamp(Math.round(xAxis.len -\n                        xAxis.translate(point.x + xPad, false, true, false, true, -pointPlacement)), -xAxis.len, 2 * xAxis.len),\n                    y1: clamp(Math.round(yAxis.translate(point.y - yPad, false, true, false, true)), -yAxis.len, 2 * yAxis.len),\n                    y2: clamp(Math.round(yAxis.translate(point.y + yPad, false, true, false, true)), -yAxis.len, 2 * yAxis.len)\n                };\n                const dimensions = [['width', 'x'], ['height', 'y']];\n                // Handle marker's fixed width, and height values including border\n                // and pointPadding while calculating cell attributes.\n                for (const dimension of dimensions) {\n                    const prop = dimension[0], direction = dimension[1];\n                    let start = direction + '1', end = direction + '2';\n                    const side = Math.abs(cellAttr[start] - cellAttr[end]), borderWidth = markerOptions &&\n                        markerOptions.lineWidth || 0, plotPos = Math.abs(cellAttr[start] + cellAttr[end]) / 2, widthOrHeight = markerOptions && markerOptions[prop];\n                    if (defined(widthOrHeight) && widthOrHeight < side) {\n                        const halfCellSize = widthOrHeight / 2 + borderWidth / 2;\n                        cellAttr[start] = plotPos - halfCellSize;\n                        cellAttr[end] = plotPos + halfCellSize;\n                    }\n                    // Handle pointPadding\n                    if (pointPadding) {\n                        if ((direction === 'x' && xAxis.reversed) ||\n                            (direction === 'y' && !yAxis.reversed)) {\n                            start = end;\n                            end = direction + '1';\n                        }\n                        cellAttr[start] += pointPadding;\n                        cellAttr[end] -= pointPadding;\n                    }\n                }\n                return cellAttr;\n            }\n            /**\n             * @private\n             */\n            haloPath(size) {\n                if (!size) {\n                    return [];\n                }\n                const { x = 0, y = 0, width = 0, height = 0 } = this.shapeArgs || {};\n                return [\n                    ['M', x - size, y - size],\n                    ['L', x - size, y + height + size],\n                    ['L', x + width + size, y + height + size],\n                    ['L', x + width + size, y - size],\n                    ['Z']\n                ];\n            }\n            /**\n             * Color points have a value option that determines whether or not it is\n             * a null point\n             * @private\n             */\n            isValid() {\n                // undefined is allowed\n                return (this.value !== Infinity &&\n                    this.value !== -Infinity);\n            }\n        }\n        extend(HeatmapPoint.prototype, {\n            dataLabelOnNull: true,\n            moveToTopOnHover: true,\n            ttBelow: false\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HeatmapPoint;\n    });\n    _registerModule(_modules, 'Series/Heatmap/HeatmapSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A heatmap is a graphical representation of data where the individual\n         * values contained in a matrix are represented as colors.\n         *\n         * @productdesc {highcharts}\n         * Requires `modules/heatmap`.\n         *\n         * @sample highcharts/demo/heatmap/\n         *         Simple heatmap\n         * @sample highcharts/demo/heatmap-canvas/\n         *         Heavy heatmap\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    animationLimit, connectEnds, connectNulls, cropThreshold,\n         *               dashStyle, findNearestPointBy, getExtremesFromAll, jitter,\n         *               linecap, lineWidth, pointInterval, pointIntervalUnit,\n         *               pointRange, pointStart, shadow, softThreshold, stacking,\n         *               step, threshold, cluster, dragDrop\n         * @product      highcharts highmaps\n         * @optionparent plotOptions.heatmap\n         */\n        const HeatmapSeriesDefaults = {\n            /**\n             * Animation is disabled by default on the heatmap series.\n             */\n            animation: false,\n            /**\n             * The border radius for each heatmap item. The border's color and\n             * width can be set in marker options.\n             *\n             * @see [lineColor](#plotOptions.heatmap.marker.lineColor)\n             * @see [lineWidth](#plotOptions.heatmap.marker.lineWidth)\n             */\n            borderRadius: 0,\n            /**\n             * The border width for each heatmap item.\n             */\n            borderWidth: 0,\n            /**\n             * Padding between the points in the heatmap.\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0\n             * @apioption plotOptions.heatmap.pointPadding\n             */\n            /**\n             * @default   value\n             * @apioption plotOptions.heatmap.colorKey\n             */\n            /**\n             * The main color of the series. In heat maps this color is rarely used,\n             * as we mostly use the color to denote the value of each point. Unless\n             * options are set in the [colorAxis](#colorAxis), the default value\n             * is pulled from the [options.colors](#colors) array.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     4.0\n             * @product   highcharts\n             * @apioption plotOptions.heatmap.color\n             */\n            /**\n             * The column size - how many X axis units each column in the heatmap\n             * should span.\n             *\n             * @sample {highcharts} maps/demo/heatmap/\n             *         One day\n             * @sample {highmaps} maps/demo/heatmap/\n             *         One day\n             *\n             * @type      {number}\n             * @default   1\n             * @since     4.0\n             * @product   highcharts highmaps\n             * @apioption plotOptions.heatmap.colsize\n             */\n            /**\n             * The row size - how many Y axis units each heatmap row should span.\n             *\n             * @sample {highcharts} maps/demo/heatmap/\n             *         1 by default\n             * @sample {highmaps} maps/demo/heatmap/\n             *         1 by default\n             *\n             * @type      {number}\n             * @default   1\n             * @since     4.0\n             * @product   highcharts highmaps\n             * @apioption plotOptions.heatmap.rowsize\n             */\n            /**\n             * Make the heatmap render its data points as an interpolated image.\n             *\n             * @sample highcharts/demo/heatmap-interpolation\n             *   Interpolated heatmap image displaying user activity on a website\n             * @sample highcharts/series-heatmap/interpolation\n             *   Interpolated heatmap toggle\n             *\n             */\n            interpolation: false,\n            /**\n             * The color applied to null points. In styled mode, a general CSS class\n             * is applied instead.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            nullColor: \"#f7f7f7\" /* Palette.neutralColor3 */,\n            dataLabels: {\n                formatter: function () {\n                    const { numberFormatter } = this.series.chart;\n                    const { value } = this.point;\n                    return isNumber(value) ? numberFormatter(value, -1) : '';\n                },\n                inside: true,\n                verticalAlign: 'middle',\n                crop: false,\n                /**\n                 * @ignore-option\n                 */\n                overflow: 'allow',\n                padding: 0 // #3837\n            },\n            /**\n             * @excluding radius, enabledThreshold\n             * @since     8.1\n             */\n            marker: {\n                /**\n                 * A predefined shape or symbol for the marker. When undefined, the\n                 * symbol is pulled from options.symbols. Other possible values are\n                 * `'circle'`, `'square'`,`'diamond'`, `'triangle'`,\n                 * `'triangle-down'`, `'rect'`, and `'ellipse'`.\n                 *\n                 * Additionally, the URL to a graphic can be given on this form:\n                 * `'url(graphic.png)'`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-symbol/\n                 *         Predefined, graphic and custom markers\n                 * @sample {highstock} highcharts/plotoptions/series-marker-symbol/\n                 *         Predefined, graphic and custom markers\n                 */\n                symbol: 'rect',\n                /** @ignore-option */\n                radius: 0,\n                lineColor: void 0,\n                states: {\n                    /**\n                     * @excluding radius, radiusPlus\n                     */\n                    hover: {\n                        /**\n                         * Set the marker's fixed width on hover state.\n                         *\n                         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n                         *         70px fixed marker's width and height on hover\n                         *\n                         * @type      {number|undefined}\n                         * @default   undefined\n                         * @product   highcharts highmaps\n                         * @apioption plotOptions.heatmap.marker.states.hover.width\n                         */\n                        /**\n                         * Set the marker's fixed height on hover state.\n                         *\n                         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n                         *         70px fixed marker's width and height on hover\n                         *\n                         * @type      {number|undefined}\n                         * @default   undefined\n                         * @product   highcharts highmaps\n                         * @apioption plotOptions.heatmap.marker.states.hover.height\n                         */\n                        /**\n                         * The number of pixels to increase the width of the\n                         * selected point.\n                         *\n                         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n                         *         20px greater width and height on hover\n                         *\n                         * @type      {number|undefined}\n                         * @default   undefined\n                         * @product   highcharts highmaps\n                         * @apioption plotOptions.heatmap.marker.states.hover.widthPlus\n                         */\n                        /**\n                         * The number of pixels to increase the height of the\n                         * selected point.\n                         *\n                         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n                        *          20px greater width and height on hover\n                            *\n                            * @type      {number|undefined}\n                            * @default   undefined\n                            * @product   highcharts highmaps\n                            * @apioption plotOptions.heatmap.marker.states.hover.heightPlus\n                            */\n                        /**\n                         * The additional line width for a hovered point.\n                         *\n                         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-linewidthplus\n                         *         5 pixels wider lineWidth on hover\n                         * @sample {highmaps} maps/plotoptions/heatmap-marker-states-hover-linewidthplus\n                         *         5 pixels wider lineWidth on hover\n                         */\n                        lineWidthPlus: 0\n                    },\n                    /**\n                     * @excluding radius\n                     */\n                    select: {\n                    /**\n                     * Set the marker's fixed width on select state.\n                     *\n                     * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n                     *         70px fixed marker's width and height on hover\n                     *\n                     * @type      {number|undefined}\n                     * @default   undefined\n                     * @product   highcharts highmaps\n                     * @apioption plotOptions.heatmap.marker.states.select.width\n                     */\n                    /**\n                     * Set the marker's fixed height on select state.\n                     *\n                     * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n                     *         70px fixed marker's width and height on hover\n                     *\n                     * @type      {number|undefined}\n                     * @default   undefined\n                     * @product   highcharts highmaps\n                     * @apioption plotOptions.heatmap.marker.states.select.height\n                     */\n                    /**\n                     * The number of pixels to increase the width of the\n                     * selected point.\n                     *\n                     * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n                     *         20px greater width and height on hover\n                     *\n                     * @type      {number|undefined}\n                     * @default   undefined\n                     * @product   highcharts highmaps\n                     * @apioption plotOptions.heatmap.marker.states.select.widthPlus\n                     */\n                    /**\n                     * The number of pixels to increase the height of the\n                     * selected point.\n                     *\n                     * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n                     *         20px greater width and height on hover\n                     *\n                     * @type      {number|undefined}\n                     * @default   undefined\n                     * @product   highcharts highmaps\n                     * @apioption plotOptions.heatmap.marker.states.select.heightPlus\n                     */\n                    }\n                }\n            },\n            clip: true,\n            /** @ignore-option */\n            pointRange: null,\n            tooltip: {\n                pointFormat: '{point.x}, {point.y}: {point.value}<br/>'\n            },\n            states: {\n                hover: {\n                    /** @ignore-option */\n                    halo: false,\n                    /**\n                     * How much to brighten the point on interaction. Requires the\n                     * main color to be defined in hex or rgb(a) format.\n                     *\n                     * In styled mode, the hover brightening is by default replaced\n                     * with a fill-opacity set in the `.highcharts-point:hover`\n                     * rule.\n                     */\n                    brightness: 0.2\n                }\n            },\n            legendSymbol: 'rectangle'\n        };\n        /**\n         * A `heatmap` series. If the [type](#series.heatmap.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @productdesc {highcharts}\n         * Requires `modules/heatmap`.\n         *\n         * @extends   series,plotOptions.heatmap\n         * @excluding cropThreshold, dataParser, dataURL, dragDrop ,pointRange, stack,\n         * @product   highcharts highmaps\n         * @apioption series.heatmap\n         */\n        /**\n         * An array of data points for the series. For the `heatmap` series\n         * type, points can be given in the following ways:\n         *\n         * 1.  An array of arrays with 3 or 2 values. In this case, the values\n         * correspond to `x,y,value`. If the first value is a string, it is\n         * applied as the name of the point, and the `x` value is inferred.\n         * The `x` value can also be omitted, in which case the inner arrays\n         * should be of length 2\\. Then the `x` value is automatically calculated,\n         * either starting at 0 and incremented by 1, or from `pointStart`\n         * and `pointInterval` given in the series options.\n         *\n         *  ```js\n         *     data: [\n         *         [0, 9, 7],\n         *         [1, 10, 4],\n         *         [2, 6, 3]\n         *     ]\n         *  ```\n         *\n         * 2.  An array of objects with named values. The following snippet shows only a\n         * few settings, see the complete options set below. If the total number of data\n         * points exceeds the series' [turboThreshold](#series.heatmap.turboThreshold),\n         * this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         x: 1,\n         *         y: 3,\n         *         value: 10,\n         *         name: \"Point2\",\n         *         color: \"#00FF00\"\n         *     }, {\n         *         x: 1,\n         *         y: 7,\n         *         value: 10,\n         *         name: \"Point1\",\n         *         color: \"#FF00FF\"\n         *     }]\n         *  ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<number>|*>}\n         * @extends   series.line.data\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data\n         */\n        /**\n         * The color of the point. In heat maps the point color is rarely set\n         * explicitly, as we use the color to denote the `value`. Options for\n         * this are set in the [colorAxis](#colorAxis) configuration.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.color\n         */\n        /**\n         * The value of the point, resulting in a color controled by options\n         * as set in the [colorAxis](#colorAxis) configuration.\n         *\n         * @type      {number}\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.value\n         */\n        /**\n         * The x value of the point. For datetime axes,\n         * the X value is the timestamp in milliseconds since 1970.\n         *\n         * @type      {number}\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.x\n         */\n        /**\n         * The y value of the point.\n         *\n         * @type      {number}\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.y\n         */\n        /**\n         * Point padding for a single point.\n         *\n         * @sample maps/plotoptions/tilemap-pointpadding\n         *         Point padding on tiles\n         *\n         * @type      {number}\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.pointPadding\n         */\n        /**\n         * @excluding radius, enabledThreshold\n         * @product   highcharts highmaps\n         * @since     8.1\n         * @apioption series.heatmap.data.marker\n         */\n        /**\n         * @excluding radius, enabledThreshold\n         * @product   highcharts highmaps\n         * @since     8.1\n         * @apioption series.heatmap.marker\n         */\n        /**\n         * @excluding radius, radiusPlus\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.marker.states.hover\n         */\n        /**\n         * @excluding radius\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.marker.states.select\n         */\n        /**\n         * @excluding radius, radiusPlus\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.marker.states.hover\n         */\n        /**\n         * @excluding radius\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.marker.states.select\n         */\n        /**\n        * Set the marker's fixed width on hover state.\n        *\n        * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-linewidthplus\n        *         5 pixels wider lineWidth on hover\n        *\n        * @type      {number|undefined}\n        * @default   0\n        * @product   highcharts highmaps\n        * @apioption series.heatmap.marker.states.hover.lineWidthPlus\n        */\n        /**\n        * Set the marker's fixed width on hover state.\n        *\n        * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n        *         70px fixed marker's width and height on hover\n        *\n        * @type      {number|undefined}\n        * @default   undefined\n        * @product   highcharts highmaps\n        * @apioption series.heatmap.marker.states.hover.width\n        */\n        /**\n         * Set the marker's fixed height on hover state.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n         *         70px fixed marker's width and height on hover\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.marker.states.hover.height\n         */\n        /**\n        * The number of pixels to increase the width of the\n        * hovered point.\n        *\n        * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n        *         One day\n        *\n        * @type      {number|undefined}\n        * @default   undefined\n        * @product   highcharts highmaps\n        * @apioption series.heatmap.marker.states.hover.widthPlus\n        */\n        /**\n         * The number of pixels to increase the height of the\n         * hovered point.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n         *         One day\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.marker.states.hover.heightPlus\n         */\n        /**\n         * The number of pixels to increase the width of the\n         * hovered point.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n         *         One day\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.marker.states.select.widthPlus\n         */\n        /**\n         * The number of pixels to increase the height of the\n         * hovered point.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n         *         One day\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.marker.states.select.heightPlus\n         */\n        /**\n        * Set the marker's fixed width on hover state.\n        *\n        * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-linewidthplus\n        *         5 pixels wider lineWidth on hover\n        *\n        * @type      {number|undefined}\n        * @default   0\n        * @product   highcharts highmaps\n        * @apioption series.heatmap.data.marker.states.hover.lineWidthPlus\n        */\n        /**\n         * Set the marker's fixed width on hover state.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n         *         70px fixed marker's width and height on hover\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.marker.states.hover.width\n         */\n        /**\n         * Set the marker's fixed height on hover state.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n         *         70px fixed marker's width and height on hover\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.marker.states.hover.height\n         */\n        /**\n         * The number of pixels to increase the width of the\n         * hovered point.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n         *         One day\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highstock\n         * @apioption series.heatmap.data.marker.states.hover.widthPlus\n         */\n        /**\n         * The number of pixels to increase the height of the\n         * hovered point.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n         *         One day\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highstock\n         * @apioption series.heatmap.data.marker.states.hover.heightPlus\n         */\n        /**\n        * Set the marker's fixed width on select state.\n        *\n        * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n        *         70px fixed marker's width and height on hover\n        *\n        * @type      {number|undefined}\n        * @default   undefined\n        * @product   highcharts highmaps\n        * @apioption series.heatmap.data.marker.states.select.width\n        */\n        /**\n         * Set the marker's fixed height on select state.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-width\n         *         70px fixed marker's width and height on hover\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highmaps\n         * @apioption series.heatmap.data.marker.states.select.height\n         */\n        /**\n         * The number of pixels to increase the width of the\n         * hovered point.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n         *         One day\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highstock\n         * @apioption series.heatmap.data.marker.states.select.widthPlus\n         */\n        /**\n         * The number of pixels to increase the height of the\n         * hovered point.\n         *\n         * @sample {highcharts} maps/plotoptions/heatmap-marker-states-hover-widthplus\n         *         One day\n         *\n         * @type      {number|undefined}\n         * @default   undefined\n         * @product   highcharts highstock\n         * @apioption series.heatmap.data.marker.states.select.heightPlus\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HeatmapSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/InterpolationUtilities.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Hubert Kozik\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { doc } = H;\n        const { defined, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Find color of point based on color axis.\n         *\n         * @function Highcharts.colorFromPoint\n         *\n         * @param {number | null} value\n         *        Value to find corresponding color on the color axis.\n         *\n         * @param {Highcharts.Point} point\n         *        Point to find it's color from color axis.\n         *\n         * @return {number[]}\n         *        Color in RGBa array.\n         */\n        function colorFromPoint(value, point) {\n            const colorAxis = point.series.colorAxis;\n            if (colorAxis) {\n                const rgba = (colorAxis.toColor(value || 0, point)\n                    .split(')')[0]\n                    .split('(')[1]\n                    .split(',')\n                    .map((s) => pick(parseFloat(s), parseInt(s, 10))));\n                rgba[3] = pick(rgba[3], 1.0) * 255;\n                if (!defined(value) || !point.visible) {\n                    rgba[3] = 0;\n                }\n                return rgba;\n            }\n            return [0, 0, 0, 0];\n        }\n        /**\n         * Method responsible for creating a canvas for interpolation image.\n         * @private\n         */\n        function getContext(series) {\n            const { canvas, context } = series;\n            if (canvas && context) {\n                context.clearRect(0, 0, canvas.width, canvas.height);\n            }\n            else {\n                series.canvas = doc.createElement('canvas');\n                series.context = series.canvas.getContext('2d', {\n                    willReadFrequently: true\n                }) || void 0;\n                return series.context;\n            }\n            return context;\n        }\n        const InterpolationUtilities = {\n            colorFromPoint,\n            getContext\n        };\n\n        return InterpolationUtilities;\n    });\n    _registerModule(_modules, 'Series/Heatmap/HeatmapSeries.js', [_modules['Core/Color/Color.js'], _modules['Series/ColorMapComposition.js'], _modules['Series/Heatmap/HeatmapPoint.js'], _modules['Series/Heatmap/HeatmapSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGRenderer.js'], _modules['Core/Utilities.js'], _modules['Series/InterpolationUtilities.js']], function (Color, ColorMapComposition, HeatmapPoint, HeatmapSeriesDefaults, SeriesRegistry, SVGRenderer, U, IU) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: Series, seriesTypes: { column: ColumnSeries, scatter: ScatterSeries } } = SeriesRegistry;\n        const { prototype: { symbols } } = SVGRenderer;\n        const { addEvent, extend, fireEvent, isNumber, merge, pick } = U;\n        const { colorFromPoint, getContext } = IU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.heatmap\n         *\n         * @augments Highcharts.Series\n         */\n        class HeatmapSeries extends ScatterSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.valueMax = NaN;\n                this.valueMin = NaN;\n                this.isDirtyCanvas = true;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            drawPoints() {\n                const series = this, seriesOptions = series.options, interpolation = seriesOptions.interpolation, seriesMarkerOptions = seriesOptions.marker || {};\n                if (interpolation) {\n                    const { image, chart, xAxis, yAxis } = series, { reversed: xRev = false, len: width } = xAxis, { reversed: yRev = false, len: height } = yAxis, dimensions = { width, height };\n                    if (!image || series.isDirtyData || series.isDirtyCanvas) {\n                        const ctx = getContext(series), { canvas, options: { colsize = 1, rowsize = 1 }, points, points: { length } } = series, pointsLen = length - 1, colorAxis = (chart.colorAxis && chart.colorAxis[0]);\n                        if (canvas && ctx && colorAxis) {\n                            const { min: xMin, max: xMax } = xAxis.getExtremes(), { min: yMin, max: yMax } = yAxis.getExtremes(), xDelta = xMax - xMin, yDelta = yMax - yMin, imgMultiple = 8.0, lastX = Math.round(imgMultiple * ((xDelta / colsize) / imgMultiple)), lastY = Math.round(imgMultiple * ((yDelta / rowsize) / imgMultiple)), [transformX, transformY] = [\n                                [lastX, lastX / xDelta, xRev, 'ceil'],\n                                [lastY, lastY / yDelta, !yRev, 'floor']\n                            ].map(([last, scale, rev, rounding]) => (rev ?\n                                (v) => (Math[rounding](last -\n                                    (scale * (v)))) :\n                                (v) => (Math[rounding](scale * v)))), canvasWidth = canvas.width = lastX + 1, canvasHeight = canvas.height = lastY + 1, canvasArea = canvasWidth * canvasHeight, pixelToPointScale = pointsLen / canvasArea, pixelData = new Uint8ClampedArray(canvasArea * 4), pointInPixels = (x, y) => (Math.ceil((canvasWidth * transformY(y - yMin)) +\n                                transformX(x - xMin)) * 4);\n                            series.buildKDTree();\n                            for (let i = 0; i < canvasArea; i++) {\n                                const point = points[Math.ceil(pixelToPointScale * i)], { x, y } = point;\n                                pixelData.set(colorFromPoint(point.value, point), pointInPixels(x, y));\n                            }\n                            ctx.putImageData(new ImageData(pixelData, canvasWidth), 0, 0);\n                            if (image) {\n                                image.attr({\n                                    ...dimensions,\n                                    href: canvas.toDataURL('image/png', 1)\n                                });\n                            }\n                            else {\n                                series.directTouch = false;\n                                series.image = chart.renderer.image(canvas.toDataURL('image/png', 1))\n                                    .attr(dimensions)\n                                    .add(series.group);\n                            }\n                        }\n                        series.isDirtyCanvas = false;\n                    }\n                    else if (image.width !== width || image.height !== height) {\n                        image.attr(dimensions);\n                    }\n                }\n                else if (seriesMarkerOptions.enabled || series._hasPointMarkers) {\n                    Series.prototype.drawPoints.call(series);\n                    series.points.forEach((point) => {\n                        if (point.graphic) {\n                            // In styled mode, use CSS, otherwise the fill used in\n                            // the style sheet will take precedence over\n                            // the fill attribute.\n                            point.graphic[series.chart.styledMode ? 'css' : 'animate'](series.colorAttribs(point));\n                            if (point.value === null) { // #15708\n                                point.graphic.addClass('highcharts-null-point');\n                            }\n                        }\n                    });\n                }\n            }\n            /**\n             * @private\n             */\n            getExtremes() {\n                // Get the extremes from the value data\n                const { dataMin, dataMax } = Series.prototype.getExtremes\n                    .call(this, this.valueData);\n                if (isNumber(dataMin)) {\n                    this.valueMin = dataMin;\n                }\n                if (isNumber(dataMax)) {\n                    this.valueMax = dataMax;\n                }\n                // Get the extremes from the y data\n                return Series.prototype.getExtremes.call(this);\n            }\n            /**\n             * Override to also allow null points, used when building the k-d-tree for\n             * tooltips in boost mode.\n             * @private\n             */\n            getValidPoints(points, insideOnly) {\n                return Series.prototype.getValidPoints.call(this, points, insideOnly, true);\n            }\n            /**\n             * Define hasData function for non-cartesian series. Returns true if the\n             * series has points at all.\n             * @private\n             */\n            hasData() {\n                return !!this.processedXData.length; // != 0\n            }\n            /**\n             * Override the init method to add point ranges on both axes.\n             * @private\n             */\n            init() {\n                super.init.apply(this, arguments);\n                const options = this.options;\n                // #3758, prevent resetting in setData\n                options.pointRange = pick(options.pointRange, options.colsize || 1);\n                // general point range\n                this.yAxis.axisPointRange = options.rowsize || 1;\n                // Bind new symbol names\n                symbols.ellipse = symbols.circle;\n                // @todo\n                //\n                // Setting the border radius here is a workaround. It should be set in\n                // the shapeArgs or returned from `markerAttribs`. However,\n                // Series.drawPoints does not pick up markerAttribs to be passed over to\n                // `renderer.symbol`. Also, image symbols are not positioned by their\n                // top left corner like other symbols are. This should be refactored,\n                // then we could save ourselves some tests for .hasImage etc. And the\n                // evaluation of borderRadius would be moved to `markerAttribs`.\n                if (options.marker && isNumber(options.borderRadius)) {\n                    options.marker.r = options.borderRadius;\n                }\n            }\n            /**\n             * @private\n             */\n            markerAttribs(point, state) {\n                const shapeArgs = point.shapeArgs || {};\n                if (point.hasImage) {\n                    return {\n                        x: point.plotX,\n                        y: point.plotY\n                    };\n                }\n                // Setting width and height attributes on image does not affect on its\n                // dimensions.\n                if (state && state !== 'normal') {\n                    const pointMarkerOptions = point.options.marker || {}, seriesMarkerOptions = this.options.marker || {}, seriesStateOptions = (seriesMarkerOptions.states &&\n                        seriesMarkerOptions.states[state]) || {}, pointStateOptions = (pointMarkerOptions.states &&\n                        pointMarkerOptions.states[state]) || {};\n                    // Set new width and height basing on state options.\n                    const width = (pointStateOptions.width ||\n                        seriesStateOptions.width ||\n                        shapeArgs.width ||\n                        0) + (pointStateOptions.widthPlus ||\n                        seriesStateOptions.widthPlus ||\n                        0);\n                    const height = (pointStateOptions.height ||\n                        seriesStateOptions.height ||\n                        shapeArgs.height ||\n                        0) + (pointStateOptions.heightPlus ||\n                        seriesStateOptions.heightPlus ||\n                        0);\n                    // Align marker by the new size.\n                    const x = (shapeArgs.x || 0) + ((shapeArgs.width || 0) - width) / 2, y = (shapeArgs.y || 0) + ((shapeArgs.height || 0) - height) / 2;\n                    return { x, y, width, height };\n                }\n                return shapeArgs;\n            }\n            /**\n             * @private\n             */\n            pointAttribs(point, state) {\n                const series = this, attr = Series.prototype.pointAttribs.call(series, point, state), seriesOptions = series.options || {}, plotOptions = series.chart.options.plotOptions || {}, seriesPlotOptions = plotOptions.series || {}, heatmapPlotOptions = plotOptions.heatmap || {}, \n                // Get old properties in order to keep backward compatibility\n                borderColor = (point && point.options.borderColor) ||\n                    seriesOptions.borderColor ||\n                    heatmapPlotOptions.borderColor ||\n                    seriesPlotOptions.borderColor, borderWidth = (point && point.options.borderWidth) ||\n                    seriesOptions.borderWidth ||\n                    heatmapPlotOptions.borderWidth ||\n                    seriesPlotOptions.borderWidth ||\n                    attr['stroke-width'];\n                // Apply lineColor, or set it to default series color.\n                attr.stroke = ((point && point.marker && point.marker.lineColor) ||\n                    (seriesOptions.marker && seriesOptions.marker.lineColor) ||\n                    borderColor ||\n                    this.color);\n                // Apply old borderWidth property if exists.\n                attr['stroke-width'] = borderWidth;\n                if (state && state !== 'normal') {\n                    const stateOptions = merge((seriesOptions.states &&\n                        seriesOptions.states[state]), (seriesOptions.marker &&\n                        seriesOptions.marker.states &&\n                        seriesOptions.marker.states[state]), (point &&\n                        point.options.states &&\n                        point.options.states[state] || {}));\n                    attr.fill =\n                        stateOptions.color ||\n                            Color.parse(attr.fill).brighten(stateOptions.brightness || 0).get();\n                    attr.stroke = (stateOptions.lineColor || attr.stroke); // #17896\n                }\n                return attr;\n            }\n            /**\n             * @private\n             */\n            translate() {\n                const series = this, options = series.options, { borderRadius, marker } = options, symbol = marker && marker.symbol || 'rect', shape = symbols[symbol] ? symbol : 'rect', hasRegularShape = ['circle', 'square'].indexOf(shape) !== -1;\n                series.generatePoints();\n                for (const point of series.points) {\n                    const cellAttr = point.getCellAttributes();\n                    let x = Math.min(cellAttr.x1, cellAttr.x2), y = Math.min(cellAttr.y1, cellAttr.y2), width = Math.max(Math.abs(cellAttr.x2 - cellAttr.x1), 0), height = Math.max(Math.abs(cellAttr.y2 - cellAttr.y1), 0);\n                    point.hasImage = (point.marker && point.marker.symbol || symbol || '').indexOf('url') === 0;\n                    // If marker shape is regular (square), find the shorter cell's\n                    // side.\n                    if (hasRegularShape) {\n                        const sizeDiff = Math.abs(width - height);\n                        x = Math.min(cellAttr.x1, cellAttr.x2) +\n                            (width < height ? 0 : sizeDiff / 2);\n                        y = Math.min(cellAttr.y1, cellAttr.y2) +\n                            (width < height ? sizeDiff / 2 : 0);\n                        width = height = Math.min(width, height);\n                    }\n                    if (point.hasImage) {\n                        point.marker = { width, height };\n                    }\n                    point.plotX = point.clientX = (cellAttr.x1 + cellAttr.x2) / 2;\n                    point.plotY = (cellAttr.y1 + cellAttr.y2) / 2;\n                    point.shapeType = 'path';\n                    point.shapeArgs = merge(true, { x, y, width, height }, {\n                        d: symbols[shape](x, y, width, height, { r: isNumber(borderRadius) ? borderRadius : 0 })\n                    });\n                }\n                fireEvent(series, 'afterTranslate');\n            }\n        }\n        HeatmapSeries.defaultOptions = merge(ScatterSeries.defaultOptions, HeatmapSeriesDefaults);\n        addEvent(HeatmapSeries, 'afterDataClassLegendClick', function () {\n            this.isDirtyCanvas = true;\n            this.drawPoints();\n        });\n        extend(HeatmapSeries.prototype, {\n            axisTypes: ColorMapComposition.seriesMembers.axisTypes,\n            colorKey: ColorMapComposition.seriesMembers.colorKey,\n            directTouch: true,\n            getExtremesFromAll: true,\n            parallelArrays: ColorMapComposition.seriesMembers.parallelArrays,\n            pointArrayMap: ['y', 'value'],\n            pointClass: HeatmapPoint,\n            specialGroup: 'group',\n            trackerGroups: ColorMapComposition.seriesMembers.trackerGroups,\n            /**\n             * @private\n             */\n            alignDataLabel: ColumnSeries.prototype.alignDataLabel,\n            colorAttribs: ColorMapComposition.seriesMembers.colorAttribs,\n            getSymbol: Series.prototype.getSymbol\n        });\n        ColorMapComposition.compose(HeatmapSeries);\n        SeriesRegistry.registerSeriesType('heatmap', HeatmapSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Heatmap series only. Padding between the points in the heatmap.\n         * @name Highcharts.Point#pointPadding\n         * @type {number|undefined}\n         */\n        /**\n         * Heatmap series only. The value of the point, resulting in a color\n         * controled by options as set in the colorAxis configuration.\n         * @name Highcharts.Point#value\n         * @type {number|null|undefined}\n         */\n        /* *\n         * @interface Highcharts.PointOptionsObject in parts/Point.ts\n         */ /**\n        * Heatmap series only. Point padding for a single point.\n        * @name Highcharts.PointOptionsObject#pointPadding\n        * @type {number|undefined}\n        */ /**\n        * Heatmap series only. The value of the point, resulting in a color controled\n        * by options as set in the colorAxis configuration.\n        * @name Highcharts.PointOptionsObject#value\n        * @type {number|null|undefined}\n        */\n        ''; // detach doclets above\n\n        return HeatmapSeries;\n    });\n    _registerModule(_modules, 'masters/modules/heatmap.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/Color/ColorAxis.js']], function (Highcharts, ColorAxis) {\n\n        const G = Highcharts;\n        G.ColorAxis = ColorAxis;\n        ColorAxis.compose(G.Chart, G.Fx, G.Legend, G.Series);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","Color","H","U","ColorAxisComposition","parse","color","composed","addEvent","extend","merge","pick","pushUnique","splat","ColorAxisConstructor","onChartAfterGetAxes","userOptions","colorAxis","map","axisOptions","onLegendAfterGetAllItems","e","colorAxes","chart","destroyItem","item","i","allItems","indexOf","splice","colorAxisItems","options","forEach","showInLegend","dataClasses","visible","concat","getDataClassLegendSymbols","push","series","legendType","points","point","length","unshift","onLegendAfterColorizeItem","legendColor","legendItem","symbol","attr","fill","onLegendAfterUpdate","update","redraw","onSeriesAfterTranslate","colorAttribs","translateColors","onSeriesBindAxes","axisTypes","pointSetVisible","vis","method","Boolean","key","buildKDTree","seriesTranslateColors","data","nullColor","colorKey","value","getNestedProperty","isNull","toColor","label","legend","colorizeItem","wrapFxFillSetter","elem","start","tweenTo","end","pos","wrapFxStrokeSetter","compose","ColorAxisClass","ChartClass","FxClass","LegendClass","SeriesClass","chartProto","prototype","fxProto","seriesProto","collectionsWithUpdate","collectionsWithInit","addColorAxis","wrapChartCreateAxis","superCreateAxis","createAxis","type","arguments","axis","index","isX","isDirtyLegend","axes","bindAxes","isDirtyData","animation","fillSetter","strokeSetter","optionalAxis","pointClass","setVisible","order","lineWidth","minPadding","maxPadding","gridLineColor","gridLineWidth","tickPixelInterval","startOnTick","endOnTick","offset","marker","duration","width","labels","distance","overflow","rotation","minColor","maxColor","tickLength","ColorAxisLike","initDataClasses","userDataClasses","dataClass","colorCount","colorCounter","colors","iEnd","styledMode","dataClassColor","colorIndex","initStops","stops","normalizedValue","max","min","logarithmic","log2lin","from","to","Axis","ColorAxisDefaults","D","LegendSymbol","SeriesRegistry","defaultOptions","Series","defined","fireEvent","isArray","isNumber","relativeLength","xAxis","ColorAxis","constructor","coll","init","horiz","layout","side","reversed","opposite","zoomEnabled","hasData","tickPositions","setTickPositions","setOptions","showEmpty","title","enabled","crosshair","setAxisSize","height","getSize","left","top","right","chartWidth","bottom","chartHeight","len","defaultLegendLength","getOffset","group","sideOffset","axisOffset","axisParent","drawLegendSymbol","render","getMargins","added","labelLeft","labelRight","setLegendColor","one","zero","grad","linearGradient","x1","y1","x2","y2","padding","legendOptions","labelOptions","itemDistance","labelPadding","renderer","r","symbolRadius","zIndex","add","x","y","baseline","labelWidth","maxLabelLength","labelHeight","setState","state","getSeriesExtremes","colorValArray","colorValIndex","pointArrayMap","calculatedExtremes","cSeries","yData","j","dataMin","Infinity","dataMax","pointValKey","zoneAxis","minColorValue","maxColorValue","cExtremes","getExtremes","call","Math","applyExtremes","drawCrosshair","crossPos","plotX","plotY","axisPos","axisLen","toPixels","cross","addedToColorAxis","addClass","getPlotLinePath","translatedValue","newOptions","destroyItems","destroy","slice","remove","name","legendItems","valueDecimals","valueSuffix","getPointsInDataClass","reduce","s","filter","numberFormatter","rectangle","isDataClass","affectedSeries","colorAxisHeight","colorAxisWidth","symbolWidth","symbolHeight","keepProps","Array","ColorMapComposition","column","columnProto","seriesTypes","onPointAfterSetState","moveToTopOnHover","graphic","pointMembers","dataLabelOnNull","isValid","isNaN","seriesMembers","parallelArrays","trackerGroups","ret","colorProp","pointAttribs","PointClass","scatter","ScatterPoint","clamp","HeatmapPoint","applyOptions","formatPrefix","getCellAttributes","seriesOptions","xPad","colsize","yPad","rowsize","yAxis","markerOptions","pointPlacement","pointPlacementToXValue","pointPadding","cellAttr","round","translate","dimension","prop","direction","abs","borderWidth","plotPos","widthOrHeight","halfCellSize","haloPath","size","shapeArgs","ttBelow","borderRadius","interpolation","dataLabels","formatter","inside","verticalAlign","crop","radius","lineColor","states","hover","lineWidthPlus","select","clip","pointRange","tooltip","pointFormat","halo","brightness","legendSymbol","doc","colorFromPoint","rgba","split","parseFloat","parseInt","getContext","canvas","context","clearRect","createElement","willReadFrequently","HeatmapSeriesDefaults","SVGRenderer","IU","ColumnSeries","ScatterSeries","symbols","HeatmapSeries","valueMax","NaN","valueMin","isDirtyCanvas","drawPoints","seriesMarkerOptions","image","xRev","yRev","dimensions","ctx","xMin","xMax","yMin","yMax","xDelta","yDelta","lastX","imgMultiple","lastY","transformX","transformY","last","scale","rev","rounding","v","canvasWidth","canvasHeight","canvasArea","pixelToPointScale","pointsLen","pixelData","Uint8ClampedArray","pointInPixels","ceil","set","putImageData","ImageData","href","toDataURL","directTouch","_hasPointMarkers","valueData","getValidPoints","insideOnly","processedXData","axisPointRange","ellipse","circle","markerAttribs","hasImage","pointMarkerOptions","seriesStateOptions","pointStateOptions","widthPlus","heightPlus","plotOptions","seriesPlotOptions","heatmapPlotOptions","heatmap","borderColor","stroke","stateOptions","brighten","get","shape","hasRegularShape","generatePoints","sizeDiff","clientX","shapeType","d","getExtremesFromAll","specialGroup","alignDataLabel","getSymbol","registerSeriesType","G","Chart","Fx","Legend"],"mappings":"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"}